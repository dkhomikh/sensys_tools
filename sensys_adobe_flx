'option explicit
' Jenkins and UFT automation
'https://sumeetkushwah.com/2015/03/24/implementing-ci-using-jenkins-and-uft/
'
' RUN FROM COMMAND LINE C:\Users\dmitry khomikh>CScript "U:\runTD2Tests.vbs"
'Dim objShell
'Set objShell = WScript.CreateObject ("WScript.shell")
'objShell.run "cmd /K pscp.exe c:\temp\sunset.jpg tokunbo@my-ipaddress:/home/tokunbo"
'Set objShell = Nothing'
'
'scp -r -P 8881 dkhomikh@192.168.2.3:/tftpboot/RELEASE.flexgui_2_14_1_92 .'
'Usage: pscp [options] [user@]host:source target
'        pscp [options] source [source...] [user@]host:target
'        pscp [options] -ls [user@]host:filespec
' Options:
'   -V        print version information and exit
'   -pgpfp    print PGP key fingerprints and exit
'   -p        preserve file attributes
'   -q        quiet, don't show statistics
'   -r        copy directories recursively
'   -v        show verbose messages
'   -load sessname  Load settings from saved session
'   -P port   connect to specified port
'   -l user   connect with specified username
'   -pw passw login with specified password
'   -1 -2     force use of particular SSH protocol version
'   -4 -6     force use of IPv4 or IPv6
'   -C        enable compression
'   -i key    private key file for authentication
'   -noagent  disable use of Pageant
'   -agent    enable use of Pageant
'   -batch    disable all interactive prompts
'   -unsafe   allow server-side wildcards (DANGEROUS)
'   -sftp     force use of SFTP protocol
'   -scp      force use of SCP protocol
'
' QUIRIES
'select tc.Name, tr.Status,tr.BuildId  FROM Tests  tc left join TestRuns tr on tc.Name = tr.Name WHERE Status IS NULL;
'select tc.Name FROM Tests  tc left join TestRuns tr on tc.Name = tr.Name where Status IS NULL;
'select * from TestRuns;'
'$ tail -f /Users/dmitrykhomikh/Desktop/utf_config/trafficdot2output.txt
'

const APCC_ID ="0024a02c"
const AP_ID="0024a4dc"
const AP2_ID="0024a090"
const APMINI_ID = "0024A0F4"
const FLEX_AP_ID = "0024A158"

'PCC_ID->APCC, AP_ID->AP240, AP2_ID->AP2
'apmini = FlexControl
'flex_AP = FlexAP

dim sensor_in_test
dim number_of_tries
dim sensor_drag_counter
dim test_case_name
dim setup_info
dim sensors_list
dim x_config
dim y_config
dim temp_counter
dim x_change
dim y_change
dim x_sensorzone
dim y_sensorzone
dim version_trafficdot2
dim number_of_dot_pairs
dim skip_check_off_line
dim role_last
dim x_compass
dim y_compass
dim dot_id
dim xml_files_path
Dim x_fscreen
Dim y_fscreen
Dim test_failed
Dim fails_counter
Dim skip_validation_save_to_AP
Dim time_start, time_finish
Dim tests_run
Dim average_test_case_run_time
Dim time_add
Dim time_zero
Dim f_Tests()
Dim app_install
Dim ver_check
Dim x_apply, y_apply
Dim emea_messages
Dim controller_type
Dim offline_mode
Dim winscp_path
Dim time_f_start
Dim saved_map
Dim auto_run
dim new_sensor_counter
dim UI_sensor_test
Dim x_save
Dim y_save
Dim no_config_button
Dim system_slow
Dim try_num
Dim sensor_deleted_from_cz
Dim role_to_exclude
Dim roles_covered
Dim less_roles
Dim last_role_before_reboot
dim test_status_d
Dim test_run_db_id
Dim trafficdotconnect_online
Dim time_test_case
Dim count_pop_up
Dim db_set_run
Dim env_path_changed
Dim env_path_changed_alt
Dim dont_ask
Dim skip_confirm_popup
Dim no_db_step_update
Dim computer_name
Dim computer_ip_address
Dim test_case_errors()
dim channel_0
Dim channel_1
dim color_code
dim sensor_new_channel
Dim reset_name
Dim ip_last
dim test_case_name_test
Dim device_in_tray
Dim x_fullscreen_cached
Dim y_fullscreen_cached
Dim contr_name
Dim map_sensor
Dim rf_channels_code
Dim g_tryid
Dim no_repeat_needed
Dim configuration_locked
Dim forget_gmg
dim bvd20_ipaddress
dim bvd4_ipaddress
Dim bvd4_ipaddress_1
Dim bvd4_ipaddress_2
Dim ignore_role_save
dim gw_model

ignore_role_save=false

map_sensor=false

test_case_name_test=false

dont_ask=false
skip_confirm_popup=false

Dim skip_launch

dim logs_cached_x
Dim logs_cached_y

dim APRadio_0
dim APRadio_1

Dim controller_emea
Dim file_deleted
Dim skip_start_email
Dim overwrite_skip_test
Dim mapping_choice
Dim step_counter
Dim skip_feature_file
Dim install_yes
dim forget_emea
Dim upload_no
Dim template_yes
dim file_to_upload
dim prtscreen_file_name
dim prtscreen_file_name1
Dim sensor_on_zone
Dim changeRF_messages
Dim gui_validate
Dim new_mapping_choice
dim finally_done
Dim global_sensitivity
dim array_group_tests()
dim tarray_global()

dim group_test_emea
dim group_test_acceptance
dim group_test_smoke
dim group_test_custom
dim group_test_all
Dim group_test_ui
dim before_new_build
Dim td_exec_path
dim new_build_number
dim force_other_gs
dim config_file
Dim any_file
dim main_form_on
Dim app_role_set
Dim mpc_settup
Dim hide_log
Dim build_string
Dim install_is_next
dim login_try
Dim connect_error
dim feature_table_name
Dim write_step_counter
Dim dont_check_duplicate_step
Dim dont_drop_table
Dim skiped_db_buid
Dim got_new_build
Dim build_new_folder
Dim dont_drop_backup
Dim step_name
Dim test_step_failed
dim step_id
Dim init_table_view_on
Dim ap_type_code
Dim role_c
Dim discover_mode_found
Dim units_g
dim apeg_alt
dim check_active_gw
dim sensitivity_c
dim bvd_address_set
dim skip_up_units

skip_up_units=false

check_active_gw=true

time_test_case=1.00

init_table_view_on=false

dont_drop_backup=false

build_new_folder=""

dont_drop_table=false

dont_check_duplicate_step=false

write_step_counter=0

connect_error=false

login_try=1

less_roles=false

install_is_next=false

hide_log=false

mpc_settup=true

app_role_set="Standard"

main_form_on=false
	
config_file="TDConfig.csv"

force_other_gs=false

sensor_deleted_from_cz=true

template_yes=true

td_exec_path=""

before_new_build=false

try_num=1

group_test_smoke=false
group_test_emea=false
group_test_acceptance=false
group_test_custom=false
group_test_all=false
group_test_ui=false

global_sensitivity="Count"

finally_done=false

skip_launch=false
mapping_choice_found=false
gui_validate=false
changeRF_messages=false
sensor_on_zone=false
no_config_button=false
system_slow=1
upload_no=true
forget_emea=false
install_yes=false
skip_feature_file=false
step_counter=1
UI_sensor_test=false
overwrite_skip_test=false
auto_run=false
saved_map=false
skip_start_email=false
file_deleted=false
offline_mode=false
bvd_address_set=false

average_test_case_run_time=10

skip_validation_save_to_AP=false

fails_counter=0

x_fscreen=0: y_fscreen=0

number_of_tries=0
new_sensor_counter=3

Const ARROW_LEFT = "Arrow: Left Turn"
Const ARROW_LEFT_RIGHT = "Arrow: Left/Right Turn"
Const ARROW_LEFT_RIGHT_THROUGH = "Arrow: Left/Right/Through"
Const ARROW_LEFT_THROUGH = "Arrow: Left/Through"
Const ARROW_NO_ARROW = "Arrow: No Arrow"
Const ARROW_RIGHT = "Arrow: Right Turn"
Const ARROW_RIGHT_THROUGH = "Arrow: Right/Through"
Const ARROW_THROUGH = "Arrow: Through"

const SENSOR_ZONE_TYPE_STOP_BAR = "0"
const SENSOR_ZONE_TYPE_TRAVEL_TIME = "1"
const SENSOR_ZONE_TYPE_SPEED = "2"
const SENSOR_ZONE_TYPE_MICRORADAR = "3"
const SENSOR_ZONE_TYPE_AVC = "4"
const SENSOR_ZONE_TYPE_COUNT = "5"
const SENSOR_ZONE_TYPE__EMPTY="6" 
Const PUTTY_USER="dkhomikh"
Const PUTTY_PASSWORD="4nyt4ing"
Const TEST_RESULT_PASSED="Passed"
Const TEST_RESULT_FAILED="Failed"


const LOGINFAILURE_MESSSAGE="Cannot continue dues to Login issues. Please verify manually." 

Dim new_zone_name

new_zone_name="CC1"

skip_check_off_line=false
number_of_dot_pairs="0"
temp_counter=2

Const ENVIRONMENT_PATH="U:\env\environment.xml"
Const ENVIRONMENT_PATH_GWY="U:\env\gateways\"
Const ENVIRONMENT_TEST_CASES_PATH="U:\env\testcases.xml"
Const TEST_GROUPS_LOC="U:\test_groups\"
Const STOP_TEST_PATH = "U:\stoptest\stoptdtest.txt"
Const IDLE_TEST_PATH = "U:\stoptest\idletdtest.txt"
Const OUTPUT_FILE="U:\trafficdot2output.txt"
Const FEATURE_FILE="U:\featuretd2.txt"
Const STOP_TEST_BACKUP ="U:\stoptest\stoptdtest_off.txt"
Const PRINT_SCREENS= "U:\prints\"
Const CONFIG_EMEA="U:\EMEA\"
Const CONFIG_JPG="U:\jpg\"
Const CONFIG_GMG="U:\gmg\"
Const ARCHIVED_FOLDER="U:\archived\"
Const RESULTS_DIR = "U:\results"
Const TESTS_PATH= "U:\driver\tests.xml"
Const MESSAGES_PATH= "U:\driver\messages.xml"


const COUNT_SENSITIVITY_EXT_80=80
const STOPBAR_NORMAL_SENSITIVITY_100=100
const STOPBAR_NARROW_SENSITIVITY_150=150
const STOPBAR_WIDE_SENSITIVITY_150 = 150
const SCOOT_MOVA_SENSITIVITY_100 = 100							
const DEFAULT_CC_EXTENSION_0 = 0
Const UNITS_IMPERIAL = "Imperial"
Const UNITS_METRIC = "Metric"
Const TEST_STATUS_IN_PROGRESS = "In Progress..."
Const TEST_STATUS_FINISHIGN_SOON ="Finishing Soon..."
Const TEST_STATUS_ALMOST_DONE = "Almost done..."
Const TEST_STATUS_PASSED = "Passed"
Const TEST_STATUS_FAILED = "Failed"
Const TEST_STATUS_EMAIL_OUT="Started/Email out"
Const TEST_STATUS_LIGHTS_OUT="Lights out"
Const NODE_STATUS_BUSY="Busy"
Const NODE_STATUS_AVAILABLE="Available"
Const NODE_STATUS_SHORT_BREAK="On Break"

CONST APEG_128="208.113.116.165"
CONST APEG_1450="192.168.3.157"


FEATURE_FILE_ARCHIVED = "U:\archived\featuretd2_" & DateTimeStamp & ".txt"

Set objFSO=CreateObject("Scripting.FileSystemObject")

If (objFSO.FileExists(FEATURE_FILE)) Then
	objFSO.CopyFile FEATURE_FILE, FEATURE_FILE_ARCHIVED, false
End If

Set objFileF = objFSO.CreateTextFile(FEATURE_FILE,True)
Set objFile = objFSO.CreateTextFile(OUTPUT_FILE,True)

Public Function CustomSelect(ByRef test_object, ByRef item_text)
    test_object.Expand
    Set itemDescription = Description.Create
    itemDescription("name").value = item_text
    test_object.ChildObjects(itemDescription).Item(0).Object.LegacyIAccessible_DoDefaultAction
End Function

RegisterUserFunc "UIAComboBox", "Select", "CustomSelect", True


function GetOS()
	functionstart "GetOS" 
	Set shell = CreateObject("WScript.Shell")
	Set getOSVersion = shell.exec("%comspec% /c ver")
	version = getOSVersion.stdout.readall
	Select Case True
  	 	Case InStr(version, "n 5.0") > 1 : GetOS = "Windows 2000"
   		Case InStr(version, "n 5.1") > 1 : GetOS = "Windows XP"
   		Case InStr(version, "n 6.0") > 1 : GetOS = "Windows Vista"
   		Case InStr(version, "n 6.1") > 1 : GetOS = "Windows 7"
   		Case InStr(version, "n 6.2") > 1 : GetOS = "Windows 8"
   		Case InStr(version, "n 10.0") > 1 : GetOS = "Windows 10"
   		Case Else : GetOS = "Unknown"
	End Select
	functionend "GetOS" & " " & version
end function


Function db_connect (byval sqlstr, byval sqlcommand)
	
	if lcase(Environment("DB_Connect"))<>"on" or connect_error Then
		connect_error=true
		Exit function 
	end if
	On error resume next
	donterror=false
	if (instr(1, sqlcommand, "search_")>0) Then
		fieldname = trim (Mid (sqlcommand, 8, 20))
		sqlcommand="search"
	end if
	if (instr(1, sqlcommand, "namedfield_")>0) Then
		fieldname = trim (Mid (sqlcommand, 12, 20))
		sqlcommand="namedfield"
	end if
	Select Case sqlcommand
		Case "readit"
			readit=true
		Case "update"
			update=true
		Case "delete"
			delete=true
		Case "insert"
			insert=true
		Case "create"
			create=true
		Case "getlaststep"
			getlaststep=true
		Case "drop"
			drop=true
		Case "search"
			search=true
		Case "rename"
			rename=true
		Case "records"
			records=true
		Case "namedfield"
			namedfield=true
	end Select
	
	set cn = CreateObject("ADODB.Connection")
	set rs = CreateObject("ADODB.Recordset")        
	connectionString = "DRIVER={MySQL ODBC 5.1 Driver};SERVER=192.168.2.158;User Id=automate;Password=sen&sys;Database=mydb;Option=3" 
	cn.Open connectionString
	If readit Then
		rs.open sqlstr, cn, 3
		while not rs.eof
			If n=0 Then rs.MoveFirst
			db_connect = db_connect & rs.Fields(0) & " "
			rs.MoveNext: n=n+1
		wend
	Elseif getlaststep Then
		rs.open sqlstr, cn, 3
		while not rs.eof
			If n=0 Then rs.MoveFirst
			db_connect = rs.Fields(0)
			rs.MoveNext: n=n+1
		wend
	ElseIf insert Then
		rs.open sqlstr, _
        	cn, 3	
        lsSQL = "SELECT @@IDENTITY AS NewID"
		Set loRs = cn.Execute(lsSQL)
		db_connect = loRs.Fields("NewID").value	
	ElseIf update Then
		rs.open sqlstr, _
        	cn, 3	
        donterror=true
    elseif create Then
    	cn.Execute sqlstr 
    elseif drop Then
    	cn.Execute sqlstr 
    	donterror=true
    elseif rename Then
    	cn.Execute sqlstr 
    elseif search Then
    	rs.open sqlstr, _
        	cn, 3	       			
		If Not rs.eof Then
			Set searcrRes = cn.Execute (sqlstr) 	
			db_connect = searcrRes.Fields(fieldname).value
		else
			db_connect=""
		End If 	
	elseif namedfield Then	
		 	rs.open sqlstr, _
        	cn, 3	       			
		If Not rs.eof Then
			Set searcrRes = cn.Execute (sqlstr) 	
			db_connect = searcrRes.Fields(fieldname).value
		else
			db_connect=""
		End If 
	elseIf records Then
		rs.open sqlstr, cn, 3
		If not rs.eof Then
		    'Return Data From Database as per query
		    'Below will return 2 dimesnsion array with mutiple records
		     db_connect= rs.GetRows()
		End If
	End If
	cn.close

	If donterror Then
		If err.description<>"" Then
			err.clear
		End If
	else
		If err.description<>"" Then
		functionstart "db_connect"
		WriteToLogfile sqlstr
		functionend "db_connect" & " " & err.description
		connect_error=true: err.clear
		err.description ="": err.number=0
		Else
		
		End If
	End If

End Function

function OddOrEven (byval inum)
	functionstart "OddOrEven" & " " & inum
	if inum mod 2 = 0 then
		OddOrEven=1
	else
		OddOrEven=2
	end if
	functionend "OddOrEven"
end function

function GetBuildNumberDry
	functionstart "GetBuildNumberDry"
	GetBuildNumberDry = trim (right (version_trafficdot2, 3))
	functionend "GetBuildNumberDry"
end function

Function FilesToAttach (byref featurefile, byref outputfile, byref prtscrnfile, byref prtscrnfile1, byref anyfile)
	functionstart "FilesToAttach"
	
	filename=prtscreen_file_name
	filename1=prtscreen_file_name1
	
	prtscreen_file_name_1=replace(filename, ".png", ".csv.png")
	prtscreen_file_name_2=replace(filename, ".png", ".png.png")
	prtscreen_file_name_20=replace(filename, ".png", ".kml.png")
	prtscreen_file_name_21=replace(filename, ".png", ".kml")
	
	prtscreen_file_name_3=replace(filename1, ".png", ".csv.png")
	prtscreen_file_name_4=replace(filename1, ".png", ".png.png")
	prtscreen_file_name_5=replace(filename1, ".png", ".kml.png")
	prtscreen_file_name_50=replace(filename1, ".png", ".kml")
	
	Set objFS=CreateObject("Scripting.FileSystemObject")
	featurefile = "U:\features\features_" & DateTimeStamp & ".txt"
	outputfile = "U:\output\output_" & DateTimeStamp & ".txt"
	
	If (objFS.FileExists(FEATURE_FILE)) Then
		objFS.CopyFile FEATURE_FILE, featurefile, false
	End If
	If (objFS.FileExists(OUTPUT_FILE)) Then
		objFS.CopyFile OUTPUT_FILE, outputfile, false
	End If
	If (objFS.FileExists(prtscreen_file_name)) Then
		prtscrnfile = prtscreen_file_name
	ElseIf (objFS.FileExists(prtscreen_file_name_1)) Then
		prtscrnfile = prtscreen_file_name_1
	ElseIf (objFS.FileExists(prtscreen_file_name_2)) Then
		prtscrnfile = prtscreen_file_name_2
	ElseIf (objFS.FileExists(prtscreen_file_name_20)) Then
		prtscrnfile = prtscreen_file_name_20
	ElseIf (objFS.FileExists(prtscreen_file_name_21)) Then
		prtscrnfile = prtscreen_file_name_21
	End If
	If (objFS.FileExists(prtscreen_file_name1)) Then
		prtscrnfile1 = prtscreen_file_name1
	ElseIf (objFS.FileExists(prtscreen_file_name_3)) Then
		prtscrnfile1 = prtscreen_file_name_3
	ElseIf (objFS.FileExists(prtscreen_file_name_4)) Then
		prtscrnfile1 = prtscreen_file_name_4
	ElseIf (objFS.FileExists(prtscreen_file_name_5)) Then
		prtscrnfile1 = prtscreen_file_name_5
	ElseIf (objFS.FileExists(prtscreen_file_name_50)) Then
		prtscrnfile1 = prtscreen_file_name_50
	End If
	If (objFS.FileExists(any_file)) Then
		anyfile = any_file
	End If
	functionend "FilesToAttach" & " " & featurefile & " " & outputfile & " " & prtscrnfile & _
			" " & prtscrnfile1 & " " & anyfile
End Function

Sub TrafficDotLoginOffLine(byval testcasename)
	
	functionstart "TrafficDotLoginOffLine"		
	
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
		
	db_TestsAdd testcasename

	test_case_name=testcasename		
	sensors_list=""
	If not auto_run Then
		
		RunTD2: auto_run=false: wait_custom 5
		
		ApplicationInstall
		
		wait_custom "fixed15": AdobeAirUpdate true: AdobeAirSetup true: dim readyto: readyto=false
		
		Do  while not readyto
			readyto= UIAWindow("TrafficDOT 2").UIAButton("Connect").Exist: wait_custom 1
		loop		
		ApplicationInstallCloseWorkAround: wait_custom 3
		
		If version_trafficdot2="" Then
			version_trafficdot2=db_BuildIDSearch ("Name")
		End If

		buildid="idBuilds"
		
		db_TestRunSearch testcasename, db_BuildIDSearch (buildid), status

		If lcase(status)="passed" Then
			If build_new_folder="" Then
				ForceCloseTD2: wait_custom 2
				dont_drop_backup=true
				db_droptable testcasename
				db_renametable testcasename + "_Backup", testcasename
				TrafficDotLogin=-1
				dont_drop_backup=false: dont_drop_table=false
				functionend testcasename & "+++"
				Exit sub
			else
			
				buildnew=replace (build_new_folder, "RELEASE.flexgui_", "")
				buildnew= replace (buildnew, "_", ".", 1, 2)
				buildnew=replace (buildnew, "_", " Build ")
				buildnew= "Version " + buildnew
			
				db_buildsadd buildnew
				
			End If
	
		End If	
		
	End If
	
	ActivateOffLineMode: UIAWindow("TrafficDOT 2").UIAButton("Go").Click: wait_custom 1: LoginIdleAndSetup (testcasename)

	subject = setup_info & vbnewline & vbnewline &_
							version_trafficdot2 & vbnewline &_
							printsubject (enabledTests, testcasename)
		
	SendGmail "", testcasename, testcasename + ": Started..." + vbnewline &_
				vbnewline & subject
				
	test_status_d=TEST_STATUS_EMAIL_OUT
			
	db_TestRunsAddUpdate testcasename, test_run_db_id, false			
	
	If(Err.Number<>0)Then
		ValidationFailed "TrafficDot2 Login OffLine", Err.Description
	End If
		
	functionend "TrafficDotLoginOffLine"		
	
End Sub

Sub ActivateOffLineMode
	functionstart "ActivateOffLineMode"
	trafficdotconnect_online =	Repository.Value("TrafficDot2Connected")
	UIAWindow("TrafficDOT 2").UIATab("Tab").UIAObject("Offline Mode").Click
	trafficdotconnect="Sensys Networks TrafficDOT 2 - (Offline - default) -- Standard Role"
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
	ipaddress="OffLine"
	apname="n/a": WriteToLogFile trafficdotconnect
	offline_mode=true: role_last=""
	setup_info=ipaddress & vbnewline &_
					apname & vbnewline &_
					"n/a"
	functionend "ActivateOffLineMode"
End Sub

Function ActivateFileErrorPopup()
	functionstart "ActivateFileErrorPopup"
	If UIAWindow("Sensys Networks TrafficDOT").UIAObject("Please enter a filename").exist then
		ActivateOKbutton
	End If
	functionend "ActivateFileErrorPopup"
End Function

Sub ChooseRole (byval role)
	functionstart "ChooseRole" & " " & role
	current=UIAWindow("TrafficDOT 2").UIAComboBox("Role").GetROProperty("value")
	If current<>role Then
		UIAWindow("TrafficDOT 2").UIAComboBox("Role").Select role
	End If
	role_c=role
	functionend "ChooseRole"
End Sub

Sub ChooseIPAddress (byval ipAddress)
	functionstart "ChooseIPAddress" & " " & ipAddress
	current = UIAWindow("TrafficDOT 2").UIAEdit("IP address:").GetROProperty("text")
	If current<>ipAddress Then
		UIAWindow("TrafficDOT 2").UIAEdit("IP address:").Type ipAddress
	End If
	functionend "ChooseIPAddress"
End Sub

Sub ChooseTCPPort (byval tcpPort)
	functionstart "ChooseTCPPort" & " " & tcpPort
	current = UIAWindow("TrafficDOT 2").UIAEdit("TCP Port:").GetROProperty("text")
	If current<>tcpPort Then
		UIAWindow("TrafficDOT 2").UIAEdit("TCP Port:").Type tcpPort
	End If
	functionend "ChooseTCPPort"
End Sub

Sub ChooseHTTPPort (byval HTTPPort)
	functionstart "ChooseHTTPPort" & " " & HTTPPort
	current = UIAWindow("TrafficDOT 2").UIAEdit("HTTP Port:").GetROProperty("text")
	If current<>HTTPPort Then
		UIAWindow("TrafficDOT 2").UIAEdit("HTTP Port:").Type HTTPPort
	End If
	functionend "ChooseHTTPPort"
End Sub

Sub ChooseLanguage (language)
	functionstart "ChooseLanguage"
	UIAWindow("TrafficDOT 2").UIAComboBox("Language").Select language
	functionend "ChooseLanguage"
End Sub

Sub ApplicationInstall
	If app_install Then
		Exit sub
	End If
	functionstart "ApplicationInstall"
	installed = "not installed!" 'will report correctly only with autoinstall'
	wait_custom "fixed15"
	Set obj = UIAWindow("Application Install").UIAButton("Replace")
	If install_is_next Then
		Do  while not obj.Exist
			WriteToLogfile "Waiting for install..."
			wait_custom 3
		loop
	End If
	If obj.Exist Then
		WriteToLogfile "Replace with newer version of TD2 started..."
		install_yes=true
		obj.click: wait_custom 1':functionend "ApplicationInstall": wait_custom 15: auto_run=true: exit sub 
		Set obj1 = UIAWindow("Application Install").UIAButton("Cancel")
		cancelit=obj1.exist
		Do while cancelit
			wait_custom 10: cancelit=obj1.Exist		
		loop
		app_install=true: ver_check=false
		WriteToLogfile "Replacing with newer version of TD2 complete."
		installed = "installed!": install_is_next=false
	End If
	functionend "ApplicationInstall" & " " & installed
End Sub

Function ApplicationInstallCloseWorkAround
	If not  install_yes Then
		Exit Function
	End If
	functionstart "ApplicationInstallCloseWorkAround"
	If UIAWindow("Adobe AIR Application").Exist then
		wait_custom 5
		If UIAWindow("Adobe AIR Application").UIAButton("Close program").exist Then
			UIAWindow("Adobe AIR Application").UIAButton("Close program").click
			install_yes=false
		End If
	End If
	functionend "ApplicationInstallCloseWorkAround"
End Function

Function SetResultsPath
	functionstart "SetResultsPath"
	Dim JobID, resultsDir
	JobID = GetDateTimeStamp()
	resultsDir = TestPath & "\results\Functional\" & JobID & "\"
	Set qtResults = CreateObject("QuickTest.RunResultsOptions") 
	qtResults.ResultsLocation = resultsDir & vTestName
	functionend "SetResultsPath"
End Function

Function DateTimeStamp()
	DateInfo = Now
	DateTimeStamp= replace (replace (replace(DateInfo, "/", ""), ":", ""), " ", "")
End Function

Function GetDateTimeStamp()
	functionstart "GetDateTimeStamp"
	GetDateTimeStamp=DateTimeStamp
	functionend "GetDateTimeStamp"
End Function

Function ExitTestIncomplete(byval pointoffailure)
	functionstart "ExitTestIncomplete" & " " & pointoffailure
	ValidationFailed test_case_name, pointoffailure
	Testcomplete pointoffailure, test_case_name
	functionend "ExitTestIncomplete": ExitTest
End Function

Function RunTD2()
	functionstart "RunTD2"
	DownloadTD2: wait_custom 5
	If td_exec_path="" Then
		td2runpath=Environment("Trafficdot2Dir")
	else
		td2runpath=td_exec_path
		if Environment("Auto_") ="on" Then
			WriteToLogfile "Auto_ mode is ON"
			subject = "Please make sure TD2 is ready for Auto Test"
			SendGmail  "", "Auto Test about to start in 10 minutes!", subject
			IdleForTenMinutes
		end if
	End If	
	wait_custom "fixed10": RunProgram (td2runpath + "TrafficDOT2.exe"): td_exec_path=""
	db_NodeUpdate computer_name, NODE_STATUS_BUSY
	functionend "RunTD2"
End Function

Function connectTD2Button
		functionstart "connectTD2Button"
		Set chld=Description.Create
		chld("micclass").value = "UIAButton"
		Set chldcln = UIAWindow("TrafficDOT 2").ChildObjects(chld)
		For num = 0 to chldcln.count-1
		    'To highlight the button in the application
		    'chldcln(num).highlight
		    If chldcln(num).GetRoProperty("name") = "Connect" Then
		    	chldcln(num).Click
		    	exit function
		    	functionend "connectTD2Button"
		    End If
		Next
		functionend "connectTD2Button"
End Function

function db_DropTable(byval tableName)
	If connect_error Then
		Exit function
	End If
	functionstart "db_DropTable" & " " & tableName
	if dont_drop_backup then
	else
		SQLSTR0="DROP TABLE " & tableName + "_Backup"
		db_connect SQLSTR0, "drop"
	end if
	newtable=tableName + "_Backup"
	SQLSTR="DROP TABLE " & tablename
	If dont_drop_backup Then
	else
		if tablename<>"" then
			SQLSTRC="CREATE TABLE " & newtable & " AS SELECT * FROM " & tablename
			db_connect SQLSTRC, "create"
		end if
	End If
	db_DropTable = db_connect (SQLSTR, "drop")
	functionend "db_DropTable"
end function

Function db_RenameTable (byval oldname, byval newname)
	If connect_error Then
		Exit function
	End If
	functionstart "db_RenameTable" & " " & oldname & "->" & newname
	SQLSTR="RENAME TABLE " & oldname & " TO " & newname
	db_connect SQLSTR, "rename"
	feature_table_name=tableName
	functionend "db_RenameTable"
End Function

function db_AddTable(byval tableName)
	If connect_error Then Exit function
	functionstart "db_AddTable" & " " & tableName
	SQLSTR="CREATE TABLE IF NOT EXISTS " & tableName & " (step_id INT NOT NULL AUTO_INCREMENT, " &_
		"stepName VARCHAR(255), stepStatus VARCHAR(255), Warning VARCHAR(255), PRIMARY KEY ( step_id ), Time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP)"
	db_AddTable= db_connect (SQLSTR, "create")
	feature_table_name=tableName
	functionend "db_AddTable"
end function

Function db_TestsAdd (byval testcasename)
	If connect_error Then Exit function
	SQLSTR="select nodeID from Nodes where Name='" & computer_name & "'"
	node1 = db_connect (SQLSTR, "search_nodeID")
	SQLSTR="INSERT IGNORE INTO mydb.Tests (Name, Node)" &  _
		"VALUES ('" & testcasename & "', " & "'" & node1 & "')"
	newtestid = db_connect (SQLSTR, "insert")
	If cint(newtestid)>0 Then
		functionstart "db_TestsAdd" & " " & newtestid
		functionend "db_TestsAdd"
	End If
End Function

Function db_ConfigAdd (byval gatewayname)
	If connect_error Then Exit function
	functionstart "db_ConfigAdd" & " " & gatewayname
	ap= Environment("AP")
	apname = Environment("APname")
	apradioch0 = Environment ("APRadioCh0")
	apradioch1=Environment("APRadioCh1")
	apid= Environment("APid")
	ipaddress=Environment("IPaddress")
	tcport=Environment("TCPport")
	httpport=Environment("HTTPport")
	microradar=Environment("MicroRadar")
	microradar0=Environment("MicroRadar0")

	microradar1=Environment("MicroRadar1")

	genericsensor=Environment("GenericSensor")

	sensor=Environment("Sensor")

	sensor0=Environment("Sensor0")

	sensor1=Environment("Sensor1")

	sensor2=Environment("Sensor2")

	sensor3=Environment("Sensor3")

	controller=Environment("Controller")

	controlleremea=Environment("Controller_EMEA")

	repeater=Environment("Repeater")

	repeater0=Environment("Repeater0")

	repeater1=Environment("Repeater1")
	
	tablename="Configurations"
	
	SQLSTR="CREATE TABLE IF NOT EXISTS " & tablename & " (configID VARCHAR(11), " & _
		"AP VARCHAR(255), APRadioCh0 VARCHAR(255), APRadioCh1 VARCHAR(255), " & _
		"APid VARCHAR(255), IPaddress VARCHAR(255), TCPport VARCHAR(255), HTTPport VARCHAR(255), " & _
		"MicroRadar VARCHAR(255), MicroRadar0 VARCHAR(255), MicroRadar1 VARCHAR(255), GenericSensor VARCHAR(255), " & _
		"Sensor VARCHAR(255), Sensor0 VARCHAR(255), Sensor1 VARCHAR(255), Sensor2 VARCHAR(255), " & _
		"Sensor3 VARCHAR(255), Controller VARCHAR(255), Controller_EMEA VARCHAR(255) , Repeater VARCHAR(255), " & _
		"Repeater0 VARCHAR(255), Repeater1 VARCHAR(255), PRIMARY KEY ( configID ))"	
		
	db_connect SQLSTR, "create"
	
	SQLSTR="select configID from " & tablename & " where configID='" & gatewayname & "'" 
	
	config = db_connect (SQLSTR, "search_configID")	
	
	if config="" then
	
		SQLSTR="INSERT INTO mydb." & tablename & " (configID, AP, APRadioCh0, APRadioCh1, " & _
			"APid, IPaddress, TCPport, HTTPport, MicroRadar, MicroRadar0, " & _
			"MicroRadar1, GenericSensor, Sensor, Sensor0, Sensor1, Sensor2, " & _
			"Sensor3, Controller, Controller_EMEA, Repeater, Repeater0, Repeater1) " &  _
			"VALUES ('" & apname & "', '" & ap & "', '" & apradioch0 & "', '" & apradioch1 &  "', " & _
			"'" & apid & "', '" & ipaddress & "', '" & tcport & "', '" & httpport &  "', " & _ 
			"'" & microradar & "', '" & microradar0 & "', '" & microradar1 & "', '" & genericsensor &  "', " & _
			"'" & sensor & "', '" & sensor0 & "', '" & sensor1 & "', '" & sensor2 &  "', " & _
			"'" & sensor3 & "', '" & controller & "', '" & controlleremea & "', '" & repeater &  "', " & _
			"'" & repeater0 & "', '" & repeater1 & "')"
	
		db_connect SQLSTR, "insert"
	
	end if
	
	functionend "db_ConfigAdd"
End Function

function db_ResetControls(byval controlid)
	If connect_error Then Exit function
	SQLSTR = "UPDATE mydb.Controls SET Stop = NULL WHERE id= '" & controlid & "'"		
	db_connect SQLSTR, "update"
end function

Function db_NodeUpdate (byval nodeName, byval nodeStatus)
	If connect_error Then Exit function
	SQLSTR = "UPDATE mydb.Nodes SET Status = '" & _
  					nodeStatus	& "' WHERE Name = '" & nodeName & "'"	
	db_connect SQLSTR, "update"
End Function

function db_NodeAdd (byval nodeName, byval nodeIP)
	If connect_error Then Exit function
	functionstart "db_NodeAdd"
	tablename="Nodes"
	nodeIP=trim(replace (nodeIP, "IP Address:", ""))
	SQLSTR="CREATE TABLE IF NOT EXISTS " & tablename & " (nodeID INT NOT NULL AUTO_INCREMENT, " & _
		"Name VARCHAR(255), IPaddress VARCHAR (255), Status VARCHAR(255), Owner VARCHAR(255), PRIMARY KEY ( nodeID ))"		
	db_connect SQLSTR, "create"	
	SQLSTR="select Name from " & tablename & " where Name='" & nodeName & "'" 	
	nodeN = db_connect (SQLSTR, "search_Name")	
	if nodeN="" then
		SQLSTR="INSERT INTO mydb." & tablename & " (Name, IPaddress) " &  _
			"VALUES ('" & nodeName & "', '" & nodeIP & "')"
	
		db_connect SQLSTR, "insert"
	end if
	functionend "db_NodeAdd"
End Function


Function db_LogsAdd (byval filename)
	If connect_error Then Exit function
	functionstart "db_LogsAdd" & " " & filename
	SQLSTR="INSERT INTO mydb.Logs (Build, Name, Description, GatewayID)" &  _
		"VALUES ('" & version_trafficdot2 & "', '" & filename & "', '" & test_case_name & "', " & db_GatewayID & ")"
	db_connect SQLSTR, "insert"
	functionend "db_LogsAdd"
End Function

function db_TestCaseLock(byval testcasename)
	If connect_error Then Exit function
	functionstart "db_TestCaseLock" & " " & testcasename
	db_TestCaseLock=1: lockedstr="locked"
	SQLSTR1="select Tests.Lock from Tests where Name='" & testcasename & "'"
	lockid = db_connect (SQLSTR1, "search_Lock")
	If isnull(lockid) Then db_TestCaseLock=0
	If db_TestCaseLock=0 Then lockedstr="unlocked"
	functionend "db_TestCaseLock" & " " & lockedstr
end function


function db_ConfigurationLock(byval ipaddress, byval apeg)
	If connect_error Then Exit function
	functionstart "db_ConfigurationLock" & " " & ipaddress
	db_ConfigurationLock=1: lockedstr="locked"
	SQLSTR1="select Configurations.Lock from Configurations where IPaddress='" & ipaddress & "'"
	If apeg <> "" Then
		SQLSTR1="select Configurations.Lock from Configurations where configID='" & apeg & "'"
	End If
	lockid = db_connect (SQLSTR1, "search_Lock")
	If isnull(lockid) Then db_ConfigurationLock=0
	If db_ConfigurationLock=0 Then lockedstr="unlocked"
	functionend "db_ConfigurationLock" & " " & lockedstr
end function


function db_ControlsSearch(byref stopid, byref idleid)
	If connect_error Then Exit function
	cid="101"
	SQLSTR1="select Stop from Controls where id='" & cid & "'"
	stopid = db_connect (SQLSTR1, "search_Stop")
	SQLSTR1="select Idle from Controls where id='" & cid & "'"
	idleid = db_connect (SQLSTR1, "search_Idle")
	If isnull(stopid) Then stopid=""
	If isnull(idleid) Then idleid=""
end function

function db_GatewayActiveSearch()
	If connect_error Then Exit function
	functionstart "db_GatewayActiveSearch" & " " & testcasename
	SQLSTR1="select nodeID from Nodes where Name='" & computer_name & "'"
	node1 = db_connect (SQLSTR1, "search_nodeID")
	SQLSTR="select Name from Gateways WHERE Active = " & "'" & 1 & "' AND Node = '" &  node1 & "'"
	db_GatewayActiveSearch = db_connect (SQLSTR, "search_Name")	
	functionend "db_GatewayActiveSearch" & " " & db_GatewayActiveSearch
end function

function db_GatewayAlternativeSearch (byval activeapeg)
	If connect_error Then Exit function
	functionstart "db_GatewayAlternativeSearch" & " " & testcasename
	SQLSTR="select AlternativeGW from Gateways WHERE Name = " & "'" & activeapeg & "'"
	db_GatewayAlternativeSearch = db_connect (SQLSTR, "search_AlternativeGW")	
	functionend "db_GatewayAlternativeSearch" & " " & db_GatewayAlternativeSearch
end function


Function db_TestCaseSearch (byref testcasename, byval resultfield)
	If connect_error Then Exit function
	SQLSTR="select " & resultfield & " from Tests WHERE Name = " & "'" & testcasename & "'"
	db_TestCaseSearch = db_connect (SQLSTR, "search_" & resultfield)	
end function

Function db_DefectsSearch (byval defectID, byval resultfield)
	If connect_error Then Exit function
	functionstart "db_DefectsSearch"
	SQLSTR="select " & resultfield & " from Defects WHERE id = " & "'" & defectID & "'"
	db_DefectsSearch = db_connect (SQLSTR, "search_" & resultfield)	
	functionend "db_DefectsSearch"
end function


Function db_GatewayID()
	If connect_error Then Exit function
	functionstart "db_GatewayID" 
	SQLSTR="select id from Gateways WHERE IPAddress = '" & Environment("IPaddress") & "'"
	db_GatewayID = db_connect (SQLSTR, "search_id")	
	functionend "db_GatewayID" & " " & db_GatewayID
End Function

Function db_BuildIDSearch (byref buildid)
	If connect_error Then Exit function
	functionstart "db_BuildIDSearch" 
	SQLSTR="select " & buildid & " from Builds ORDER BY idBuilds DESC LIMIT 1"
	db_BuildIDSearch = db_connect (SQLSTR, "search_" & buildid)	
	buildid = db_BuildIDSearch
	functionend "db_BuildIDSearch" & " " & buildid
end function

Function db_TestRunSearch (byval testcasename, byref buildid, byref status)
	If connect_error Then Exit function
	functionstart "db_TestRunSearch" 
	SQLSTR="select Status from TestRuns where Name='" & testcasename & "'" & " AND BuildID='" & buildid & "'" & _
						" AND GatewayID='" & db_GatewayID & "' ORDER BY idTestRuns DESC LIMIT 1"
	status = db_connect (SQLSTR, "search_Status")		
	functionend "db_TestRunSearch" & " " & db_TestRunSearch
end function

Function db_TestCaseStepAdd (byval tablename, byval stepname)
		If connect_error Then Exit function
		If tablename="" Then Exit function
		If not dont_drop_table Then
			db_DropTable tablename:	dont_drop_table=true
			db_AddTable tablename
		End If
		If step_id="" Then
		else
			db_StepUpdate step_id
		End If

		stepname=left(stepname, 255)
		
		SQLSTR="INSERT INTO mydb." & tablename & " (stepName)" &  _
    		"VALUES ('" & stepname & "')"
		newtestid = db_connect (SQLSTR, "insert")
	
		If cint(newtestid)>0 Then
			step_id=newtestid
			functionstart "db_TestCaseStepAdd" & " " & newtestid
			dont_check_duplicate_step=true
			step_name=stepname
			functionend "db_TestCaseStepAdd"
			If stepname="TestComputerName" Then
				db_StepUpdate step_id
			End If
		End If
		
End Function

Function db_TestCaseUpdate(byval testcasename)
		If connect_error Then Exit function
		functionstart "db_TestCaseUpdate" & " " & testcasename	
		durationm=Round (cint(time_test_case))
		runswitch="run"
		If lcase(test_status_d)="passed" Then
			runswitch="skip"
		End If		
		SQLSTR0="SELECT Counter FROM  mydb.Tests WHERE Name = '" & testcasename & "'"
		SQLSTR ="UPDATE mydb.Tests set Status = '" & _
					test_status_d & "', Build = '" & version_trafficdot2 & "', GW = '" & _
					Environment("IPaddress") & "' , Time = '" & Now & "', Run = '" & _
					runswitch & "' , Duration = '" & durationm & "' , Counter = '" & _
					db_connect(SQLSTR0, "search_Counter")+1 & "' WHERE Name = '" & testcasename & "'"		
		db_connect SQLSTR, "update"
		
		SQLSTR ="UPDATE mydb.Tests set Runtime = '" & _
					TEST_STATUS_LIGHTS_OUT & "' WHERE Name = '" & testcasename & "'"		
		db_connect SQLSTR, "update"
		
		functionend "db_TestCaseUpdate"
End Function

Function db_TestCaseRun(byval testcasename)
		If db_set_run Then 
			'Writetologfile "----------------------db" + testcasename
			Exit function
		End If
		'Writetologfile "db++++++++++++++++++++" + testcasename
		If connect_error Then 
			Exit function
		End If 
		functionstart "db_TestCaseRun" & " " & testcasename	
		runswitch="run"
		SQLSTR ="UPDATE mydb.Tests set Run = '" & _
					runswitch & "' WHERE Name = '" & testcasename & "'"		
		db_connect SQLSTR, "update"
		functionend "db_TestCaseRun"
End Function

Function db_TestRunsAddUpdate (byval testcasename, byref testrunID, byval update )
		If connect_error Then Exit function
		functionstart "db_TestRunsAddUpdate"
		if not update then
			SQLSTR= "select idBuilds from mydb.Builds where Name =" & "'" & version_trafficdot2 & "'"
			buildid = trim (db_connect (SQLSTR, "readit"))
			If buildid="" Then 
				buildid="idBuilds"
				db_BuildIDSearch buildid
			end if
			SQLSTR="INSERT IGNORE INTO mydb.TestRuns (Name, TimeStamp, Status, BuildID, GatewayID)" &  _
	    		" VALUES ('" & testcasename & "','" & Now &  "', '" & test_status_d & "', " & buildid & ", " & db_GatewayID & ")"
			testrunID = db_connect (SQLSTR, "insert")			
		else
			SQLSTR = "UPDATE mydb.TestRuns SET Status = '" & _
  					test_status_d & "' WHERE idTestRuns = '" & testrunID & "'"			
			db_connect SQLSTR, "update"	
			if lcase(test_status_d)="passed" or lcase(test_status_d)="failed" then
				durationm=Round (cint(time_test_case))
				SQLSTR = "UPDATE mydb.TestRuns SET Duration = '" & _
  					durationm & "' WHERE idTestRuns = '" & testrunID & "'"			
				db_connect SQLSTR, "update"	
			end if
		end if
		SQLSTR ="UPDATE mydb.Tests set Runtime = '" & _
					test_status_d & "' WHERE Name = '" & testcasename & "'"		
		db_connect SQLSTR, "update"
		functionend "db_TestRunsAddUpdate"	
End Function

Function db_StepUpdate (byval stepId)
		If connect_error Then Exit function
		functionstart "db_StepUpdate" & " " & stepId
		teststepstatus="passed"
		If test_step_failed Then
			teststepstatus="failed"
		End If
		SQLSTR = "UPDATE mydb." & test_case_name & " SET stepStatus = '" & _
  					teststepstatus	& "' WHERE step_id = '" & stepId & "'"	
		db_connect SQLSTR, "update": 	test_step_failed=false
		If err.description<>"" Then
			warningstr=left(err.description, 255)
			SQLSTR = "UPDATE mydb." & test_case_name & " SET Warning = '" & _
  					warningstr	& "' WHERE step_id = '" & stepId & "'"	
			db_connect SQLSTR, "update"
		end if
		functionend "db_StepUpdate"
End Function

Function db_NodesChecks(byref node1, byref node2, byval testcasename)
		no_db_step_update=true: SQLSTR="select nodeID from Nodes where Name='" & computer_name & "'"
		node1 = db_connect (SQLSTR, "search_nodeID")
		SQLSTR="select Node from Tests where Name='" & testcasename & "'"
		node2 = db_connect (SQLSTR, "search_Node"): no_db_step_update=false
End Function

Function db_BuildsAdd (byval buildname)
	If connect_error Then Exit function
	SQLSTR="INSERT IGNORE INTO mydb.Builds (Name)" &  _
		"VALUES ('" & buildname & "')"
	newbuildid = db_connect (SQLSTR, "insert")
	If cint(newbuildid)>0 Then
		functionstart "db_BuildsAdd" & " " & newbuildid
		functionend "db_BuildsAdd"
	end if
End Function

Function db_TestsToRunList
	If connect_error Then Exit function
	functionstart "db_TestsToRunList"
	SQLS = "SELECT Name FROM mydb.Tests WHERE Tests.Run = 'run' AND Tests.DefectID IS NULL"
	db_TestsToRunList=db_RecordSetRetrive (SQLS, 2)
	functionend "db_TestsToRunList"
End Function

Function db_FailedStepsSearch(byval testcasename, byref failedsteps)
	If connect_error Then Exit function
	functionstart "db_FailedStepsSearch"
	SQLS = "SELECT stepName FROM mydb." & testcasename & " WHERE stepStatus = 'failed'"	
	sRecords=db_connect (SQLS, "records")
	If not isArray(sRecords) Then
			failedsteps=""
			functionend "db_FailedStepsSearch"
			Exit function
	End If
	print ubound(sRecords,2)
	print lbound(sRecords,2)
	for j=0 to ubound(sRecords,2)
		print sRecords(i,j)
		failedsteps= failedsteps + vbnewline + sRecords(i,j)
	next
	functionend "db_FailedStepsSearch"
End Function


function db_TestsDurationSum()
	If connect_error Then Exit function
	functionstart "db_TestsDurationSum"
	SQLS="SELECT SUM(Duration) AS TotalRunTime FROM Tests WHERE Tests.Run = 'run' AND Tests.DefectID IS NULL"
	db_TestsDurationSum= db_connect (SQLS, "namedfield_TotalRunTime")
	functionend "db_TestsDurationSum"
end function

Function db_RecordSetRetrive(byval sSQL, byval numberoffields)
	If connect_error Then Exit function
	functionstart "db_RecordSetRetrive"
	sRecords=db_connect (sSQL, "records")
	If not isArray(sRecords) Then
			db_RecordSetRetrive=""
			functionend "db_RecordSetRetrive"
			Exit function
	End If
	print ubound(sRecords,numberoffields)
	print lbound(sRecords,numberoffields)
	for j=0 to ubound(sRecords,numberoffields)
		print sRecords(i,j)
		db_RecordSetRetrive=db_RecordSetRetrive + sRecords(i,j) + ";"
	next	
	functionend "db_RecordSetRetrive"
End Function

Function db_GatewayAdd (byval ipaddress, byval apname)
	If connect_error Then Exit function
	SQLSTR="INSERT IGNORE INTO mydb.Gateways (IPAddress, Name)" &  _
		"VALUES ('" & ipaddress & "', '" & apname & "')"
	newgw = db_connect (SQLSTR, "insert")
	If cint(newgw)>0 Then
		functionstart "db_GatewayAdd" & " " & ipaddress
		functionend "db_GatewayAdd"
	end if
End Function


Function TrafficDotLogin (byval testcasename, byref repeat, byval skipfeaturefile)
	
		If repeat_no_needed Then
			repeat_no_needed=false
			Exit function
		End If
		
		db_TestsAdd testcasename: testcase_action = test_ACTION(testcasename)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if
		If not skip_launch Then
			If skipfeaturefile Then
				skip_feature_file=true
			End If	
			TrafficDotLogin=0: test_case_name=testcasename: test_failed=false
			environment.LoadFromFile env_path_changed
			If Environment("Try_Group_EMEA")="on" Then
				If Ubound(array_group_tests)<0 Then enabledTests
				If Ubound(Filter(array_group_tests, testcasename)) > -1 Then
				else
					TrafficDotLogin=-1
					Exit Function
				End If
			elseIf Environment("Try_Group_All")="on" Then
			elseIf Environment("Try_Group_All_DB")="on" and not connect_error Then
				If lcase(db_TestCaseSearch(testcasename, "Run"))= "run" then
					db_NodesChecks nodei, node, testcasename
					if cint(nodei)<>cint(node) Then
						TrafficDotLogin=-1
						Exit Function
					end if
					defId=db_TestCaseSearch(testcasename, "DefectID")
					buildid="idBuilds"
					If lcase(defId)<>"" Then
						db_BuildIDSearch buildid
						bid=db_DefectsSearch (defId, "BuildFixed")
						If bid="" then 
							TrafficDotLogin=-1
							Exit Function
						end if
						If cint(bid)<cint(buildid) or cint(bid)=cint(buildid) Then
							if db_TestCaseSearch(testcasename, "GatewayExlude") = db_GatewayActiveSearch and check_active_gw then
								if configuration_locked then
									check_active_gw=true
									TrafficDotLogin=-1
									Exit Function
								end if
								if env_path_changed_alt<>"" then
									originalenvpath=env_path_changed						
									DoTrafficDot2Setup name, true
									env_path_changed=env_path_changed_alt: mapping_choice_found=false
									WriteToLogFile "Environment temporary change to alternative 0: " & env_path_changed
									check_active_gw=false: ver_check=false
									TrafficDotLogin testcasename, repeat, skipfeaturefile: exit function
								else
									TrafficDotLogin=-1
									Exit Function
								End if
							end if
						else	
							TrafficDotLogin=-1
							Exit Function
						End If
					elseif db_TestCaseSearch(testcasename, "GatewayExlude") = db_GatewayActiveSearch and check_active_gw then
						if configuration_locked then
							check_active_gw=true
							TrafficDotLogin=-1
							Exit Function
						end if
						if db_TestCaseLock(testcasename)=1 then
							TrafficDotLogin=-1
							Exit Function
						end if
						if env_path_changed_alt<>"" then
							originalenvpath=env_path_changed		
							DoTrafficDot2Setup name, true
							env_path_changed=env_path_changed_alt: mapping_choice_found=false
							WriteToLogFile "Environment temporary change to alternative 1: " & env_path_changed
							check_active_gw=false: ver_check=false
							TrafficDotLogin testcasename, repeat, skipfeaturefile: exit function	
						else
							TrafficDotLogin=-1
						end if
						Exit Function
					End If
				elseif lcase(db_TestCaseSearch(testcasename, "Run"))="" then
				else
					TrafficDotLogin=-1
					Exit Function
				End If
				'run all tests
			elseIf Environment("Try_Group_No_EMEA")="on" Then
				If instr(1, testcasename, "EMEA")<= 0 Then
					' ignore "skip" and run all tests except EMEA tests
				else
					TrafficDotLogin=-1
					Exit Function
				End If
			elseif Environment("Try_Group_Smoke")="on" then
				If Ubound(array_group_tests)<0 Then enabledTests
				If Ubound(Filter(array_group_tests, testcasename)) > -1 Then
        			' ignore "skip" and run all tests in array_group_tests
        		Else
           			TrafficDotLogin=-1
					Exit Function
        		End If	
			elseif Environment("Try_Group_Acceptance")="on" then
				If Ubound(array_group_tests)<0 Then enabledTests
				If Ubound(Filter(array_group_tests, testcasename)) > -1 Then
        			' ignore "skip" and run all tests in array_group_tests
        		Else
           			TrafficDotLogin=-1
					Exit Function
        		End If	
			elseif Environment("Try_Group_Custom")="on" then
				If Ubound(array_group_tests)<0 Then enabledTests
				If Ubound(Filter(array_group_tests, testcasename)) > -1 Then
        			' ignore "skip" and run all tests in array_group_tests
        		Else
           			TrafficDotLogin=-1
					Exit Function
        		End If	
        	elseIf Environment("Try_Group_UI")="on" Then
				If Ubound(array_group_tests)<0 Then enabledTests
				If Ubound(Filter(array_group_tests, testcasename)) > -1 Then
					' ignore "skip" and run all tests except EMEA tests
				else
					TrafficDotLogin=-1
					Exit Function
				End If	
			else
				if not overwrite_skip_test then
					If lcase(testcase_action)="skip" Then
						TrafficDotLogin=-1
						Exit Function
					End If
				end if
			End If
			If lcase(testcase_action)="obsolete"  or lcase(testcase_action)="" Then
				TrafficDotLogin=-1
				Exit Function
			End If
			
			If testcasename="Test_EMEA_RunAutoconfig" and EnvironmentSkip() Then
				TrafficDotLogin=-1
				Exit Function
			End If
			
			functionstart testcasename

			functionstart "TrafficDotLogin" & " " & "attempt #" & login_try
			print "TrafficDotLogin" & " " & "attempt #" & login_try
		
			Dim OffLineTests()
		
			If lcase(Environment("OfflineMode"))="on" or _
				instr(1, lcase(testcasename), "offline")> 0 Then
				If name="" Then
				End If
				TrafficDotLoginOffLine(testcasename): Exit Function	
			End If
			
			'start this is change on 9/11/2018
			db_TestRunSearch testcasename, db_BuildIDSearch (buildid), status
			
			If lcase(status)="passed" Then
					If build_new_folder="" Then
						SQLSTR ="UPDATE mydb.Tests set Run = 'skip' WHERE Name = '" & testcasename & "'"		
						db_connect SQLSTR, "update"
						TrafficDotLogin=-1:repeat_no_needed=true
						functionend testcasename & "+++"
						Exit Function
					else	
						buildnew=replace (build_new_folder, "RELEASE.flexgui_", "")
						buildnew= replace (buildnew, "_", ".", 1, 2)
						buildnew=replace (buildnew, "_", " Build ")
						buildnew= "Version " + buildnew
						db_buildsadd buildnew		
					End If
			End If
			'end this change on 9/11/2018
			
			if db_ConfigurationLock (Environment("IPaddress"), "")=1 or _
				db_TestCaseLock(testcasename)=1 then
				TrafficDotLogin=-1
				Exit Function
			end if
		
			RunTD2: wait_custom 3: ApplicationInstall
		
			wait_custom "fixed10": AdobeAirUpdate true: AdobeAirSetup true: dim readyto: readyto=false
		
			Do  while not readyto
				readyto= UIAWindow("TrafficDOT 2").UIAButton("Connect").Exist: wait_custom 1
			loop		

			ApplicationInstallCloseWorkAround: wait_custom 3: buildid="idBuilds"
			
			'changed start here
			''''''''
			'changed end here
			
			End if
			
			ipcurrent = Environment("IPaddress")
			
			ChooseIPAddress ipcurrent: wait_custom 3
			ChooseTCPPort Environment("TCPport"): wait_custom 3
	 		ChooseHTTPPort Environment("HTTPport"): wait_custom 3
			
			If ip_last <> ipcurrent Then
				mapping_choice_found=false
				if ip_last<>"" then
					WriteToLogfile "Gateways change: " & ip_last & "->" & ipcurrent
				end if
			End If
			
			ip_last=ipcurrent
			
			If testcasename="Test_Parkng_Microradar" or app_role_set="Parking" Then
				TD2RoleSetup "Parking", trafficdotconnect, true
				ChooseRole "Parking"
			elseIf instr(1, testcasename, "EMEA")>0 or app_role_set="EMEA" Then
				If forget_emea Then
					TD2RoleSetup "Standard", trafficdotconnect, false
					ChooseRole "Standard"
				else
					TD2RoleSetup "EMEA", trafficdotconnect, true
					ChooseRole "EMEA"
				End If
			elseIf instr(1, testcasename, "SensMetrics")>0 or app_role_set="SensMetrics" Then
				TD2RoleSetup "SensMetrics", trafficdotconnect, true
				ChooseRole "SensMetrics"
			elseIf instr(1, testcasename, "GMG")>0 or app_role_set="GMG" Then
				If forget_gmg Then
					TD2RoleSetup "Standard", trafficdotconnect, false
					ChooseRole "Standard"
				else
					TD2RoleSetup "GMG", trafficdotconnect, true
					ChooseRole "GMG"
				End If
			elseIf instr(1, testcasename, "STOPBAR")>0 or app_role_set="STOPBAR" Then
				TD2RoleSetup "Stop Bar", trafficdotconnect, true
				ChooseRole "Stop Bar"
			elseIf instr(1, testcasename, "RLE")>0 or app_role_set= "RLE" Then
				no_config_button=true
				TD2RoleSetup "RLE", trafficdotconnect, true
				ChooseRole "RLE"
			else
				TD2RoleSetup "Standard", trafficdotconnect, false		
				ChooseRole "Standard"
			End If
		
			connectTD2Button: uploadcode=UploadCvsfile (template_yes, file_to_upload)
					
			if uploadcode < 0 then
				TrafficDotLogin = 1
				repeat=1: login_try=login_try+1: functionend "TrafficDotLogin": exit function
			elseif uploadcode = 1 Then
				functionend "TrafficDotLogin": exit function
			elseif uploadcode = 3 Then
				skip_launch=true: wait_custom "fixed20"
				TrafficDotLogin testcasename, repeat, skipfeaturefile
			elseIf uploadcode=4 Then
				' continue with TD2
			end if
			
			logincode=LoginIdleAndSetup (testcasename)
			
			if logincode < 0 then
				TrafficDotLogin = 1
				repeat=1: login_try=login_try+1: functionend "TrafficDotLogin": exit function
			elseIf logincode = 3 Then
				tdautostart=false ' might change
				If tdautostart Then
					skip_launch=true
				End If
				wait_custom "fixed20"
				TrafficDotLogin testcasename, repeat, skipfeaturefile
			elseif logincode=5 Then
				rem env_path_changed=ENVIRONMENT_PATH_GWY + "environment_" & apeg_alt & ".xml"
				rem TrafficDotLogin = 1
				rem repeat=1: login_try=login_try+1: functionend "TrafficDotLogin": exit function
			end if

			estimatedtime=Round((ubound(enabledTests)+1 - tests_run)	* average_test_case_run_time, 0)
			
			if 	Environment("Try_Group_All_DB")="on" Then
				estimatedtime=db_TestsDurationSum
			end if
			
			if isnull(estimatedtime) then
				estimatedtime=10
			end if
			
			estimatedcompletiontime= DateAdd ("N", estimatedtime, Now)
						
			WriteToLogfile "estimated completion time: " & estimatedcompletiontime
		
			subject = setup_info & vbnewline & gw_model & vbnewline & vbnewline &_
								version_trafficdot2 & vbnewline & vbnewline & _
								"estimated run time: " & cstr(estimatedtime) & " min " & _
								"estimated completion time: " & estimatedcompletiontime & _
								vbnewline &_
								printsubject (enabledTests, testcasename)
		
			If not skip_start_email Then
				
				test_status_d=TEST_STATUS_EMAIL_OUT
				
				db_TestRunsAddUpdate testcasename, test_run_db_id, false
				
				SendGmail "", testcasename, GroupOfTestsSet + testcasename + ": " & test_status_d & "..." + vbnewline &_
									vbnewline & subject
				time_start=TimeIt
			
				If tests_run=0 Then
					time_zero=time_start
				End If
			End If
			
			If(Err.Number<>0)Then
				ValidationFailed "TrafficDot2 Login", Err.Description
			End If	
			functionend "TrafficDotLogin"		
		
End Function

Function EnvironmentSkip()
	EnvironmentSkip=false
	if Environment("IPaddress")="192.168.3.157" then
		EnvironmentSkip=true
	ElseIf Environment("IPaddress")="0.0.0.0" Then
		EnvironmentSkip=true
	end if
End Function

function GroupOfTestsSet
	functionstart "GroupOfTestsSet"
	if group_test_smoke then
		groupoftests="Smoke Tests/"
	elseif group_test_acceptance then
		groupoftests="Acceptance Tests/"
	elseif group_test_emea then
		groupoftests="EMEA Tests/"
	elseIf group_test_custom Then
		groupoftests ="Custom Tests/"
	elseIf group_test_all Then
		groupoftests ="All Tests/"
	elseIf group_test_ui Then
		groupoftests ="UI Tests/"
	end if
	GroupOfTestsSet=groupoftests
	functionend "GroupOfTestsSet" & " " & groupoftests
end function

Function LoginIdleAndSetup (byval name)
	functionstart "LoginIdleAndSetup" & " " & role_c
	LoginIdleAndSetup=0: Dim n, waitmore: waitmore=true
	if role_c="EMEA" Then
		wait_custom "fixed10"
		If file_deleted Then
			If template_yes Then
				if EMEAPreffernces(true, new_mapping_choice, true) > 0 then
					If new_mapping_choice="bvd4" or new_mapping_choice="bvd20" Then
						LoginIdleAndSetup=3: upload_no=true
						functionend "LoginIdleAndSetup"
						Exit function
					else	
						LoginIdleAndSetup=3: upload_no=true
						functionend "LoginIdleAndSetup"
						Exit function
					End If	
				end if
			else
				functionend "LoginIdleAndSetup"
				Exit function
			End If
		ElseIf EMEANoChoiceAPMappingWarningCheck>0 Then
			LoginIdleAndSetup=-1
			functionend "LoginIdleAndSetup": wait_custom "fixed35"
			Exit function
		elseif EMEAinitPopup >0 Then
			LoginIdleAndSetup=-1
			functionend "LoginIdleAndSetup": wait_custom "fixed35"
			Exit function
		End if
	elseIf role_c="Stop Bar" Then
			wait_custom "fixed15": if StopbarMaster170WarningCheck>0 then
				LoginIdleAndSetup=-1
				functionend "LoginIdleAndSetup": wait_custom "fixed35"
				Exit function
			end if
	End If 
	Do  while waitmore
		if n mod 2 = 0 then
			WriteToLogFile "waiting to load table data..."
		else
			WriteToLogFile "still waiting..."
		end if
		ts=3
		wait_custom ts
		If n>200 Then
			ReportTimeout "TrafficDotLogin", n
			LoginIdleAndSetup=-1
			functionend "LoginIdleAndSetup"
			Exit function
'			ValidationFailed "LoginIdleAndSetup", name
'			TestFinished "", name: AllTestsFinished
'			ExitTestIncomplete "LoginIdleAndSetup": ExitRun
'			Exit function
		End If
		n=n+ts
		waitmore=UIAWindow("TrafficDOT 2").Exist
		If waitmore=false Then
			If UIAWindow("TrafficDOT 2_2").Exist Then
				waitmore=true
			End If
		End If
	loop
	WriteToLogFile "...table data has been loaded"
	env_role=Environment("TrafficDot2Role")
' 	if ExtraSensorZoneCheck = 0 then 
' 		LoginIdleAndSetup=-1
' 		functionend "LoginIdleAndSetup"
' 		Exit function
' 	End If 
' 	wait_custom 2
	If role_c="SensMetrics" or env_role="SensMetrics"  Then
		SensMetrciscCheck: wait_custom 1
	elseIf role_c="GMG" Then
		Set ojg=UIAWindow("Sensys Networks TrafficDOT").UIAObject("GMG functionality not")
		If ojg.Exist Then
			click_button "OK", objb, true, false
		End If
	elseif role_c="EMEA" or env_role="EMEA"  Then
		NoTopologyDefinedCheck: wait_custom 1
		if MappingChoiceValidations > 0 then
				LoginIdleAndSetup=-1
				functionend "LoginIdleAndSetup"
				Exit function
		End If: wait_custom 1
		EMEAMappingErrorCheck: wait_custom 1
	End If 
	MoveTrafficDOT2window: cachedConfigButtonXY
	TrafficDot2Version: AdjustZoom Environment("MapZOOMFactor")
	If role_c="Standard" Then
		UserPreferencesUnits units_g, false, false
	End If
	if role_c="EMEA" then 
		If mpc_settup  Then
			Sensors=SensorsSetup
			MappingChoiceFind Sensors(1), mch
			DiscoverModeOnEMEA
		End If
	end if
	functionend "LoginIdleAndSetup"
End Function

Function EMEAPrefferencesCheck
	If file_deleted Then
		
	End If
End Function

Function GatewayIDGet(byref gatewaymodel, byref triggered)
	functionstart "GatewayIDGet"
	If role_c="Standard" or role_c="EMEA" Then
		GatewayInfo_button: wait_custom 3: EditBOX "Gateway ID", false, gatewayidcode, "", false
		SetupAPCodes gatewaymodel, gatewayidcode
		gw_model=gatewaymodel
		triggered=true
	else
	end if
	functionend "GatewayIDGet"
End Function

function EMEAMappingErrorCheck
	exit function
	functionstart "EMEAMappingErrorCheck"
	if UIAWindow("Sensys Networks TrafficDOT").UIAObject("MappingError").Exist then
		messagem=UIAWindow("Sensys Networks TrafficDOT").UIAObject("MappingError").GetROProperty("text")
		Reporter.ReportEvent micWarning, "EMEAMappingErrorCheck", messagem
		ActivateOKbutton: wait_custom 2
	End If
	EMEAMappingErrorCheck=messagem
	functionend "EMEAMappingErrorCheck"
End function

Function StopbarMaster170WarningCheck()
	functionstart "StopbarMaster170WarningCheck"
	StopbarMaster170WarningCheck=0
	Set objM170 = UIAWindow("TrafficDOT 2").UIAObject("The card interface (master170)")
	If objM170.Exist Then
		ActivateButton "OK": wait_custom 5
		StopbarMaster170WarningCheck=1
		WriteTologfile "!!!StopbarMaster170Warning (Defect #12429) was detected. OK and reboot...!!!"
		if app_role_set<>"" then
			last_role_before_reboot="Stop Bar"
			skip_launch=false
		end if
	End If
	functionend "StopbarMaster170WarningCheck"
End Function

Function EMEANoChoiceAPMappingWarningCheck
	If role_c<>"EMEA" Then
		Exit function
	End If
	functionstart "EMEANoChoiceAPMappingWarningCheck"
	EMEANoChoiceAPMappingWarningCheck=0
	Set obAPNCH = UIAWindow("TrafficDOT 2").UIAObject("Cannot continue in EMEA_2")
	wait_custom "fixed15": If obAPNCH.Exist Then
		UIButtonTD2("OK").Click: wait_custom 3
		UIButtonTD2("Reboot").Click 
		EMEANoChoiceAPMappingWarningCheck=1
		WriteTologfile "!!!EMEANoChoiceAPMappingWarning (Defect #12429) was detected. OK Preferences default and Reboot...!!!"
		if app_role_set<>"" then			
			last_role_before_reboot="EMEA"
			skip_launch=false
		end if
	End If
	functionend "EMEANoChoiceAPMappingWarningCheck"
End Function

Sub SensMetrciscCheck()
	functionstart "SensMetrciscCheck"
	if UIAWindow("Sensys Networks TrafficDOT").UIAObject("EDI or FlexConnect Addon").Exist then
		ActivateOKbutton: wait_custom 3
	End If
	functionend "SensMetrciscCheck"
End Sub

Sub cachedConfigButtonXY
	If no_config_button Then
		Exit sub	
	End If
	functionstart "cachedConfigButtonXY"
	x_config=ConfigAbsXGet
	y_config=ConfigAbsYGet
	functionend "cachedConfigButtonXY"
End Sub

Sub MoveTrafficDOT2window
	Exit sub
	functionstart "MoveTrafficDOT2window"
	xx = UIAWindow("Sensys Networks TrafficDOT").UIAObject("TitleBar").GetROProperty("abs_x")
	yy = UIAWindow("Sensys Networks TrafficDOT").UIAObject("TitleBar").GetROProperty("abs_y")
	w1 = UIAWindow("Sensys Networks TrafficDOT").UIAObject("TitleBar").GetROProperty("width")
	h1 = UIAWindow("Sensys Networks TrafficDOT").UIAObject("TitleBar").GetROProperty("height")
	If xx>295 Or yy>67 Then
		UIAWindow("Sensys Networks TrafficDOT").UIAObject("TitleBar").Drag
		mousePoint 700, 24: wait_custom 10
		UIAWindow("Sensys Networks TrafficDOT").UIAObject("TitleBar").Drop
		UIAWindow("Sensys Networks TrafficDOT").UIAObject("TitleBar").Click
	End If
	functionend "MoveTrafficDOT2window"	
End Sub

Sub ReportTimeout(byval details, byval numberofSeconds)
	functionstart "ReportTimeout" & " " & details & " " & numberofSeconds
	ValidationFailed "ReportTimeout", numberofSeconds
	functionend "ReportTimeout"	
End Sub

Function Test_ToolsUtilitiesScan(byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if
		Test_ToolsUtilitiesScan=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function	
		ElseIf repeat=1 Then
			Test_ToolsUtilitiesScan name: exit function	
		End If
		
		filename = "c:\Temp\scan_report_" & GetDateTimeStamp + ".txt"
		Sensors = SensorsSetup
		ActivateButton ("Gateway Info"): wait_custom 3: APConfigTabSelect ("Radio"): wait_custom 3
		channelv = channelAP(): Tools "Utilities...", "Scan For Devices", "": wait_custom 5
		
		y = GenericButtonAbsYGet("Start Scan"): x = GenericButtonAbsXGet("Start Scan")
		yr = GenericButtonAbsYGet("Save Report"): xr = GenericButtonAbsXGet("Save Report")
		yc = GenericButtonAbsYGet("Button_Pref_Close"): xc = GenericButtonAbsXGet("Button_Pref_Close")

		RadioButtonSelect ("Scan for Specified"): wait_custom 3: UIEdit "Add Device To List",  Sensors(0): wait_custom 3
		ActivateButton ("Add Device To List"):  wait_custom 5

		mouseclick x+30, y+5, false: wait_custom 15: mouseclick xr+30, yr+5, false: wait_custom "fixed_7"
		
		FileUpload  "Save device scan report to file:", filename, "Save", true, "Sensys Networks TrafficDOT": wait_custom 7

		PreferencesPopup "Scan For Devices", true
		
		wait_custom 7: str = Sensors(0) & "		" & channelv
		
		FileReadAndValidate filename, str, true, 1, false: wait_custom 3: CloseTrafficDot
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ToolsUtilitiesScan = 1 		
		End If
		
		TestFinished Err.Description, name

End Function

Function PreferencesPopup (byval pname, byval close)
	functionstart "PreferencesPopup" & " " & pname
	Repository.Value("name")= pname
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Preferences_All")
	If obj.Exist Then
		GetobjectABSXYWH pname, obj, x, y, h, w
	else
		PreferencesPopup=-1
		functionend "PreferencesPopup" & " -1" 	
		Exit function
	End If

	If close Then
		mouseclick x+w-8, y+8, false
	End If
	functionend "PreferencesPopup"	
End Function

Function Test_ToolsCharts(byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
				end if
		Test_ToolsCharts=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function	
		End If

		chartsstr="Detections;XYZ;µRadar Detections;µRadar C;µRadar DebugD; µRadar B;Battery;"
		
		Tools "Charts...", "", "": wait_custom 7
		
 		ValidateChartsTabs Split(chartsstr, ";")
		
		CloseCharts: wait_custom 3: TrafficDotClose false, false
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ToolsCharts = 1 		
		End If
		
		TestFinished Err.Description, name

End Function

Function Test_ToolsAddons(byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ToolsAddons=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function	
		End If

		chartsstr="Detections;XYZ;µRadar Detections;µRadar C;µRadar DebugD; µRadar B;Battery;"
		
		Tools "Addons...", "", "": wait_custom 7
		
		buttons="Give Me Green;Lonestar TSS;Modem Power Management;" & _
			"RTL8192 Wireless Driver;USB Drive Sync;" & _
			"UsbWatch;Check Addon Status"
  		buttons=Split(buttons,";")
  		
  		buttons1="Apply;Revert;Diagnostics"
  		buttons2=buttons1 & ";Format USB Drive;Sync now!;Download All"
		
		buttons1=Split(buttons1,";")
		buttons2=Split(buttons2,";")
		
		gui_validate=true
		
		For each btn in buttons
			 VerifyControl "button", btn, true: wait_custom 3
			 If btn="Check Addon Status" Then
			 	wait_custom 1: VerifyControl "button", "Refresh", false
			 	CloseCurrentAddonStatus(): wait_custom 3
			 elseIf btn="USB Drive Sync" Then
			 	For each btn2 in buttons2 
			 		VerifyControl "button", btn2, false: wait_custom 3
			 	Next
			 else
			 	For each btn1 in buttons1 
			 		VerifyControl "button", btn1, false: wait_custom 3
			 	Next
			 End If 
		Next
		gui_validate=false
		
		wait_custom 3: CloseConfigAddons: wait_custom 3: TrafficDotClose false, false
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ToolsAddons = 1 		
		End If
		
		TestFinished Err.Description, name

End Function

Function CloseCharts
	functionstart "CloseCharts"
	ActivateChartsButton "Close"
	functionend "CloseCharts"
End Function

Function ActivateChartsButton(byval bname)
	functionstart "ActivateChartsButton" & " " & bname
	Repository.Value("buttonName")=bname
	Set obj = UIAWindow("Charts").UIATab("Tab").UIAObject("Chart_Types")
	obj.Click: wait_custom 3
	functionend "ActivateChartsButton"
End Function

Function ValidateChartsTabs(byval tabs)
	tabsstr=join(tabs, ",")
	functionstart "ValidateChartsTabs"  & " " & tabsstr
	Set obj= UIAWindow("Charts")
	If obj.Exist Then
		ValidationSucceeded "Charts", ""
		Set obj = UIAWindow("Charts").UIATab("Tab").UIAObject("Chart_Types")
		For n = 1 To ubound(tabs) Step 1
	 		Repository.Value("tab_name")=tabs(n-1)
	 		If obj.Exist Then
	 			ValidationSucceeded "Chart Types", tabs(n-1)
	 			obj.Click: wait_custom 3
	 		else
	 			ValidationFailed "Chart Type/Tab not found", tabs(n-1)
	 		End If
		Next
	else
		ValidationFailed "Chats window not found", ""
	End If
	functionend "ValidateChartsTabs"
End Function


Function APConfigTab_1(byval name)
	functionstart "APConfigTab_1"
	Set chld=Description.Create
	chld("micclass").value = "UIATab"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld)
	For num = 0 to chldcln.count-1
	chldcln(num).highlight
	print chldcln(num).GetRoProperty("text")
	    If chldcln(num).GetRoProperty("name") = name Then
	    	chldcln(num).highlight
	    	wait_custom 3: chldcln(num).Click: wait_custom 3: functionend "APConfigTab_1": exit function
	    End If
	Next
	functionend "APConfigTab_1"
End Function

Function UITabGroupItem(byval name, byval clickit, byval highlight, byval delaysec)
	functionstart "UITabGroupItem" & " " & name
	Set chld=Description.Create: Set tabld=Description.Create
	chld("micclass").value = "UIATab": tabld("micclass").value="UIAObject"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld): wait_custom delaysec
	For num = 0 to chldcln.count-1
		if highlight then chldcln(num).highlight
		Set tabcld = chldcln(num).ChildObjects(tabld): wait_custom delaysec
		For n = 0 To tabcld.count-1 Step 1
		    If tabcld(n).GetRoProperty("name") = name Then
		    	GetObjectABSXYWH name, tabcld(n), x, y, h, w
		    	if highlight then tabcld(n).highlight
		    	if clickit then 
		    		mouseclick x+5, y+5, false
		    		'tabcld(n).Click
		    	end if
		    	wait_custom 3: functionend "UITabGroupItem": exit function
		    End If
		Next 
	Next
	functionend "UITabGroupItem"
End Function


Function APConfigTab(byval tabname)
	functionstart "APConfigTab" & " " & tabname
	Repository.Value("apConfigTab")=tabname: wait_custom 1
	set APConfigTab=UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_AP_Defaults").UIAObject("ConfigTAB")
	If APConfigTab.Exist Then
		ValidationSucceeded "APConfigTab", tabname
	else
		oops "", tryid
		If tryid<2 Then
			APConfigTab tabname: resettryid: exit function
		End If
		ValidationFailed "APConfigTab", "tab not found" & " " & tabname
	End If
	functionend "APConfigTab"
End Function

Function APConfigTabSelect (byval tabname)
	functionstart "APConfigTabSelect" & " " & tabname 
	If ActivateObject (APConfigTab(tabname)) then 

	else
		yt=95
		Select Case tabname
			Case "Info"
				ClickFromConfig 290, yt
			Case "Radio"
				ClickFromConfig 230, yt
			Case "Event"
				ClickFromConfig 175, yt
			Case "Detection"
				ClickFromConfig 120, yt
			Case "Advance"
				ClickFromConfig 60, yt
			Case "Cmds"
				ClickFromConfig 0, yt
		End Select
	end if
	wait_custom 3
	functionend "APConfigTabSelect"
End Function

Function channelAP()
	functionstart "channelAP"
	ActivateButton "Gateway Info": wait_custom 3: APConfigTabSelect "Radio": wait_custom 3
	channelAP = UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("RF Channel").GetROProperty("value")
	functionend "channelAP"
End Function

Function ValidationResult (byval name, byval details, byval inverted)
		vtype="(+)"
		If inverted  Then
			vtype="(-)"
		End If
		If not inverted Then
			sresult="(passed)"
			ValidationSucceeded name, details
		else
			sresult="(fail)"
			ValidationFailed name, details
		End If
		functionstart "ValidationResult" & " " & sresult & " " & details & " " & vtype 
		functionend "ValidationResult"
End Function

Function FileReadAndValidate(byval fileName, byval assertText, byval partial, byval num, byval inverted)
		If inverted Then
			validationtype ="(-)"
		else
			validationtype ="(+)"
		End If
		functionstart "FileReadAndValidate" & " " & assertText & " " & validationtype & " " & num
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if
		If assertText="" Then 
			functionend "FileReadAndValidate" & " Nothing to assert!"
			exit function
		end if
		Set objFileToRead = CreateObject("Scripting.FileSystemObject").OpenTextFile(fileName,1)
		Dim strLine, found: found=false
		do while not objFileToRead.AtEndOfStream
		    strLine = objFileToRead.ReadLine()
			If sString1=assertText  Then
				ValidationResult "FileReadAndValidate", fileName & " " & assertText, inverted
				found=true
				Exit do			
			End If
			If partial Then
				If instr(1, strLine, assertText) Then
					ValidationResult "FileReadAndValidate", fileName & " " & assertText, inverted
					found=true
					Exit do	
				End If
			End If
		loop
		objFileToRead.Close
		Set objFileToRead = Nothing
		if not found then
			ValidationResult "FileReadAndValidate", filename & ":" & assertText & ": no match found", not inverted
		end if
		If(Err.Number<>0) Then
			ValidationFailed "FileReadAndValidate", Err.Description	
		End If
		functionend "FileReadAndValidate"
End Function

Sub resetTDconnect
	functionstart "resetTDconnect"
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	
	If trafficdotconnect_online<>"" Then
		trafficdotconnect=replace (trafficdotconnect_online, role_last, "Standard")
		trafficdotconnect_online=""
	else
		trafficdotconnect=replace (trafficdotconnect, role_last, "Standard")
	End If
	
	setup_info=replace (setup_info, role_last, "Standard")
	
	Repository.Value("TrafficDot2Connected")=trafficdotconnect	
	functionend "resetTDconnect"
End Sub

Function Test_ConnectAndRoles(byval name)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ConnectAndRoles=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function	
		End If 
		
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"

		roles="STOPBAR;Parking;EMEA;SensMetrics;GMG;RLE;Standard"
		
		If less_roles Then
			roles = replace(roles, roles_covered, "")
		End If

		roles=Split(roles,";")
		
		skip_start_email=true
		For each role in roles
			If role="_STOPBAR" Then
				WriteToLogfile "!!!!!Defect #12429!!!Stop Bar role has been disabled!!!!!"
				WriteToFeaturefile "Stop bar: defect #12429. Step skipped!!!!", ""
			else
				mpc_settup=false
				app_role_set=role: skip_launch=true
				if TrafficDotLogin(name, repeat, false)<0 then 
					exit function
				ElseIf repeat=1 Then
					roles_covered = roles_covered + role + ";"
					WriteToLogfile roles_covered
					less_roles=true: Test_ConnectAndRoles name: exit function
				end if	
				roles_covered = roles_covered + role + ";"
				WriteToLogfile roles_covered
				ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"
				resetTDconnect	
			end if
			if role="Parking" Then
				test_status_d=TEST_STATUS_IN_PROGRESS
			elseif role="SensMetrics" Then
				test_status_d=TEST_STATUS_FINISHIGN_SOON
			elseif role="RLE" Then
				test_status_d=TEST_STATUS_ALMOST_DONE
			end if
			db_TestRunsAddUpdate test_case_name, test_run_db_id, true
		Next: wait_custom "fixed7":	ForceCloseTD2: wait_custom "fixed7"
		
		skip_launch=false: skip_start_email=false:mpc_settup=true
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description: Test_ConnectAndRoles = 1		
		End If
		
		TestFinished Err.Description, name
		
End Function


Function Test_Table(byval name)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_Table=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function	
		End If 
		
		ActivateButton("Map/Table"): wait_custom 3

		RadioButtonSelect ("RepeaterRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "Group By Repeater",false, true, "", false, "", false
		RadioButtonSelect ("SensorZoneRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "Group By Sensor Zone",false, true, "", false, "", false
		RadioButtonSelect ("NormalRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "View Normal",false, true, "", false, "", false
		RadioButtonSelect ("SummaryRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "View Summary",false, true, "", false, "", false
		RadioButtonSelect ("ViewDotTableRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "View Dot Table",false, true, "", false, "", false
		RadioButtonSelect ("Activity"): wait_custom 3: ReadTable UIListTable("List"), "View Activity",false, true, "", false, "", false
		RadioButtonSelect ("NormalRadioButton"): wait_custom 3
		
		Sensors=SensorsSetup
		
		printscreen name: wait_custom 3

		For n = 1 To ubound(Sensors) -1 Step 1
			SearchTable Sensors(n), "View Normal", 0: wait_custom 1
		Next
		
		For n = 1 To ubound(Sensors)-1 Step 1
			SearchTable Sensors(n), "View Normal", 3: wait_custom 1
		Next	
		
		wait_custom 3: SystemSave "", false, true
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description: Test_Table = 1		
		End If
		
		TestFinished Err.Description, name
		
End Function

Sub SendGmail (byval sendTo, byval sendSubject, byval sendBody)

	If lcase(Environment("EnableEMAIL"))<>"on" then Exit Sub
	
	functionstart "SendGmail"
	
	environment.LoadFromFile env_path_changed
	
	if sendTo="" then	
		sendTo=Environment("SendTo")
	end if

    Set iMsg = CreateObject("CDO.Message")
    Set iConf = CreateObject("CDO.Configuration")
 
    iConf.Load -1: Set Flds = iConf.Fields
    
    WriteToLogFile "...starting email configuration"
    
    With Flds
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpusessl") = True
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = 1
        .Item("http://schemas.microsoft.com/cdo/configuration/sendusername") = "testsensysnet@gmail.com"
        .Item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = "testsensysnet123"
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpserver") = "smtp.gmail.com" 'smtp mail server
        .Item("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = 465 'stmp server
        .Update
    End With
    
    WriteToLogFile "Email configuration complete. Starting to compose email..."
	
    With iMsg
        Set .Configuration = iConf
        .To = sendTo
        .From = "testsensysnet@gmai.com"
        .Subject = sendSubject
        .TextBody = sendBody
        If instr(1, sendBody, "Complete")>0 Then
        	FilesToAttach ffile, ofile, ptfile, ptfile1, anyfile
	 		.AddAttachment ffile
  			.AddAttachment ofile
  			If ptfile <> "" Then
  				.AddAttachment ptfile
  			End If
  			If ptfile1 <> "" Then
  				.AddAttachment ptfile1
  			End If
  			If anyfile <> "" Then
  				.AddAttachment anyfile
  			End If
		end If
        .Send
    End With
    
	WriteToLogFile "Email sent"
 
    Set iMsg = Nothing
    Set iConf = Nothing
    
    functionend "SendGmail"
end sub

Sub CenterLocationGMG(byref longt, byref lat)
	functionstart "CenterLocationGMG"
	Set objcl = UIAWindow("Sensys Networks TrafficDOT").UIAObject("CenterLocationGMG")
	If objcl.Exist Then
		datacl = replace (objcl.GetROProperty("name"), "Center Location", "")
		For each coor in split(datacl, ",")
			if n=0 then
				lat=trim(coor)
			else
				longt=trim(coor)
			end if
			n=n+1
		Next
	End If
	functionend "CenterLocationGMG" & " " & lat & longt
End Sub

Function SensorConfigTabsGMG(byval tname)
	functionstart "SensorConfigTabsGMG" & " " & tname
	Select Case tname
		Case "Card Addresses"
			clickfromconfig 110, 90
		Case "Position"
			clickfromconfig 280, 90
	End Select
	functionend "SensorConfigTabsGMG"
End Function


Function ConfigureSensorGMG(byval sensorName)
	functionstart "ConfigureSensorGMG" & " " & sensorName 
	SensorConfigTabsGMG  "Card Addresses": wait_custom "fixed10"
	EditControllerCardGMG "Extension", 1: wait_custom 3
	EditControllerCardGMG "Delay", 3: wait_custom 3
	Comboboxbynum "Card Address1: Shelf", 1, true, true, true, "2", 1, false
	Comboboxbynum "Card Address1: Slot", 2, true, true, true, "10", 1, false
	Comboboxbynum "Card Address1: Channel", 3, true, true, true, "4", -1, true
	functionend "ConfigureSensorGMG"
End Function

Function Test_Maps_GMG (byval name)

	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_Maps_GMG=0
	
	if TrafficDotLogin(name, repeat, false)<0 then
		exit function		
	End If

	etext="Give me Green - it's Gmg": TextBoxEdit 160, 115, etext, "Name:"
	
	GenericTabsSubTabs  "Intersection","", "": wait_custom 3
	
	GenericTabsSubTabs  "Map","", "": wait_custom 3
		
	wait_custom 3: Apply_button: wait_custom 3
		
	trafficdotconnect=Repository.Value("TrafficDot2Connected"): trafficdotconnectDEFAULT=trafficdotconnect
		
	trafficdotconnect1=replace (trafficdotconnect, "--", ": " & etext & " --" )
		
	Writetologfile trafficdotconnect1
		
	wait_custom 3: Repository.Value("TrafficDot2Connected")=trafficdotconnect1: wait_custom 3
	
	finame="gmgIntersection.xml": xmlfi = xml_files_path + "\" + finame
	
	DeleteFile xmlfi: FileName="SensysGMGTestSite.jpg"
	
	UploadMapFile CONFIG_GMG, FileName, false: wait_custom "fixed7"
	
	GenericTabsSubTabs  "Intersection","", ""
	
	click_button "Import KML location file", objb, true, false
	
	LocationFileName=CONFIG_GMG+"SensysTestSite.kml"
	
	FileUpload "Select location(kml) file", LocationFileName, "Open", true, "Sensys Networks TrafficDOT": wait_custom 3
	
	click_button "Start New", objb1, true, false: wait_custom "fixed7"
	
	CenterLocationGMG longt, lat

	zoneName = DragSensorZone ("Sensor Zone NB", -100,300, xx, yy, ww, hh, tryid): wait_custom 3
	SensorZoneTypeChange "Count",  true: wait_custom 5
	set szobj = SetSensorZoneObj (zoneName, szset, x, y, h, w)
	If szset Then
		SizeAndRotateObject  zoneName, szobj, true, 20, 100, true, -25: wait_custom 3
		SetSensorZoneObj zoneName, szset, x, y, h, w
		mouseclick x -10, y-20, false
		mouseclick x + w/2, y+h/2, false
	End If	
	
	sensorGMG="005A": DragNewSensor sensorGMG, x + w/2, y+h/2, sensorGMG: wait_custom 2
	
	xs= SensorNewAbsXGet: ys= SensorNewAbsYGet: ws= SensorNewWidthGet
	
	SensorVerticalPositionChange 1, true: wait_custom 5
	
	ConfigureSensorGMG sensorGMG: wait_custom 5: printscreen name: wait_custom "fixed7"
	
	MapButtonActivate: wait_custom "fixed7"
	
	tabsm="L1;L2;L3;L4": tabsm1="Adv Region;Region;Stopbar;Tripwires"
	tabsm2="Call 1;Call 2;Call 3;Call 4"
	tabsm3="TW1;" + tabsm2
	
	For each tb in split(tabsm, ";")
		GenericTabsSubTabs "Legs",tabsm, tb
		For each tb1 in split(tabsm1, ";")
			GenericTabsSubTabs  "Legs",tabsm1, tb1
			If tb1="Stopbar" Then
				For each tb2 in split(tabsm2, ";")
					set objc = UITab (tb2)
					objc.Click
					If tb2="Call 1"and tb ="L1" Then
						ComboBoxByNum tb & ">" & tb1 & ">" & tb2, 1, true,  true,  false,  "5", 1, false
						validatedropdownlist 1, tb & ">" & tb1 & ">"& tb2, "Messages_0065"
						EditBoxEdit 0, false, 1, etext, true, "Timing Bit"
						EditBoxEdit 1, false, 3, etext, true, "Holdover"
						EditBoxEdit 2, false, 90, etext, true, "Action Code"
						EditBoxEdit 3,  false, 4, etext1, true, "Controller Chanel"
						ComboBoxByNum tb & ">" & tb1 & ">" & tb2, 2, true,  true,  false,  "Pedestrian", 1, true: wait_custom  2
						Click_button "OK", objb, true, false: wait_custom 3 
						If objb.Exist Then
							Click_button "OK", objb, true, false: wait_custom 3 
						End If
						' temp untill bug fixed
					else
						'Validatedropdownlist 1, tb & ">" & tb1 & tb2 & ">", "Messages_0065"
					End If
				Next 
			End If
		Next
	Next
	
	xmlf=replace(finame, ".xml", "")
	
	xmlfilearchived=ARCHIVED_FOLDER & xmlf & DateTimeStamp & ".xml"
	
	CopyFiles xmlfi, xmlfilearchived: wait_custom 5
	
	readXMLGMG xmlfilearchived, longt, lat, "default", "false": wait_custom 5
	
	any_file = xmlfilearchived: filename= CONFIG_GMG & replace(name, "_", "") & GetDateTimeStamp & ".xml"
	
	ExportGMGXMLFile filename, true: wait_custom 3: ImportGMGXMLFile filename, false: wait_custom 3
		
	SaveAndClose false, 0, 15, false: wait_custom 5
	
	filename= CONFIG_GMG & replace(name, "_", "") & GetDateTimeStamp & ".csv"
		
	ExportDOTTABLECSVFile filename, true: wait_custom 3: 

	DeleteSensor sensorGMG, _
				null, _
				SensorDeleteConfirmMessage2(sensorGMG), xs+ws/4, ys+ws/4: wait_custom 5
	
	UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false, false, "Yes": wait_custom 5 
	
	SaveAndClose false, 0, 17, false: wait_custom 5
	
	ImportDOTTABLECSVFile filename, true: wait_custom 5 
	
	SaveAndClose  false, 0, 17, false: wait_custom 5

	ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"

	skip_start_email=true: forget_gmg=true: skip_launch=true
	
	trafficdotconnect2=replace (trafficdotconnect1, "GMG Role", "Standard Role" )
	
	Writetologfile trafficdotconnect2
		
	wait_custom 3: Repository.Value("TrafficDot2Connected")=trafficdotconnect2: wait_custom 3
	
	TrafficDotLogin name, repeat, false: forget_gmg=false: wait_custom 5
	
	If Environment("Map_File")="" then
		FileName="4x3-lanes-leftTurn.png"
	else
		FileName=Environment("Map_File")
	end if
	
	writetologfile 	Repository.Value("TrafficDot2Connected")	
	
	mapfiledir=Environment("Trafficdot2Dir") + "assets\maptemplates\"
	
	UploadMapFile mapfiledir, FileName, true: wait_custom 5

	skip_launch=false: MapButtonActivate: wait_custom 5
	
	TextBoxEdit 160, 115, "", "Name:": 	wait_custom 3: Apply_button: wait_custom "fixed10"
	
	TrafficDotSaveAndCloseXY true, 17, 17, 15
	
	Repository.Value("TrafficDot2Connected")=trafficdotconnectDEFAULT

	TrafficDotLogin name, repeat, false: wait_custom 5
	
	Set objV= VerifyList ("Sensor", sensorGMG, false): objV.Click: wait_custom 5
	
	szone="get_value": DropdownList 2, false, szone, false, objd
	
	if zoneName=szone then
		ValidationSucceeded "Export/Import GMG DOT TABLE CSV", zoneName & "=" & szone
	else
		ValidationFailed "Export/Import GMG DOT TABLE CSV", zoneName & "<>" & szone
	end if
	
	ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"

	skip_start_email=true: forget_gmg=true: skip_launch=true
	
	TrafficDotLogin name, repeat, false: forget_gmg=false: wait_custom 5
	
	zoneN = DragSensorZone ("Sensor Zone NB", -100,300, xx, yy, ww, hh, tryid): wait_custom 3
	
	zonesLIST= DropdownList (1, false, "", false, objd)
	
	if instr(1, zonesLIST, zoneName)>0 then
		ValidationSucceeded "Export/Import GMG DOT TABLE CSV", zoneName
	else
		ValidationFailed "Export/Import GMG DOT TABLE CSV", zonesLIST
	end if
	
	RevertChanges: wait_custom 7: skip_launch=false
	
	UnmapSensorZone zoneN, SensorZoneDeleteConfirmMessage(zoneN), false, false, "Yes": wait_custom 5 
	
	ClearAllConfiguredSensors: wait_custom "fixed25"
	
	SystemSave "Save_2", true, true
	
	If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_Maps_GMG = 1 		
	End If
	
	TestFinished Err.Description, name

End Function

Function ImportGMGXMLFile(byval filename, byval activatetab)
	functionstart "ImportGMGXMLFile" & " " & filename
	If activatetab Then
		MapButtonActivate: wait_custom 3
		GenericTabsSubTabs  "Intersection","", ""	
	End If
	wait_custom 3: click_button "Import GMG XML file", objb, true, false
	FileUpload "Select GMG XML file", filename, "Open", true, "Sensys Networks TrafficDOT": wait_custom 
	functionend "ImportGMGXMLFile"
End Function

Function ExportGMGXMLFile(byval filename,byval activatetab )
	functionstart "ExportGMGXMLFile" & " " & filename
	If activatetab Then
		MapButtonActivate: wait_custom 3
		GenericTabsSubTabs  "Intersection","", ""	
	End If
	wait_custom 3: click_button "Export GMG XML file", objb, true, false
	FileUpload "Save GMG XML file", filename, "Save", true, "Sensys Networks TrafficDOT": wait_custom 
	functionend "ExportGMGXMLFile"
End Function

Function ImportDOTTABLECSVFile(byval filename, byval activatetab)
	functionstart "ImportDOTTABLECSVFile" & " " & filename
	If activatetab Then
		MapButtonActivate: wait_custom 3
		GenericTabsSubTabs  "Intersection","", ""	
	End If
	wait_custom 3: click_button "Import Dot Table Csv File", objb, true, false
	FileUpload "Select dot csv to import", filename, "Open", true, "Sensys Networks TrafficDOT": wait_custom 
	functionend "ImportDOTTABLECSVFile"
End Function

Function ExportDOTTABLECSVFile(byval filename, byval activatetab)
	functionstart "ExportDOTTABLECSVFile" & " " & filename
	If activatetab Then
		MapButtonActivate: wait_custom 3
		GenericTabsSubTabs  "Intersection","", ""	
	End If
	wait_custom 3: click_button "Export Dot Table Csv File", objb, true, false
	FileUpload "Save dot table file", filename, "Save", true, "Sensys Networks TrafficDOT": wait_custom 
	functionend "ExportDOTTABLECSVFile"
End Function

Function SaveAndClose(byval yesb, byval ydelay, byval odelay, byval closeTD2)
	functionstart "SaveAndClose"
	click_button "Save", objs, true, true
	if yesb then 
		 wait_custom "fixed" & ydelay: yesbis = click_button  ("Yes", obje, true, false)
	end if
	wait_custom "fixed" & odelay: ActivateButton "OK": wait_custom "fixed7"
	If closeTD2 Then
		xbis = click_button  ("Close", obje, true, false): wait_custom "fixed15"
	End If
	functionend  "SaveAndClose"
End Function

Function SaveAndCloseXY(byval yesb, byval ydelay, byval odelay, byval closeTD2)
	functionstart "SaveAndCloseXY"
	click_button "Save", objs, true, true
	if yesb then 
		wait_custom "fixed" & ydelay: 
		clickfromconfig 415, 515
	end if
	wait_custom "fixed" & odelay: 
	clickfromconfig 340, 515: wait_custom "fixed7"
	If closeTD2 Then
		CloseTrafficDotXY: wait_custom "fixed15"
	End If
	functionend  "SaveAndCloseXY"
End Function

Function Test_Maps(byval name)

	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_Maps=0
	
	if TrafficDotLogin(name, repeat, false)<0 then
		exit function		
	End If
	
	rem test requires file > 240 mb to be present at u:/
	If Environment("Map_File_Large")="" then
		FileName="test_maps_size.jpg"
	else
		FileName=Environment("Map_File_Large")
	end if
	
	etext="Fish & Chip's"
	
	TextBoxEdit 160, 115, etext, "Name:"
	
	wait_custom 3: Apply_button: wait_custom 3
	
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	
	trafficdotconnect1=replace (trafficdotconnect, "--", ": " & etext & " --" )
	
	Writetologfile trafficdotconnect1
	
	wait_custom 3: Repository.Value("TrafficDot2Connected")=trafficdotconnect1: wait_custom 3
	
	UploadMapFile CONFIG_JPG, FileName,  false: wait_custom "fixed7"
	
	ValidateMapsSizeLimit FileTooLargeMessage (FileName): wait_custom 7
	
	If Environment("Map_File")="" then
		FileName="4x3-lanes-leftTurn.png"
	else
		FileName=Environment("Map_File")
	end if
	
	mapfiledir=Environment("Trafficdot2Dir") + "assets\maptemplates\"
	
	'C:\Program Files (x86)\TrafficDOT2\assets\maptemplates\ 4x3-lanes-leftTurn.png
	
	UploadMapFile mapfiledir, FileName, true
			
	MapLoads: wait_custom 3		
	
	ImageOpacity 5, false: wait_custom 3
	
	printscreen name: wait_custom 3
	
	ImageOpacity 5, true: wait_custom 5
	
	printscreen name: wait_custom "fixed7": 
	
	TextBoxEdit 160, 115, "", "Name:": 	wait_custom 3: Apply_button: wait_custom 3
	
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
	
	SystemSave "Save_2", false, true
	
	If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_Maps = 1 		
	End If
	
	TestFinished Err.Description, name

End Function

Function MapLoads()
	functionstart "MapLoads"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Sensor Zone EB").WaitProperty "name", _
				"Sensor Zone EB", 2000
	functionend "MapLoads"				
End Function

Function ValidateMapsSizeLimit (byval emessage)
	functionstart "ValidateMapsSizeLimit"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("big_file")
	If obj.Exist Then
		cmessage=obj.GetROProperty("name")
		assertStringEquals cmessage,  emessage, "ValidateMapsSizeLimit", "": wait_custom 3
		ActivateOKbutton: wait_custom 3
	else
		ValidationFailed "ValidateMapsSizeLimit", "Message not found"
	End If
	functionend "ValidateMapsSizeLimit"
End Function

Function FileTooLargeMessage(byval filename)
	functionstart "FileTooLargeMessage"
	Dim params(0)
	params(0)=filename
	FileTooLargeMessage=MessagesParamsSet ("Messages_0033", params)			
	functionend "FileTooLargeMessage"
End Function

Function ImageOpacity (byval iStrength, byval darker)
	strplus="lighter": If darker Then strplus="darker"
	functionstart "ImageOpacity" & "->" & strplus
	If iStrength<15 Then
		iStrength=15
	End If
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIASlider("Image Opacity").UIAObject("Thumb")
	GetObjectABSXYWH "Image Opacity: Thumb", obj, x, y, h, w: xt=x+w/2
	Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIASlider("Image Opacity")
	GetObjectABSXYWH "Image Opacity", obj1, x1, y1, h1, w1
	clickx=x1+iStrength: deltax=x1
	If darker Then
		clickx=x1+w1-iStrength
		deltax=x1+w1
	end if
	mouseclick clickx, y1+h1/2, false: wait_custom 1
	GetObjectABSXYWH "Image Opacity", obj, x, y, h, w: xt=x+w/2
	ActivateButton "Apply": wait_custom 3
	functionend "ImageOpacity"
End Function

Sub PrtScreen()
	if ActivateButton ("PrtScr")>0 then
		wait_custom 5
	else
		clickfromconfig 580, 8 
	end if
End Sub

Function printscreen (byval filename)
	functionstart "printscreen"
	testname=filename
	filename= PRINT_SCREENS & lcase(replace(filename, "_", "")) & GetDateTimeStamp
	PrtScreen: FileUpload "Save print screen image", filename, "Save", true, "Sensys Networks TrafficDOT": wait_custom 3
	If prtscreen_file_name="" Then
		prtscreen_file_name=filename & ".png"
	else
		prtscreen_file_name1=filename & ".png"
	End If
	test_status_d=TEST_STATUS_FINISHIGN_SOON		
	db_TestRunsAddUpdate testname, test_run_db_id, true
	functionend "printscreen"
End Function

Function Test_PrintScr(byval name)

	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_PrintScr=0

	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function	
	end if
	
	printscreen name: wait_custom "fixed7": SystemSave "", false, true
	
	If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_PrintScr = 1 		
	End If
	
	TestFinished Err.Description, name

End Function

Function Test_RLE_Basics (byval name)
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_RLE_Basics=0
	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function	
	end if
	ValidateButtons "RLE", "Gateway:",  true, false, "Messages_0046"
	ValidateButtons "RLE", "Sensor:",  true, false, "Messages_0049"
	Sensors=SensorsSetup: MSensors=MicroradarsSetup
	printscreen name: wait_custom 3
	ActivateButton "Configure": wait_custom 5
	RLEDialogValidation Sensors, MicroradarsSetup: wait_custom 3
	ActivateButton "Do not configure": wait_custom "fixed7"
	CloseTrafficDot
	If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_RLE_Basics = 1 		
	End If
	TestFinished Err.Description, name
End Function

Function RLEDialogValidation(byval SensorsArray, byval MSensorsArray)
	str1=Join(SensorsArray, ",")
	str2=Join(MSensorsArray, ",")
	functionstart "RLEDialogValidation" & " " & str1 & str2
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Clicking 'Configure' will")
	If obj.Exist Then
		ValidationSucceeded "RLEDialogValidation", ""
		names=obj.GetROProperty("name")
	else
		ValidationFailed "RLEDialogValidation: Dialog", "Configuration Dialog not Active"
		functionend "RLEDialogValidation"	
		Exit function
	End If
	For n = 1 To ubound(SensorsArray) Step 1
		If instr(1, names, SensorsArray(n-1))>0 Then
			ValidationSucceeded "RLEDialogValidation: Sensor", SensorsArray(n-1)
		else
			ValidationFailed "RLEDialogValidation: Sensor ", SensorsArray(n-1) & " not found"
		End If
	Next
	For n = 1 To ubound(MSensorsArray) Step 1
		If instr(1, names, MSensorsArray(n-1))>0 Then
			ValidationSucceeded "RLEDialogValidation: MicroradarSensor", MSensorsArray(n-1)
		else
			ValidationFailed "RLEDialogValidation: Microradar Sensor ", MSensorsArray(n-1) & " not found"
		End If
	Next
	functionend "RLEDialogValidation"
End Function

Function TestCaseSetup(name)
	functionstart "TestCaseSetup"
	environment.LoadFromFile env_path_changed
	UIAWindow("Sensys Networks TrafficDOT").SetTOProperty "abs_x", 300
	UIAWindow("Sensys Networks TrafficDOT").SetTOProperty "abs_y", 9
	functionend "TestCaseSetup"
End Function

Function DoTrafficDot2Setup (byval name, byval alternative)	
		functionstart "DoTrafficDot2Setup"
		no_db_step_update=true: TestComputerName: TestComputerIPAddress: no_db_step_update=false
		DoTrafficDot2Setup=0
		db_connect "", ""
		app_install=true: ver_check=false ' works with auto install only'
		
		apeg=db_GatewayActiveSearch()
		

		apegalt=db_GatewayAlternativeSearch(apeg)
		
		If apeg<>"" Then
			env_path_changed=ENVIRONMENT_PATH_GWY + "environment_" & apeg & ".xml"
			environment.LoadFromFile env_path_changed
			WriteToLogfile "Active environment: " & env_path_changed
			if not isnull(apegalt) then
				if db_ConfigurationLock ("",  apegalt)=1 then
					configuration_locked=true
				else
					env_path_changed_alt=ENVIRONMENT_PATH_GWY + "environment_" & apegalt & ".xml"
				end if
			end if
			If alternative Then
				environment.LoadFromFile env_path_changed_alt
				WriteToLogfile "Active environment(alt): " & env_path_changed_alt
			End If	


			db_ConfigAdd apeg
		elseIf connect_error Then
			environment.LoadFromFile ENVIRONMENT_PATH
			env_path_changed=ENVIRONMENT_PATH
			WriteToLogfile "Active environment: " & env_path_changed
		else
			environment.LoadFromFile ENVIRONMENT_PATH
			env_path_changed=ENVIRONMENT_PATH
			WriteToLogfile "Active environment: " & env_path_changed
		End If
		
		winscp_path=Environment("WinSCP_Install_Path")
		test_case_try_number=Environment("TestCaseTryNumber")
		sensor_wait_factor=Environment("SensorWaitFactor")
		ipaddress = Environment("IPaddress")
		tcpport = Environment("TCPport")	
		apname = Environment("APname")
		apid = Environment("APid")
		fourteenpoint2 = Environment("Release_14_2")
		tdrole = Environment("TrafficDot2Role")
		AP = Environment("AP")
		APRadio_0 = Environment("APRadioCh0")
		APRadio_1 = Environment("APRadioCh1")
		controller_emea= Environment("Controller_EMEA")
		
		buildid="Name"
		
		db_BuildIDSearch buildid
		
		db_GatewayAdd ipaddress, apname
		
		buildversion=buildid
			
		If instr(1, buildversion, "14.2")>0 Then
			verruntime142=true
		End If
		
		If alternative Then
			fourteenpoint2=""
		End If
		
		ap_type_code=AP

		
		If lcase(fourteenpoint2)="yes" or verruntime142 Then

		else	
			SetupAPCodes AP, apid
		End If
		
		If lcase(Environment("OfflineMode"))="on" Then
			trafficdotconnect="Sensys Networks TrafficDOT 2 - (Offline - default) -- Standard Role"
			ipaddress="OffLine"
			apname="n/a"
		else
			trafficdotconnect = "Sensys Networks TrafficDOT 2 - "+AP+"  "+_
							apname+" "+"("+ipaddress+":"+tcpport+")"+_
							" -- "+_
							tdrole+" Role"
		End If 
				
		setup_info=ipaddress & vbnewline &_
					apname & vbnewline &_
					tdrole
				
		ReDim f_Tests(-1)
					
		Set oShell = CreateObject("WScript.Shell") 
		Set oExec = oShell.Exec("whoami") 
		
		user = oExec.StdOut.ReadLine
		user = trim(mid (user, instr(1, user, "\")+1))
		
		xml_files_path="C:\Users\"+user+"\.trafficdot2\"+ipaddress+"."+tcpport+"\"+apid
				
		Repository.Value("TrafficDot2Connected")=trafficdotconnect: wait_custom 3
		
		ReDim array_group_tests(-1)
		ReDim tarray_global(-1)
		ReDim test_case_errors(-1)
		
		if EnabledGroups(egroups)>1 Then
		eegroups = split(egroups, " ")
			if lcase(Environment.value("Auto_"))<>"on" then
				For vv = 0 To ubound(eegroups) 
					addt=addt + vbnewline + eegroups(vv)
				Next
				msgbox "1 Group of tests can be run at a time. " & _
						"Enable one group only in environment.xml" & vbnewline & _
						addt
				ExitRun
			Else
				group_test_all=true
			end if
		end if
		
		db_NodeAdd computer_name, computer_ip_address

		TestMe: ForceCloseTD2: wait_custom 3
		
		functionend "DoTrafficDot2Setup"
End Function

sub SetupAPCodes(byref AP, byval apid)
	functionstart "SetupAPCodes"
	If instr(1, lcase(apid), lcase(AP_ID))>0 Then
		AP= "AP240"
		rf_channels_code="AP"
	ElseIf instr(1, lcase(apid), lcase(AP2_ID))>0 Then
		AP= "AP240"
		rf_channels_code="AP"
	ElseIf instr(1, lcase(apid), lcase(APMINI_ID))>0 Then
		AP= "FlexControl"
		rf_channels_code="FC"
	ElseIf instr(1, lcase(apid), lcase(FLEX_AP_ID))>0 Then
		AP= "FlexAP"
		rf_channels_code="FAP"
	ElseIf instr(1, lcase(apid), lcase(APCC_ID))>0 Then
		AP= "APCC"
		rf_channels_code="APCC"
	End If	
	ap_type_code=AP
	functionend "SetupAPCodes" & " " & AP
end sub

Sub readXML (byval filename, byval sensorZone, byval tagname, byval tagval)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if
		
		Select Case filename
			Case "sensorZonesUI.xml"
				strQuery = "/sensorZones/item/ ( abbreviation | " + tagname + "  )"
			Case "sensorZoneTypeMapping.xml"
				readXML1 filename, sensorZone, tagval: exit sub
		End Select
		
		functionstart "readXML" & " " & filename	
		
		Set objXMLDoc = CreateObject("Microsoft.XMLDOM") 
				
		xmlfi = xml_files_path + "\" + filename
		
		xmlf=replace(filename, ".xml", "")
		
		xmlfilearchived=ARCHIVED_FOLDER & xmlf & DateTimeStamp & ".xml"
		
		CopyFiles xmlfi, xmlfilearchived
		
		objXMLDoc.async = False: objXMLDoc.load(xmlfilearchived): wait_custom 5
		
		Set colNodes = objXMLDoc.selectNodes( strQuery )
	
		For Each objNode in colNodes
			If (n mod 2)= 0 then 
				assertStringEquals sensorZone(b), objNode.text, sensorZone(b) & ":" & objNode.text, "readXML": b=b+1
				writetologfile "000" & cstr(n)
			else
				assertStringEquals tagval(b-1), objNode.text, tagname & ">" & tagval(b-1) & ":" & objNode.text, "readXML"
				writetologfile "000" & cstr(n)
			End If
			n=n+1
		Next
		any_file = xmlfilearchived
		functionend "readXML" & " " & xmlfilearchived
end sub

Sub readXMLGMG (byval filename, byval longt, byval lat, byval name, byval emitsPD)
	functionstart "readXMLGMG" & " " & filename		
	Set objXMLDoc = CreateObject("Microsoft.XMLDOM") 	
	
	objXMLDoc.async = False : objXMLDoc.load(filename): wait_custom "fixed7"
	
	str= objXMLDoc.xml: wait_custom 5
	
	strin=	"ssid="+ """" + name + """" + " emitsPhaseData=" + """" + _
				emitsPD + """" + " centerLat=" + """" + lat + """" + " centerLon=" + """" + longt + """"
	
	If instr(1, str, strin)> 0 Then
		ValidationSucceeded "readXMLGMG", strin
	else
		ValidationFailed "readXMLGMG", strin & ">xml: " & str
	end if
	functionend "readXMLGMG"	
End Sub


Sub readXML2 (byval filename, byval sensorZoneType,  byref szid)
		
		functionstart "readXML2" & " " & filename
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if
		
		Set objXMLDoc = CreateObject("Microsoft.XMLDOM") 
				
		xmlfi = xml_files_path + "\" + filename
		
		xmlf=replace(filename, ".xml", "")
		
		xmlfilearchived=ARCHIVED_FOLDER & xmlf & DateTimeStamp & ".xml"
		
		CopyFiles xmlfi, xmlfilearchived
		
		objXMLDoc.async = False : objXMLDoc.load(xmlfilearchived)
	
		str= objXMLDoc.xml
		strin=	"sensorZoneType id=" & """" & szid & """" & " desc=" & """" & sensorZoneType & """" 

		If instr(1, str, strin)> 0 Then
		else
			szid="-1"
		end if
		If Err.Number <> 0 Then
			ValidationFailed "readXML2: " & Err.Description, "file: " & filename
		End If 
		
		any_file = xmlfilearchived
		
		functionend "readXML2" & " " & xmlfilearchived
end sub

Function DeleteFile(byval filename)
	functionstart "DeleteFile" & " " & filename
	Set objFSO = CreateObject("Scripting.FileSystemObject") 
	If objFSO.FileExists(filename) Then 
		objFSO.DeleteFile filename
		deleted="file deleted"
	End If 
	functionend "DeleteFile" & " " & deleted
End Function

function CopyFiles(byval file1, byval file2)
	functionstart "CopyFiles " & file1 & "-->" & file2
	Set objFSO=CreateObject("Scripting.FileSystemObject")
	If (objFSO.FileExists(file1)) Then
		objFSO.CopyFile file1, file2, false: wait_custom "fixed3"
	Else	
		ValidationFailed "CopyFiles", "File not found: " & file1
	End If
	functionend "CopyFiles"
end function

Sub readXML1 (byval filename, byval sensorZone,  byval tagval)
		functionstart "readXML1" & " " & filename
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if

		Set objXMLDoc = CreateObject("Microsoft.XMLDOM") 
		
		xmlfi = xml_files_path + "\" + filename
		
		xmlf=replace(filename, ".xml", "")
		
		xmlfilearchived=ARCHIVED_FOLDER & xmlf & DateTimeStamp & ".xml"
		
		CopyFiles xmlfi, xmlfilearchived

		objXMLDoc.async = False: objXMLDoc.load(xmlfilearchived)
	
		str= objXMLDoc.xml
		For n=0 to  UBound(sensorZone)
			If lcase(tagval(n)) = SENSOR_ZONE_TYPE_STOP_BAR Then
				idcode= right(sensorZone(n), len(sensorZone(n))-10)
				idcode = cInt(idcode)+1
				sensorZone(n)=sensorZone(n)+"S0"
			else
				idcode= right(sensorZone(n), len(sensorZone(n))-10)
			End If	

			strin = "sensorZone name=" & """" & sensorZone(n) & """" & " id=" &_
					"""" & idcode & """" & " type=" & """" & tagval(n) & """"
			If instr(1, str, strin)> 0 Then
				ValidationSucceeded "readXML1", filename
			else
				ValidationFailed "readXML1", "file: " & filename & ":" & strin			
			End If
		Next
		If Err.Number <> 0 Then
			ValidationFailed "readXML1: " & Err.Description, "file: " & filename & ":" & strin
		End If 
		
		any_file = xmlfilearchived
		
		functionend "readXML1" & " " & xmlfilearchived
end sub

Sub sensmetricssetup
	role_last="SensMetrics"
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	trafficdotconnect=replace (trafficdotconnect, "Standard", role_last)
	setup_info=replace (setup_info, "Standard", role_last)
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
End Sub

Sub parkingsetup
	role_last="Parking"
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	trafficdotconnect=replace (trafficdotconnect, "Standard", role_last)
	setup_info=replace (setup_info, "Standard", role_last)
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
End Sub

Sub gmgsetup
	role_last="GMG"
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	trafficdotconnect=replace (trafficdotconnect, "Standard", role_last)
	setup_info=replace (setup_info, "Standard", role_last)
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
End Sub

Sub rlesetup
	role_last="RLE"
	no_config_button=true
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	trafficdotconnect=replace (trafficdotconnect, "Standard", role_last)
	setup_info=replace (setup_info, "Standard", role_last)
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
End Sub

Sub EMEASetup
	role_last="EMEA"
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	trafficdotconnect=replace (trafficdotconnect, "Standard", role_last)
	setup_info=replace (setup_info, "Standard", role_last)
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
End Sub

Sub TD2RoleSetup(byval rolename, byref trafficdotconnect, byval globalrolelast)
	functionstart "TD2RoleSetup" & " " & rolename
	rolesubstitue="Standard"
	
	if last_role_before_reboot<>"" then rolesubstitue=last_role_before_reboot
	
	if globalrolelast then role_last=rolename
	
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	WriteToLogfile "<-" & trafficdotconnect

	if globalrolelast then
		Writetologfile "globalrolelast: true"
		if instr(1,trafficdotconnect, rolesubstitue )>0 then
		Else
			Writetologfile "rolesubstitue: Standard"
			rolesubstitue="Standard"
		end if
		trafficdotconnect=replace (trafficdotconnect, rolesubstitue, rolename)
		setup_info=replace (setup_info, rolesubstitue, rolename)
	else
		Writetologfile "globalrolelast: false"
		trafficdotconnect=replace (trafficdotconnect, role_last, "Standard")
		setup_info=replace (setup_info, role_last, "Standard")
	End If 
	If rolename<>last_role_before_reboot Then
		last_role_before_reboot=""
	End If
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
	WriteToLogfile "->" & trafficdotconnect
	functionend "TD2RoleSetup"
End Sub


Sub STOPBARSetup
	role_last="Stop Bar"
	trafficdotconnect=Repository.Value("TrafficDot2Connected")
	trafficdotconnect=replace (trafficdotconnect, "Standard", role_last)
	setup_info=replace (setup_info, "Standard", role_last)
	Repository.Value("TrafficDot2Connected")=trafficdotconnect
End Sub

Sub IdleForTenMinutes()
	functionstart "IdleForTenMinutes"
	min=10: sec=min*60
	mult=2: l=sec/mult
	Do while n<l
		wait_custom mult: n=n+1
	loop
	functionend "IdleForTenMinutes"
end sub

Function DownloadAndReadBuildFile()

	functionstart "DownloadAndReadBuildFile"
	
	Set Fso = CreateObject("Scripting.FileSystemObject")
	Set objShell = CreateObject ("WScript.shell")
		
	buildfile = "TrafficDOT2-latest-build.txt"
	
	filef="c:\temp": filepath = filef + "\" + buildfile
	
	' old pwd sen&9sys
	runcommand = "pscp.exe -r -P 8881 -pw " & PUTTY_PASSWORD & " " & PUTTY_USER & "@192.168.2.3:/tftpboot/"+buildfile + "  " + filef
	
	objShell.run runcommand
	Set objShell = Nothing
	
	wait_custom "fixed10"
	
  	If Fso.FileExists(filepath) Then
		Set objInputFile = Fso.OpenTextFile(filepath,1)
	else
		functionend "DownloadBuildFile"
		Exit function
    End If
    
	Do until objInputFile.AtEndofStream
		strline = objInputFile.ReadLine
	Loop
	
	objInputFile.Close
	
	Fso.DeleteFile filepath
	
	td2folder= filef + "\" + strline+"\": build_string = strline

	exists = Fso.FolderExists(td2folder)

	if (exists) then 
		new_build_number=""
	else
	    new_build_number = strline	
	end if
	
	functionend "DownloadAndReadBuildFile" & " " & new_build_number
	
End Function

Function DownloadTD2()
	
	DownloadAndReadBuildFile
	
	Set Fso = CreateObject("Scripting.FileSystemObject")
	Set objShell = CreateObject ("WScript.shell")

	if new_build_number<>"" then
		buildfolder = new_build_number
	else
		buildfolder = Environment("Build_ID")
		if buildfolder="" Then
			exit Function
		end if
	end if
	
	td2folder="C:\temp\"+buildfolder+"\"
	
	exists = fso.FolderExists(td2folder)

	if (exists) then 
	    Exit function
	elseIf instr(1, buildfolder, "666")>0 Then
		Exit function
	end if
	
	functionstart "DownloadTD2"
	
	downloadcmd="pscp.exe -r -P 8881 -pw " & PUTTY_PASSWORD & " " & PUTTY_USER & "@192.168.2.3:/tftpboot/"+buildfolder + "  c:\temp"
	
	'copy files for gmg
	'pscp.exe -r -P 8881 -pw 4nyt4ing dkhomikh@192.168.2.3:/tftpboot/RELEASE.apgmg_4_0_0_2/apmini/apgmg_4.0.0.2_arm.ipk.gpg c:/temp
	
	downloadcmdnopassword = replace (downloadcmd, PUTTY_PASSWORD, "******")
	
	WriteToLogfile downloadcmdnopassword: objShell.run downloadcmd: Set objShell = Nothing
	
	wait_custom "fixed30"
	
	exists = fso.FolderExists(td2folder)

	if (exists) then 
		td_exec_path=td2folder
		app_install=false: install_is_next=true	
		build_new_folder=buildfolder
		
		fourteenpoint2 = Environment("Release_14_2")
		apid = Environment("APid")
		AP412 = Environment("AP")
		
		SetupAPCodes AP, apid
		
		trafficdotconnect=Repository.Value("TrafficDot2Connected")
		If lcase(fourteenpoint2)="yes" and (instr(1, buildfolder, "14_3")>0) Then
			trafficdotconnect=replace(trafficdotconnect, AP412, AP)
			Repository.Value("TrafficDot2Connected")=trafficdotconnect	
		elseif lcase(fourteenpoint2)="no" and (instr(1, buildfolder, "14_2")>0) Then
			trafficdotconnect=replace(trafficdotconnect, AP, AP142)
			Repository.Value("TrafficDot2Connected")=trafficdotconnect	
		End If	
	else
		WriteToLogFile "DownloadTD2 was not successul. Try again or install new build manually"
	end if

	functionend "DownloadTD2" & " " & td_exec_path
	
End Function

Function FilesComparePNG( byval repofile , byval runtimefile)
	functionstart "FilesComparePNG"
	Set objMercuryFilecompare = CreateObject("Mercury.FileCompare")
	if objMercuryFilecompare.IsEqualBin( repofile , runtimefile , 0,1) Then
		FilesComparePNG = true
	else
		FilesComparePNG = false
	end if
	Set objMercuryFilecompare = nothing
	functionend "FilesComparePNG"
End Function

function DiscoverModeOnEMEA()
	If discover_mode_found Then
		Exit function
	End If
	functionstart "DiscoverModeOnEMEA"
	click_button "Discover Mode", obj, false, true
	filename = "u:\archived\discover" & GetDateTimeStamp & ".png"
	obj.CaptureBitmap filename
	discoveron = FilesComparePNG ("u:\repo\discover_on.png", filename)
	If discoveron Then
		ValidationSucceeded "DiscoverModeOnEMEA", "Discover Mode is On"
 		discover_mode_found=true
	Else
		ValidationFailed "DiscoverModeOnEMEA", "Discover Mode is Off"
	end if
	functionend "DiscoverModeOnEMEA"
end function

Function discoverModeOnOff (byref onoff)
	functionstart "discoverModeOnOff" & "->" & onoff
	existmode=onoff
	click_button "Discover Mode", obj, false, true
	filename = "u:\archived\discover" & GetDateTimeStamp & ".png"
	obj.CaptureBitmap filename: wait_custom 3
	discoveron = FilesComparePNG ("u:\repo\discover_on.png", filename): wait_custom 3
	discoveroff = FilesComparePNG ("u:\repo\discover_off.png", filename): wait_custom 3
	If existmode = "on" and discoveron Then
		onoff="on"
	elseif existmode = "off" and discoveron Then
		onoff="on"
	elseif existmode = "on" and discoveroff Then
		onoff="off"
	End If
	If existmode<>onoff  Then
		click_button "Discover Mode", obj, true, true
		switched = "->switched"
	End If	
	wait_custom "fixed15"
	functionend "discoverModeOnOff" & " " & switched
End Function

Function test_MESSAGES (byval messageid)
	Set xmlDoc = _
	CreateObject("Microsoft.XMLDOM")
	xmlDoc.Async = "False"
	xmlDoc.Load(MESSAGES_PATH)
	Set NodeList = xmlDoc.getElementsByTagName("Variable")   
	For Each Elem In NodeList   
		Set name = Elem.getElementsByTagName ("Name") (0)  
		Set message = Elem.getElementsByTagName ("Value") (0)  
		If messageid=name.Text Then
			test_MESSAGES=message.text 
			Writetologfile  name.Text & " " & message.text
			Exit for
		End If
	Next  
End Function

Function test_ACTION (byval testName)
	Set xmlDoc = _
	CreateObject("Microsoft.XMLDOM")
	xmlDoc.Async = "False"
	xmlDoc.Load(TESTS_PATH)
	Set NodeList = xmlDoc.getElementsByTagName("ROW")   
	For Each Elem In NodeList   
		Set name = Elem.getElementsByTagName ("Name") (0)  
		Set action = Elem.getElementsByTagName ("Run") (0)  
		If testName=name.Text Then
			test_ACTION=action.text 
			Exit for
		End If
	Next  
End Function 
	
Sub TestMe()


'TD2ROLESETUP "EMEA", yyyy, true: role_c="EME"




'GatewayIDGet GWMODEL, triggered



rem 	TD2ROLESETUP "GMG", yyyy, true: role_c="GMG"



rem nameTestCaseTest "Test_Sensor_Zone_Names" 

		
End Sub

Sub AllTestsFinished
	functionstart "AllTestsFinished"
	db_NodeUpdate computer_name, NODE_STATUS_AVAILABLE
	objFile.Close
	objFileF.Close
End Sub

function SensorPostionName(byval name)
	if isNumeric(name) then
		Select case name
		case "1"
			SensorPostionName="Lead(0)"
		case "2"
			SensorPostionName="Trail(1)"
		case "3"
			SensorPostionName="Trail(2)"
		case "4"
			SensorPostionName="Trail(3)"
		case "0"
			SensorPostionName="none"
		case "-1"
			SensorPostionName="Disabled"
		end select 
	else
		SensorPostionName=name
	end if 
end function

function SensorHPostionName(byval name)
	if isNumeric(name) then
		Select case name
		case "1"
			SensorHPostionName="Right(1)"
		case "2"
			SensorHPostionName="Mid-Right(2)"
		case "3"
			SensorHPostionName="Far-Right(3)"
		case "-3"
			SensorHPostionName="Far-Left(-3)"
		case "-2"
			SensorHPostionName="Mid-Left(-2)"
		case "-1"
			SensorHPostionName="Left(-1)"
		case "0"
			SensorHPostionName="Center(0)"
		end select 
	else
		SensorPostionHName=name
	end if 
end function


Sub SensorVerticalPositionChange(byval nameStringOrInt, byval applyc)
	functionstart "SensorVerticalPositionChange" & " " & SensorPostionName(nameStringOrInt)
	wait_custom 1: current = UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("*Vertical Position:").GetROProperty("value")
	If current="Lead(0)" and nameStringOrInt=1 Then
		functionend "SensorVerticalPositionChange"	
		Exit sub
	End If
	ClickFromConfig 90, 370 'descr
	SendKeysShellTimes "{UP}",	7,1
	Select Case nameStringOrInt
		Case "Lead", 1
 		 	SelectItem 2 'Lead(0)
		Case "Trail1", 2
			SelectItem 3
		Case "Trail2", 3
			SelectItem 4
		Case "TRail3", 4
			SelectItem 5
		Case "Select", 0
			' to do SelectItem 5
		Case "Disabled", -1
			SelectItem 1
        Case "none"
	End Select
	If applyc Then
		ApplyChanges: wait_custom 3
	End If
	functionend "SensorVerticalPositionChange"	
End Sub

Sub MoveKeyDown (byval upTimes)
	functionstart "MoveKeyDown"
	For i = 1 To upTimes Step 1
   		SendKeysShell "{DOWN}", 2
    Next
	functionend "MoveKeyDown"   
End Sub

Sub SensorHorizontalPositionChangeA (byval nameNum, byval applyc)
	functionstart "SensorHorizontalPositionChangeA" & " " & SensorHPostionName(nameNum)
	For n = 1 To 2 Step 1
		ClickFromConfig 969-839-25, 319-39+30+34: wait_custom 3
	Next
	Select Case nameNum
   			Case -3
     		 	MoveKeyDown 1 
  			Case -2
				MoveKeyDown 2
   			Case -1
    			MoveKeyDown 3
  			Case 0
  				MoveKeyDown 4
    		Case 1
  				MoveKeyDown 5
   			Case 2
  				MoveKeyDown 6
    		Case 3
  				MoveKeyDown 7
	End Select
	If applyc Then
		ApplyChanges: wait_custom 3
	End If
	functionend "SensorHorizontalPositionChangeA"
End Sub

Sub ChangeSensorZoneA (byval currentZoneName, byval selectorid, byval applyc)
	functionstart "ChangeSensorZoneA" & " " & currentZoneName & "-->" & selectorid
	Dim aRuntime(), itemN
	DropdownList "Change to:", false, "Change sensor zone", false, obj
	Set itms=obj.GetItems: ReDim aRuntime(itms.Count-1)
	For rowCount = 1 To itms.Count
		itmname=(itms.item(rowCount))
		If itmname=selectorid Then
			itemN=rowCount
		End If
		aRuntime(rowCount-1)=itmname	
	Next
	For n = 1 To 2 Step 1
		obj.Click:wait_custom 3
	Next
	MoveKeyDown itemN: wait_custom 3
	value = obj.GetROProperty ("value")
	If value="" Then
		Oops "", tryid
		If tryid<2 Then
			ChangeSensorZoneA currentZoneName, selectorid, applyc: resetTryid: exit sub
		End If
	End If
	If applyc Then
		Click_button "Apply", obj1, true, false: wait_custom 3
	End If
	functionend "ChangeSensorZoneA" 
End Sub

Sub SensorHorizontalPositionChange (byval nameNum, byval applyc)
	functionstart "SensorHorizontalPositionChange" & " " & SensorHPostionName(nameNum)
	ClickFromConfig 969-839-25, 319-39+30+34 'descr
	Select Case nameNum
   			Case -3
     		 	SelectItem 1 
  			Case -2
				SelectItem 2
   			Case -1
    			SelectItem 3
  			Case 0
  				SelectItem 4
    		Case 1
  				SelectItem 5
   			Case 2
  				SelectItem 6
    		Case 3
  				SelectItem 7
	End Select
	If applyc Then
		ApplyChanges: wait_custom 3
	End If
	functionend "SensorHorizontalPositionChange"
End Sub

Sub ChangeZoneName (newname)
	functionstart "ChangeZoneName" & " " & newname
	ClickFromConfig 140, 230: ClearTextBoxAll: SendKeysShell newName,1: wait_custom 2
	functionend "ChangeZoneName"
End Sub

Function channelsSetup(byref spp1, byref spp0)
	functionstart "channelsSetup"
	set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIAObject("SPP-1: 14")
	set obj0 = UIAWindow("Sensys Networks TrafficDOT").UIAObject("SPP-0: 5")
	spp1= trim(replace(obj1.GetROProperty("name"), "SPP-1:", ""))
	spp0= trim(replace(obj0.GetROProperty("name"), "SPP-0:", ""))
	functionend "channelsSetup" & "ssp-0:" & spp0 & " spp-1:" & spp1
End Function

Sub ClearTextBoxAll
	functionstart "ClearTextBoxAll"
	With CreateObject("WScript.Shell")
		.Run "nircmd sendkeypress ctrl+home":wait_custom 1
		.Run "nircmd sendkeypress delete"
		.Run "nircmd sendkeypress shift+ctrl+end": wait_custom 1
		.Run "nircmd sendkeypress delete"
	End With
	functionend "ClearTextBoxAll"
End Sub

Sub CopyTestResults
	functionstart "CopyTestResults"
	Dim strResultsFolder, strDestinationFolder
	strResultsFolder = Reporter.ReportPath
	strDestinationFolder = "C:\MyPath\Results_" & GetDateTimeStamp()
	RunProgram "cmd", "/C XCOPY /E /Y /S /E /H /T " & strResultsFolder & Space(1) & strDestinationFolder
	functionend "CopyTestResults"
End Sub

Sub SensorZoneTypeActivate()
	functionstart "SensorZoneTypeActivate"
	UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("SensorTypeSelect").Click
	functionend "SensorZoneTypeActivate "
End Sub

Sub SensorZoneTypeChange (byval ZoneType, byval aChanges)
	functionstart "SensorZoneTypeChange" & " " & ZoneType
	SensorZoneTypeActivate: wait_custom 3
	Select Case ZoneType
		Case "Speed"
		 	SelectItem 3 
		Case "Count"
			SelectItem 1
		Case "Microradar"
			SelectItem 2
		Case "Stop Bar"
			SelectItem 4
		Case "Travel Time"
			SelectItem 5
	End Select
	If aChanges Then
		wait_custom 3: ApplyChanges
	End If
	functionend "SensorZoneTypeChange"
End Sub

Sub ChangeSensorZoneArrowType (arrowName, byval aChanges)
	functionstart "ChangeSensorZoneArrowType " & arrowName 
	Repository.Value("ArrowName")=arrowName
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Arrows").Click
	If aChanges Then
		wait_custom 3: ApplyChanges
	End If
	functionend "ChangeSensorZoneArrowType"
End Sub

Sub SensorZoneDimensions(byref szwidth, byref szheight)
	functionstart "SensorZoneDimensions"
	Set obj = ActivateSensorZoneO: wait_custom 1
	szwidth = obj.GetROProperty ("width")
	szheight = obj.GetROProperty("height")
	functionend "SensorZoneDimensions"
End Sub

Function DragSensorZone (byval zoneTypeType, byval xa, byval ya, byref xx, byref yy, byref ww, byref hh, byref tryid)
		If tryid="" Then tryid=1
		
		on error resume next
		
		If x_fscreen=0 Then
			x_fscreen=GenericButtonXGet("Fullscreen")
			y_fscreen=GenericButtonYGet("Fullscreen")	
		End If
		
		szx = x_fscreen+xa: szy=y_fscreen+ya
		
		set objz = UIAWindow("Sensys Networks TrafficDOT").UIAButton(zoneTypeType): wait "fixed10"
		
		If objz.Exist Then
			DragAndDrop objz, "", "", szx, szy, "sensor zone"
		else
			oops "sensor zone", tid
			For n = 1 To 2 Step 1
				click_button "Config", obj, true, false: wait_custom 1
			Next
			If tid<2 Then
				DragSensorZone zoneTypeType, xa, ya, xx, yy, ww, hh, tryid : resetTryid:exit function
			else
				functionend "DragSensorZone ": ExitRun
				Exit function 
			End If
		End If
	
		zoneName=UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Required Field Name: Required").GetROProperty ("value")
		
		functionstart "DragSensorZone" & " " & zoneTypeType & " " & zoneName
		
		Repository.Value("sensorZoneName")=zoneName
		Repository.Value("UseNewZone")="Use new (" & zoneName & ")"
		
		DragSensorZone=zoneName: test_status_d=TEST_STATUS_IN_PROGRESS
			
		db_TestRunsAddUpdate test_case_name, test_run_db_id, true
		
		if err.number>0 Then
			if tryid<2 then
				oops "", tid
				For n = 1 To 2 Step 1
					click_button "Config", obj, true, false: wait_custom 1
				Next
				tryid=tryid+1
				DragSensorZone zoneTypeType, xa, ya, tryid: : resetTryid:exit function
			end if
		end if
		xx=UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone").GetROProperty("x")
		yy=UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone").GetROProperty("y")
		ww=UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone").GetROProperty("width")
		hh=UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone").GetROProperty("height")
		functionend "DragSensorZone " & zoneName & " " & x_fscreen+xa & " " & y_fscreen+ya & " " & "xywh" & xx & yy & ww & hh
End Function

Function SetSensorZoneObj(byval szname, byref szset, byref sx, byref sy, byref sh, byref sw)
		functionstart "SetSensorZoneObj" & " " & szname
		Repository.Value("sensorZoneName")=szname
		Repository.Value("UseNewZone")="Use new (" & szname & ")"
		Set SetSensorZoneObj=UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone")
		If SetSensorZoneObj.Exist Then
			szset=true: szsetstr="sensor zone set"
			sx=SetSensorZoneObj.GetROProperty("abs_x")
			sy=SetSensorZoneObj.GetROProperty("abs_y")
			sh=SetSensorZoneObj.GetROProperty("height")
			sw=SetSensorZoneObj.GetROProperty("width")
		End If
		functionend "SetSensorZoneObj" & " " & szsetstr &  " " & sx &  sy & sh & sw
End Function

Function GetSensorZoneProperty (byval name)
		functionstart "GetSensorZoneProperty" & " " & name
		p=UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone").GetROProperty(name)
		GetSensorZoneProperty=p
		functionend "GetSensorZoneProperty" & " " & p
End Function

Function Test_UI_Sensor_Microradar(byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UI_Sensor_Microradar=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UI_Sensor_Microradar name: exit function
		end if
			
		UI_sensor_test=true
		
		ActivateSensorInTheTray SetSensorName (number_of_tries, SensorsMICROSetup, "Sensor")
		
		ValidateDropdownList "*Horizontal Position:", "Sensor Config: Position", "Messages_0050"
		
		ValidateDropdownList "*Vertical Position:", "Sensor Config: Position", "Messages_0051"
	
		ActivateObject UISysConfigTab("Adv"): wait_custom 5
   		tabs2="Baseline;Time;Distance;Reporting"
  		tabs2=Split(tabs2,";")
		For each tb in tabs2
			 ValidateTab  tb: wait_custom 3
		Next
		For each tb in tabs2
			 ActivateObject UITab(tb): wait_custom 3
		Next
		
		wait_custom "fixed7": TD2CloseX
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_UI_Sensor_Microradar = 1	
		End If
		
		TestFinished Err.Description, name	
		
End Function

Function Test_UI_SensorCmd(byval name)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UI_SensorCmd=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UI_SensorCmd name: exit function
		end if
		
		sensorNameM = MicroradarSensorsSetup()
			
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor"): UI_sensor_test=true
		
		buttons="Set RF Channel;Set Mode;Reset (Keep RF);Hard Reset;Recalibrate;Download Firmware;Revert;Set ID"
		
		chmessage="Messages_0052"
		If (instr(1, name, "M_"))>0 Then
			sensorName=sensorNameM
			chmessage="Messages_0058"
			buttons="Set RF Channel;Set Mode;Reset (Keep RF);Hard Reset;Set to Factory Baseline;Calc New Baseline;Download Firmware;Revert;Set ID"
		End If

		if DragSensor (sensorName, "","", sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_UI_SensorCmd name
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_UI_SensorCmd = 1 
		   		Exit Function
			
			End If
		end if
		
		UI_sensor_test=false
   		
   		wait_custom "fixed7": ConfigTabPress "Cmds_74*94": wait_custom 7
   		
   		ValidateDropdownList 2, "Sensor Cmds: Change Mode to", chmessage
   		
   		ValidateDropdownList 1, "Sensor Cmds: Change RF Channel to", "Messages_0053"
   		
  		buttons=Split(buttons,";")
		For each btn in buttons
			 VerifyControl "button", btn, false: wait_custom 3
		Next
		
		wait_custom "fixed7": TD2CloseX
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_UI_SensorCmd = 1	
		End If
		TestFinished Err.Description, name	
End Function

Function ChangeRFChannelSen (byval ddlnum, byval cnumber)
	functionstart "ChangeRFChannelSen" & " " & cnumber -1
	Dropdownlist ddlnum, false, "ChangeRFChannelSen", true, objDL: wait_custom 3
	SelectItem cnumber: wait_custom 3
	click_button "Set RF Channel", cobj, true, true: wait_custom 3
	activatebutton "Yes": wait_custom "fixed25": hide_log=true: Hidelog: hide_log=false
	functionend "ChangeRFChannelSen"
End Function

Function ChangeRFChannelGW (byval ddlnum, byval cnumber)
	functionstart "ChangeRFChannelGW" & " " & cnumber -1
	Dropdownlist ddlnum, false, "ChangeRFChannelGW", true, objDL: wait_custom 3
	MoveKeyUp 16: wait_custom 3
	SelectItem cnumber: wait_custom 3
	click_button "Apply", obj, true, false: wait_custom "fixed15"
	activatebutton "Yes": wait_custom 5
	functionend "ChangeRFChannelGW"
End Function

Function ChangeRepeaterChannels (byval repeaterName, byval cnumber1, byval cnumber2)
	functionstart "ChangeRepeaterChannels" & " " & repeaterName
	Dropdownlist 1, false, "ChangeChannel", true, objDL: wait_custom 3
	SelectItem cnumber1: wait_custom 3
	Dropdownlist 2, false, "ChangeChannel", true, objDL: wait_custom 3
	SelectItem cnumber2: wait_custom 3
	click_button "Set Channel(s)", cobj, true, true: wait_custom 3
	wait_custom "fixed25": hide_log=true: Hidelog: hide_log=false
	functionend "ChangeRepeaterChannels" & " " & "upstream->" & cnumber1-1 & " downsream->" & cnumber2-1 
End Function

Function ChangeRFChannelMessage(byval messageid)
	functionstart "ChangeRFChannelMessage" & " " & messageid
	Dim params(1)
	
	params(0)=  rf_channels_code
	params(1)=	rf_channels_code
	ChangeRFChannelMessage=MessagesParamsSet (messageid, params)
	functionend "ChangeRFChannelMessage"
End Function

Function GatewayReboot()
		ActivateButton "Gateway Info": wait_custom 7
		APInfoTabsPress "Gateway Config": wait_custom 7 
		APConfigTabSelect "Cmds": wait_custom 3
		RebootSTD_AP ()	: wait_custom "fixed25"
End Function

Function RebootSTD_AP()
		functionstart "RebootSTD_AP"
		For n = 1 To 2 Step 1
			ActivateButton "Reboot": wait_custom "fixed3"
			If n=1 Then
				ActivateButton "No": wait_custom "fixed3"
			End If
		Next
		ActivateButton "Yes": wait_custom "fixed7"
		If instr(1, version_trafficdot2, "14.2")>0  Then
			wait_custom 5: TD2CloseX
		else
			Set buttonClose = UIButton ("CLose")
			If buttonClose.Exist Then
				ValidationFailed name, "TD2 did not close after reboot"
			else
				ValidationSucceeded "RebootSTD_AP", ""
			End If
		End If
		wait_custom "fixed25"
		functionend "RebootSTD_AP"
End Function

Function Test_Reboot(byval name)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_Reboot=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_Reboot name: exit function
		end if
		
		ActivateButton "Gateway Info": wait_custom 5
		APInfoTabsPress "Gateway Config": wait_custom 7 
		APConfigTabSelect "Cmds": wait_custom 3
		RebootSTD_AP ()	
		
		skip_start_email=true
		
		'skip_launch=true: 12450 if they decide autolaunch should be uncommented	
		
		TrafficDotLogin name, repeat, false

		wait_custom 5: TD2CloseX
			
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_Reboot = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function

Function Test_UI_APInfoTabs(byval name)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UI_APInfoTabs=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UI_APInfoTabs name: exit function
		end if
		
		ActivateButton "Gateway Info": wait_custom 5
 		
 		APInfoTabsPress "Gateway Config": wait_custom 7 
 		tabs="Info;Radio;Event;Detection;Advanced;Cmds" 
  		tabs=Split(tabs,";")
		For each tb in tabs
			 APConfigTabSelect tb: wait_custom 3
			 If tb="Info" Then
			 	buttons="Use Sensor Data;Ignore Sensor Data;Refresh Gateway;Unmap"
			 ElseIf tb="Cmds" Then
			 	buttons="Reboot;Run;Save To Flash;Update Gateway Firmware;" & _
   				"Refresh Gateway Configuration;Update Realtime Clock;" & _
   				"Broadcast SPP Firmware;Stop Broadcasting SPP Firmware;" &_
   				"Stop Broadcasting Sensor/Repeater Firmware;Broadcast Sensor/Repeater Firmware;" & _
   				"Upgrade CC/EX Firmware; Export Dot Table;Import Dot Table;" & _
   				"Export Dot Pair Table;Import Dot Pair Table; Refresh Gateway"
			 else
			 	buttons="Refresh Gateway;Unmap;Revert;Apply"
			 end if
			buttons=Split(buttons,";")
			For each btn in buttons
		 		VerifyControl "button", btn, false: wait_custom 3
			Next 
			If tb="Radio" Then
				tabs0="SPP-1;SPP-0" 
  				tabs0=Split(tabs0,";")
				For each t in tabs0
			 		ValidateRadioTab t: wait_custom 3
				Next
				For each t in tabs0
			 		ActivateObject UIRadioTab(t): wait_custom 3
				Next
			End If: wait_custom 3
		Next
 		
 		APInfoTabsPress "Pairings": wait_custom 7 
 		buttons0="Clear;Delete;Edit"
  		buttons0=Split(buttons0,";")
		For each btn in buttons0
			 VerifyControl "button", btn, false: wait_custom 3
		Next
 		
		APInfoTabsPress "Sys Config": wait_custom 10
		tabs1="IP Mode;VPN;Push;Poll;Memory;Other;Cmds" 
  		tabs1=Split(tabs1,";")
		For each tb in tabs1
			 ValidateSysConfigTab tb: wait_custom 3
		Next
		For each tb in tabs1
			 ActivateObject UISysConfigTab(tb): wait_custom 3
			 Select Case tb
			 	Case "IP Mode"
			 	Case "VPN"
			 	Case "Other"
			 End Select
		Next
		
		ActivateObject UISysConfigTab("Cmds"): wait_custom 5
   		buttons1="Backup;Restore;License;Download Diagnostics;" & _
   				"Refresh Config;Revert;Save To Gateway"
  		buttons1=Split(buttons1,";")
		For each btn in buttons1
			 VerifyControl "button", btn, false: wait_custom 3
		Next
		ActivateObject UISysConfigTab("Other"): wait_custom 5
   		tabs2="Time Settings;Serial Application Settings;Custom Application Settings;" & _
   				"Event Proxy Settings;Gateway Diagnostic Settings;SncProxy Settings;" & _
   				"STS/BVD Settings;APGI;MASS Settings;Temperature Alert"
  		tabs2=Split(tabs2,";")
		For each tb in tabs2
			 ValidateTab  tb: wait_custom 3

		Next
		For each tb in tabs2
			 ActivateObject UITab(tb): wait_custom 3
			 Select Case tb
			 	Case "Time Settings"
			 		ValidateDropdownList 1, "Sys Con*ig>Other: Timezone", "Messages_0060"
			 		ValidateDropdownList 2, "Sys Con*ig>Other: Time Sync", "Messages_0061"
			 End Select
		Next
		wait_custom "fixed7": TD2CloseX	
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_UI_APInfoTabs = 1	
		End If
		TestFinished Err.Description, name
End Function

function M170TurnOn (byval turnitonoff)
		functionstart "M170TurnOn"
		M170TurnOn=0
		ActivateButton "Gateway Info": wait_custom 5
		APInfoTabsPress "Sys Config": wait_custom 10
		ActivateObject UISysConfigTab("Other"): wait_custom 5
		ActivateObject UITab("STS/BVD Settings"): wait_custom 3
		Set objSTS = UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Enable STS")
		gvalue=objSTS.GetROProperty("togglestate")
		If cstr(gvalue)="1" Then
			objSTS.Click
			WriteToLogFile "Turning STS off": wait_custom 3
		End If 
		ActivateObject UITab("Serial Application Settings"): wait_custom 3
		Set objM170 = UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Master 170 Enable")
		gvalue=objM170.GetROProperty("togglestate")
		If turnitonoff="on" and cstr(gvalue)="1" Then
			functionend "M170TurnOn": exit function
		ElseIf turnitonoff="off" and cstr(gvalue)="0" Then
			functionend "M170TurnOn": exit function
		ElseIf turnitonoff="on" and cstr(gvalue)="0" Then
			objM170.Click: wait_custom 3
			ActivateButton "Save to Gateway": wait_custom "fixed10"
			ActivateButton "OK"
		ElseIf turnitonoff="off" and cstr(gvalue)=1 Then
			objM170.Click: wait_custom 3
			ActivateButton "Save to Gateway": wait_custom "fixed10"
			ActivateButton "OK"
		End If
		ActivateButton "Gateway Info": wait_custom 5
		APInfoTabsPress "Gateway Config": wait_custom 7 
		APConfigTabSelect "Cmds": wait_custom 3:M170TurnOn=1
		RebootSTD_AP ()
		functionend "M170TurnOn" & "->" & turnitonoff
end function

Function Test_UI_MicroradarSensorAdv(byval name)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UI_MicroradarSensorAdv=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UI_MicroradarSensorAdv name: exit function
		end if

		UI_sensor_test=true: discoverModeOnOff "on"
		
		ActivateSensorInTheTray SetSensorName (number_of_tries, SensorsMICROSetup, "Microradar Sensor"): wait_custom 3
		
		ValidateDropdownList "*Horizontal Position:", "Sensor Config: Position", "Messages_0050"
		
		ValidateDropdownList "*Vertical Position:", "Sensor Config: Position", "Messages_0051"
		
		tabs0str="Position;Card Addresses;Adv;Cmds;Pairing"
		
		SensorTabsPress tabs0str, "Adv": wait_custom 3
		
		tabs1="Settings;Color Code;Timeslot"
		
  		tabs1=Split(tabs1,";")
		For each tb in tabs1
			wait_custom 1
			ValidateTabAndXY tb, x, y: wait_custom 3
			If tb="Settings" Then
				mouseclick x+3, y+3, false
				WriteToLogfile "Activate" & " " & tb
			ElseIf tb="Color Code" Then
				xcc=x: ycc=y
			ElseIf tb="Timeslot" Then
				xts=x: yts=y			
			End If
		Next
   		tabs2="Baseline;Time;Distance;Reporting"
  		tabs2=Split(tabs2,";")
		For each tb in tabs2
			wait_custom 1
			ValidateTabAndXY tb, x, y: wait_custom 3
			If tb="Baseline" Then
				mouseclick x+20, y+10, false
				WriteToLogfile "Activate" & " " & tb
				yd=247
				comboboxes="Detection Range;Autobaseline;Sensitivity;Horizontal Sensitivity"
  				comboboxes=Split(comboboxes,";")
				For each cb in comboboxes
					WriteToLogfile "Activate" & " " & cb
					clickfromconfig 65, yd
					SendKeysShellTimes "{DOWN}", 2, 1
					SendKeysShell "{ENTER}", 1
					yd=yd+50
				Next
				Exit for
			End If
		Next
		For each tb in tabs2
			wait_custom 1
			ValidateTabAndXY tb, x, y: wait_custom 3
			If tb="Baseline" Then
			else
				mouseclick x+3, y+3, false
				WriteToLogfile "Activate" & " " & tb
				If tb="Time" Then
					comboboxes="Responsivness;Sample Rate Override;Onset Filter;Holdover Filter"
  					comboboxes=Split(comboboxes,";")
  					yd=273
				ElseIf tb="Distance" Then
					comboboxes="Start Bin Override;End Bin Override"
  					comboboxes=Split(comboboxes,";")
					yd=285
				ElseIf tb="Reporting" Then
					comboboxes="Car/Bycicle Threshold"
  					comboboxes=Split(comboboxes,";")
					yd=302
				End If
				For each cb in comboboxes
					WriteToLogfile "Activate" & " " & cb
					clickfromconfig 65, yd
					SendKeysShellTimes "{DOWN}", 2, 1
					SendKeysShell "{ENTER}", 1
					yd=yd+50	
				Next
			End If
		Next
		ApplyChanges: hide_log=true:HideLog:hide_log=false: wait_custom 3
		
		mouseclick xcc+3, ycc+3, false: wait_custom 3
		WriteToLogfile "Activate Color Code"
		
		mouseclick xts+3, yts+3, false: wait_custom 3
		WriteToLogfile "Activate Timeslot"
		WriteToLogfile "Activate" & " " & "Change Timeslot to:"
		clickfromconfig 65, 282
		SendKeysShellTimes "{DOWN}", 2, 1
		SendKeysShell "{ENTER}", 1
		
		ApplyChanges: hide_log=true:HideLog:hide_log=false: wait_custom 3

		discoverModeOnOff "off": wait_custom "fixed7": TD2CloseX 
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_UI_MicroradarSensorAdv = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function


Function Test_UI_SensorAdv(byval name)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UI_SensorAdv=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UI_SensorAdv name: exit function
		end if

		UI_sensor_test=true: discoverModeOnOff "on"
		
		ActivateSensorInTheTray SetSensorName (number_of_tries, SensorsSetup, "Sensor"): wait_custom 3
		
		ValidateDropdownList "*Horizontal Position:", "Sensor Config: Position", "Messages_0050"
		
		ValidateDropdownList "*Vertical Position:", "Sensor Config: Position", "Messages_0051"
		
		tabs0str="Position;Card Addresses;Adv;Cmds;Pairing"
		
		SensorTabsPress tabs0str, "Adv": wait_custom 3
		
		tabs1="Settings;Color Code;Timeslot"
		
  		tabs1=Split(tabs1,";")
		For each tb in tabs1
			wait_custom 1
			ValidateTabAndXY tb, x, y: wait_custom 3
			If tb="Settings" Then
				mouseclick x+3, y+3, false: wait_custom 1
				
				ValidateDropdownList 1, "Sensor>Adv>Se**ings: Linear Filter", "Messages_0054"
				
				ValidateDropdownList 2, "Sensor>Adv>Se**ings: Axis Detection", "Messages_0055"
				
				ValidateDropdownList 3, "Sensor>Adv>Se**ings: Threshold Override", "Messages_0056"

				ValidateDropdownList 4, "Sensor>Adv>Se**ings: Auto Reabaseline Override", "Messages_0057"
				
				WriteToLogfile "Activate" & " " & tb
					
			ElseIf tb="Color Code" Then
				xcc=x: ycc=y
			ElseIf tb="Timeslot" Then
				xts=x: yts=y			
			End If
		Next
		comboboxes="Linear Filter;Axis Detection;Threshold Override;Auto-rebaseline Override"
  		comboboxes=Split(comboboxes,";")
  		yd=210
		For each cb in comboboxes
			WriteToLogfile "Activate" & " " & cb
			clickfromconfig 65, yd
			SendKeysShellTimes "{DOWN}", 2, 1
			SendKeysShell "{ENTER}", 1
			If cb="Axis Detection" Then
				yd=yd+150
			else
				yd=yd+50
			End If
		Next	
	
		ApplyChanges: hide_log=true:HideLog:hide_log=false: wait_custom 3
		
		mouseclick xcc+3, ycc+3, false: wait_custom 3
		WriteToLogfile "Activate Color Code"
		
		mouseclick xts+3, yts+3, false: wait_custom 3
		WriteToLogfile "Activate Timeslot"
		
		CheckBox "Sensor>Adv>Timeslot", "Show only available slots:", "off", false: wait_custom "fixed10"
		
		ValidateDropdownList 1, "Sensor>Adv>Timeslot: Change to", "Messages_0059"
		
		click_button "Auto-assign All", objb, true, false: wait_custom 3
		
		AutoAssignTimeSlots: wait_custom 3
		
		WriteToLogfile "Activate" & " " & "Change Timeslot to:"
		clickfromconfig 60, 284
		SendKeysShellTimes "{DOWN}", 2, 1
		SendKeysShell "{ENTER}", 1
		
		ApplyChanges: wait_custom 3

		if ManuallyAssignTimeSlotValidation() > 0 then
		else
			hide_log=true:HideLog:hide_log=false: wait_custom 3
		End If 
		
		discoverModeOnOff "off": wait_custom "fixed7": TD2CloseX 
	
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_UI_SensorAdv = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function



Function Test_UI_APInfoCmd(byval name)
		if lcase(Environment("Release_"))="on" Then
	      On Error Resume Next
		end if: Test_UI_APInfoCmd=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UI_APInfoCmd name: exit function
		end if

		ActivateButton "Gateway Info": wait_custom 5: APConfigTabSelect "Cmds": wait_custom 3
   		buttons="Reboot;Run;Save To Flash;Update Gateway Firmware;" & _
   				"Refresh Gateway Configuration;Update Realtime Clock;" & _
   				"Broadcast SPP Firmware;Stop Broadcasting SPP Firmware;" &_
   				"Stop Broadcasting Sensor/Repeater Firmware;Broadcast Sensor/Repeater Firmware;" & _
   				"Upgrade CC/EX Firmware; Export Dot Table;Import Dot Table;" & _
   				"Export Dot Pair Table;Import Dot Pair Table; Refresh Gateway"
  		buttons=Split(buttons,";")
		For each btn in buttons
			 VerifyControl "button", btn, false: wait_custom 3
		Next

		wait_custom "fixed7": TD2CloseX 
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_UI_APInfoCmd = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function

Function Test_DragDropMicroRadarZone(name, TrafficZone, qq, zz, adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_DragDropMicroRadarZone=0
		
		number_of_dot_pairs="microradar"

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_DragDropMicroRadarZone name, TrafficZone, qq, zz, adjust: exit function
		end if

		sensorName = SetSensorName (number_of_tries, MicroradarsSetup, "MicroRadar")
		
		Dim zoneType: zoneType="Microradar"
		zoneName = DragSensorZone (TrafficZone, qq, zz,xx, yy, ww, hh, tryid ): wait_custom 3: SensorZoneTypeChange zoneType, true: wait_custom 7

		If hh>ww Then yy=yy+hh/2
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_DragDropMicroRadarZone name,  TrafficZone, qq, zz, adjust
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_DragDropMicroRadarZone = 1 
		   		Exit Function
			End If
		end if
				
		SensorHorizontalPositionChange 3, true: wait_custom 3: SensorVerticalPositionChange 3, true: wait_custom 3
			
		TrafficDotSave SavingToAPMessage0(), SavingToAPMessage1(), "Yes", false, false, true:wait_custom 7
		
		printscreen name: wait_custom 3
		
		Dim sensorZones(0), sztypes(0)
		
		sensorZones(0)=zoneName
		sztypes(0)=SensorZoneTypeCode(zoneType)
		
		readXML "sensorZoneTypeMapping.xml", sensorZones, "", sztypes: wait_custom 3
		
		DeleteSensor sensorName, _
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID"), _
				SensorDeleteConfirmMessage2(sensorName), "", ""	
			
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false, false, "Yes"
	
		wait_custom "fixed7": SystemSave "Save_2", false, true: number_of_dot_pairs="0"
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_DragDropMicroRadarZone = 1 	
		End If
		
		TestFinished Err.Description, name
End Function

sub SensorSTSAndDescriptionSet (name, descript, aChanges)
	functionstart "SensorSTSAndDescriptionSet"
	If dot_id<>"" Then
		y_plus=32
	End If
		ClickFromConfig 141, 191+y_plus 'name
	SendKeysShell name, 1:wait_custom 3
	SendKeysShell "{TAB}", 1
	If aChanges Then
		wait_custom 3: ApplyChanges
	End If
	functionend "SensorSTSAndDescriptionSet"
end sub

sub SensorPositionNameAndDescriptionSet (name, descript, aChanges)
	Exit sub
	functionstart "SensorPositionNameAndDescriptionSet"
	If role_last="EMEA" Then
		SensorSTSAndDescriptionSet descript, name, false: exit sub
	End If
		ClickFromConfig 105, 295 'name
	SendKeysShell name, 1:wait_custom 3
	ClickFromConfig 105, 310 'descr
	SendKeysShell descript, 2
	SendKeysShell "{TAB}", 1
	If aChanges Then
		wait_custom 3: ApplyChanges
	End If
	functionend "SensorPositionNameAndDescriptionSet"
end sub

sub SensorPositionNameAndDescriptionSetObj (name, descript, aChanges)
	functionstart "SensorPositionNameAndDescriptionSetObj"
	UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Required Field Name: Required").Type name
	UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Description:").Type descript
	SendKeysShell "{TAB}", 1
	If aChanges Then
		wait_custom 1: ApplyChanges
	End If 	
	functionend "SensorPositionNameAndDescriptionSetObj"
end sub

Sub SensorFromTableDynamicly (noneMicroOnly, microRadar)
		functionstart "SensorFromTableDynamicly"
		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map/Table").Click:wait_custom 10:messageBOX Err.Number

		If microRadar Then
			ReadMicroRadarTable
		else
			ReadTable UIListTable("List"), "Group By Repeater",noneMicroOnly, true, "", false, "", false
		End If

		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map/Table").Click:wait_custom 10
		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Config").Click
		functionend "SensorFromTableDynamicly"
End Sub

Function Test_DragDropZoneAndSensor(byval name, byval TrafficZone, byval ZoneType, byval qq, byval zz, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_DragDropZoneAndSensor=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_DragDropZoneAndSensor name, TrafficZone, ZoneType, qq, zz, adjust: exit function
		end if
	
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: SensorZoneTypeChange ZoneType, true: wait_custom 7
  	
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y")
		ww=GetSensorZoneProperty("width"): hh=GetSensorZoneProperty("height")
		
		If hh>ww Then 
			yy=yy+hh/2: adjust=0
		End If 
		
		Repository.Value("sensorListName")=sensorName
	
		xx=adjust+xx+ww/2: sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")

		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_DragDropZoneAndSensor name, TrafficZone, ZoneType, qq, zz, adjust
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_DragDropZoneAndSensor = 1 
		   		Exit Function
			
			End If
		end if
	
   		ConfigTabPress "Cmds": ConfigTabPress "Position": wait_custom 2
   		
   		SensorHorizontalPositionChange 3, true: wait_custom 1: SensorVerticalPositionChange 3, true: wait_custom 1
   		
   		ConfigTabPress "Adv": ConfigTabPress "Card Addresses"

		ConfigureSensorCard "CardAddress1ComboBoxShelf", 2, "Shelf, Address1"
		
		ConfigureSensorCard "CardAddress1ComboBoxSlot", 2, "Slot, Address1"
		
		ConfigureSensorCard "CardAddress1ComboBoxChannel", 2, "Channel, Address1"
		
		ConfigureSensorCard "CardAddress2ComboBoxShelf", 2, "Shelf, Address2"
	
		ConfigureSensorCard "CardAddress2ComboBoxSlot", 2, "Slot, Address2"
		
		ConfigureSensorCard "CardAddress2ComboBoxChannel", 2, "Channel, Address2"
	
		ApplyChanges:wait_custom 3
		
		printscreen name: wait_custom "fixed7": SystemSave "Don't Save", false, true	
		
		If(Err.Number<>0)  or test_failed Then
			ValidationFailed name, Err.Description
			Test_DragDropZoneAndSensor = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function


Function Test_SensorZoneNames(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_SensorZoneNames=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_SensorZoneNames name, x_d, y_d: exit function
		end if
		
		zoneName = DragSensorZone ("Sensor Zone NB", x_d, y_d, xx, yy, ww, hh,tryid): wait_custom 3
		
		SensorZoneTypeChange "Stop Bar", true: wait_custom 7
		
		xx=xx+ww/2: sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")

		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_SensorZoneNames name, x_d, y_d
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_SensorZoneNames = 1 
		   		Exit Function
			End If
		end if
	   		
		SensorVerticalPositionChange 1,  true: wait_custom 7

		zsnames="SZN_1;SZN@1;SZN-1;SZN&1": zsnames=Split(zsnames,";")
		skip_start_email=true: skip_up_units=true
		For i=0 to ubound(zsnames)
			SaveAndCloseXY true, 10, 15, true
			TrafficDotLogin name, repeat, false
			If i=0 Then
				namevalidate=zoneName
			else
				namevalidate=zsnames(i-1)
			End If
			ActivateSensorZone namevalidate, xx+7, yy+7: wait_custom 5
			SensorZoneNameValidate zsnames(i),namevalidate : wait_custom "fixed7"	
		Next 
		
		SaveAndCloseXY true, 10, 15, true: 	TrafficDotLogin name, repeat, false
		
		ClearAllConfiguredSensors: wait_custom 5: skip_start_email=false
		
		SaveAndCloseXY true, 15, 15, true

		If(Err.Number<>0)  or test_failed Then
			ValidationFailed name, Err.Description
			Test_SensorZoneNames = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function

function SensorZoneNameValidate(byval newname, byval namevalidate)
	functionstart "SensorZoneNameValidate" & " " & newname	
	EditBoxEdit 0, true, newname, rname,  true, "Sensor Zone Name": wait_custom 5
	assertstringequals namevalidate, rname, "SensorZoneNameValidate", namevalidate
	Click_button "Apply", obj, true, false: wait_custom 3
	functionend "SensorZoneNameValidate"
end function

Function DeltasForSensorZones (byval zoneName, byref d_x, byref d_y)
	functionstart "DeltasForSensorZones"
	Select Case zoneName
		Case "Sensor Zone NB"
			d_x=0
			d_y=50
		Case "Sensor Zone EB", "Sensor Zone WB"
			d_x=0
			d_y=25
		Case "Sensor Zone SB"
			d_x=25
			d_y=0
	End Select
	DeltasForSensorZones=right (zoneName, 2)
	functionend "DeltasForSensorZones"
End Function

Function Test_Arrows (byval name, byval TrafficZone, byval ZoneType, byval x_a, byval y_a)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_Arrows=0	
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_Arrows name, TrafficZone, ZoneType, x_a, y_a: exit function
		end if
		
		DeltasForSensorZones TrafficZone, deltax, deltay
		
		dim sensorZone(7), tagval(7), arrows(7)	
		arrows(0)=ARROW_LEFT
		arrows(1)=ARROW_LEFT_RIGHT
		arrows(2)=ARROW_LEFT_RIGHT_THROUGH
		arrows(3)=ARROW_LEFT_THROUGH
		arrows(4)=ARROW_NO_ARROW
		arrows(5)=ARROW_RIGHT
		arrows(6)=ARROW_RIGHT_THROUGH
		arrows(7)=ARROW_THROUGH
		
		tagval(0)="lt"
		tagval(1)="lr"
		tagval(2)="lrs"
		tagval(3)="lts"
		tagval(4)="na"
		tagval(5)="rt"
		tagval(6)="rts"
		tagval(7)="s"
		
		vert=false: zoomt=0
		If instr(1, TrafficZone, "NB")>0 Then
			zoomt=5: vert =true
		elseIf instr(1, TrafficZone, "SB")>0 Then
			zoomt=4: vert = true
		end if
		
		ZoomOut zoomt
		
		For n = 1 To 8 Step 1
			zoneName = DragSensorZone (TrafficZone, x_a+n*deltax, y_a+n*deltay, xx, yy, ww, hh,tryid): wait_custom 3
			SensorZoneTypeChange ZoneType, false: wait_custom 5
			ChangeSensorZoneArrowType arrows(n-1), true: wait_custom 5
			if not vert then
				ActivateButton "Gateway Info": wait_custom 5
			else
				mouseclick x_a+n*deltax+25+x_fscreen, y_a+n*deltay+y_fscreen, false
			end if
			sensorZone(n-1)=zoneName
		Next

		wait_custom 5: readXML "sensorZonesUI.xml", sensorZone, "arrow", tagval: wait_custom 10
		
		ZoomIn 1: printscreen name: wait_custom "fixed7"
		
		SystemSave "Don't Save", false, true
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_Arrows = 1			
		End If
		TestFinished Err.Description, name
		
end function

Function ZoomIn (byval iPower)
	functionstart "ZoomIn " & iPower
	For Iterator = 1 To iPower Step 1
		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Zoom In").Click
		wait_custom 3
	Next
	functionend "ZoomIn"
End Function

Function ZoomOut (byval iPower)
	functionstart "ZoomOut " & iPower
	For Iterator = 1 To iPower Step 1
		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Zoom Out").Click
		wait_custom 1
	Next
	functionend "ZoomOut"
End Function

Sub ConfigTabPress (byval tabname)
	functionstart "ConfigTabPress " & tabname
	If instr(1, tabname,"_")>0 Then
		coords=(right(tabname, len(tabname)-instr(1, tabname, "_")))
		tabname=(left(tabname, len(tabname)-instr(1, tabname, "_")-1))
		For each coor in split(coords, "*")
			if n=0 then
				xx=trim(coor)
			else
				yy=trim(coor)
			end if
			n=n+1
		Next	
	End If
	Select Case tabname
		Case "Geometry"
			ClickFromConfig 77, 125
		Case else
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab").UIAObject(tabname)
			If obj.Exist Then
				obj.Click
			else
				ClickFromConfig xx, yy: 
			End If
			wait_custom 3
	End Select
	functionend "ConfigTabPress" & " "  & xx & yy
End Sub

Sub ConfigSensorTabPress (byval tabname)
	functionstart "ConfigTabPress " & tabname
	Select Case tabname
		Case "Geometry"
			ClickFromConfig 77, 125
		Case else
			UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_Sensor_Config").UIAObject(tabname).Click:wait_custom 3
	End Select
	functionend "ConfigTabPress"
End Sub

Function SaveDOTPairMessage3(byval strnumberofdotpair)
	functionstart "SaveDOTPairMessage3"
	If strnumberofdotpair="microradar" and not offline_mode Then
		SaveDOTPairMessage3=EnvironmentGetMessages("Messages_0027")
	else
		Dim params(1)
		params(0)=vbNewLine
		params(1)=strnumberofdotpair
		SaveDOTPairMessage3=MessagesParamsSet ("Messages_0026", params)
	End If
	functionend "SaveDOTPairMessage3"
End Function

Function SaveDOTPairMessage2()
	functionstart "SaveDOTPairMessage2"
	Dim params(1)
	params(0)=vbNewLine
	params(1)=vbNewLine
	SaveDOTPairMessage2=MessagesParamsSet ("Messages_0023", params)
	functionend "SaveDOTPairMessage2"				
End Function

Function SaveDOTMessage0()
	functionstart "SaveDOTMessage0"
	Dim params(2)
	params(0)=vbNewLine
	params(1)=vbNewLine
	params(2)=vbNewLine+vbNewLine+vbNewLine
	SaveDOTMessage0=MessagesParamsSet ("Messages_0020", params)
	functionend "SaveDOTMessage0"
End Function

Function SaveDOTMessage1()
	functionstart "SaveDOTMessage1"
	Dim params(4)
	params(0)=vbNewLine
	params(1)=vbNewLine
	params(2)=vbNewLine+vbNewLine+vbNewLine
	params(3)=vbNewLine
	params(4)=vbNewLine	
	SaveDOTMessage1=MessagesParamsSet ("Messages_0030", params)
	functionend "SaveDOTMessage1"
End Function

Function SaveNoDotsMessage()
	functionstart "SaveNoDotsMessage"
	Dim params(2)
	params(0)=vbNewLine
	params(1)=vbNewLine
	params(2)=vbNewLine
	SaveNoDotsMessage=MessagesParamsSet ("Messages_0029", params)
	functionend "SaveNoDotsMessage"
End Function

Function SaveDOTPairMessage1()
	functionstart "SaveDOTPairMessage1"
	Dim params(2)
	params(0)=vbNewLine
	params(1)=vbNewLine
	params(2)=vbNewLine+vbNewLine+vbNewLine
	SaveDOTPairMessage1=MessagesParamsSet ("Messages_0021", params)			
	functionend "SaveDOTPairMessage1"
End Function

Function SaveMessageCountZoneSensorPostion(byval zoneName, byval sensorName)
	functionstart "SaveMessageCountZoneSensorPostion"
	Dim params(3)
	params(0)=zoneName
	params(1)=vbNewLine
	params(2)=vbNewLine
	params(3)=sensorName
	SaveMessageCountZoneSensorPostion=MessagesParamsSet ("Messages_0025", params)
	functionend "SaveMessageCountZoneSensorPostion"
End Function

Function SaveMessage7 (byval zoneName)
	functionstart "SaveMessage7"
	Dim params(1)
	params(0)=zoneName
	params(1)=vbNewLine
	SaveMessage7=MessagesParamsSet ("Messages_0024", params)
	functionend "SaveMessage7"
End Function

Function SaveMessage0 (byval zoneName, byval sensorName)
	functionstart "SaveMessage0"
	Dim params(3)
	params(0)=zoneName
	params(1)=vbNewLine
	params(2)=vbNewLine
	params(3)=sensorName
	SaveMessage0=MessagesParamsSet ("Messages_0022", params)			
	functionend "SaveMessage0"
End Function

Function ControllerSetup (byref cname, byval num)
	functionstart "ControllerSetup"
	If cname="" Then
		cname=Environment("Controller")
		set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
		For iii=0 to collections.count -1
			If collections(iii).GetROProperty("Class Name")="UIAComboBox" Then
		   		Set obj = collections(iii)
		   		obj.click
		   		Exit for
			End If
		Next
		Set itms=obj.GetItems: ReDim aRuntime(itms.Count-1)
		For rowCount = 0 To itms.Count-1
			itmname=(itms.item(rowCount))
			aRuntime(rowCount)=itmname
			If rowCount=num Then
				cname=itmname
				obj.click
				Exit for
			End If		
		Next	
	End If
	If cname="" Then
		oops "", tryid
		If tryid<2 Then
			ControllerSetup cname, num:  resetTryid:exit function
		End If
	End If
	Repository.Value("controllerName")=cname
	ControllerSetup=cname
	functionend "ControllerSetup" & " " & cname
End Function

Function SensorsMICROSetup
	functionstart "SensorsMICROSetup"
	ReDim Sensors(3)
	If Environment("SensorStatic")="Yes" then
		Sensors(0)=Environment("MicroRadar")
		Sensors(1)=Environment("MicroRadar0")
		Sensors(2)=Environment("MicroRadar1")
		SensorsMICROSetup=Sensors		
	else
		SensorFromTableDynamicly true,false
		sensorName=sensor_in_test	
		ReDim Sensors(1)			
		Sensors(0)=sensorName: SensorsMICROSetup=Sensors	
	End If	
	functionend "SensorsMICROSetup"		
End Function

Function RepeatersSetup
	functionstart "RepeatersSetup"
	environment.LoadFromFile env_path_changed
	Dim Repeaters(3)
	Repeaters(0)=Environment("Repeater")
	Repeaters(1)=Environment("Repeater0")
	Repeaters(2)=Environment("Repeater1")
	RepeatersSetup=Repeaters	
	if Repeaters(0)="" Then
		WriteToLogFile "No life repeaters found in environment file. Generic repeaters will be used."
	else
		for i=0 to ubound(Repeaters)-1
			WriteToLogFile "Repeater" & i & " " & Repeaters(i)
		next
	end if
	functionend "RepeatersSetup"		
End Function

Function SensorsSetup
	functionstart "SensorSetup"
	environment.LoadFromFile env_path_changed
	ReDim Sensors(5)
	If Environment("SensorStatic")="Yes" then
		If role_c="EMEA" Then
			ReDim Sensors(3)
			Sensors(0)=Environment("Sensor")
			Sensors(1)=Environment("Sensor0")
			Sensors(2)=Environment("Sensor1")
		else
			Sensors(0)=Environment("Sensor")
			Sensors(1)=Environment("Sensor0")
			Sensors(2)=Environment("Sensor1")
			Sensors(3)=Environment("Sensor2")
			Sensors(4)=Environment("Sensor3")
		End If 
	else
		SensorFromTableDynamicly true,false
		sensorName=sensor_in_test	
		ReDim Sensors(1)			
		Sensors(0)=sensorName 
	End If
	SensorsSetup=Sensors	
	for i=0 to ubound(Sensors)-1
		WriteToLogFile "Sensor" & i & " " & Sensors(i)
	next
	functionend "SensorSetup"		
End Function

Function MicroradarsSetup
	functionstart "MicroradarsSetup"
	ReDim MSensors(3)
	MSensors(0)=Environment("MicroRadar")
	MSensors(1)=Environment("MicroRadar0")
	MSensors(2)=Environment("MicroRadar1")
	MicroradarsSetup=MSensors		
	functionend "MicroradarsSetup"
End Function

Function MicroradarSensorsSetup
	functionstart "MicroradarSensorsSetup"
	MicroradarSensorsSetup=Environment("MicroRadar") 
	functionend "MicroradarSensorsSetup"
End Function

Sub ActivateTopMenueBar(byval firstitem, byval seconditem, byval thirditem)
	functionstart "ActivateTopMenueBar" & ">" & firstitem & ">" & seconditem & ">" & thirditem: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("MenuBar").UIAObject(firstitem).Click: wait_custom 3
	WriteToLogFile "Activated: " & firstitem
	Repository.Value("submenue0")=seconditem
	Repository.Value("submenue1")=thirditem
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu").UIAObject("Submenue0").Click: wait_custom 3
	WriteToLogFile "Activated: " & seconditem
	If thirditem<>"" Then
		UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu1").UIAObject("Submenue1").Click: wait_custom 3
		WriteToLogFile "Activated: " & thirditem
	End If
	functionend "ActivateTopMenueBar"
End Sub

Sub Tools (byval submenue0, byval submenue1, byval submenue2) 
	functionstart "Tools" & " " & submenue0 & " " & submenue1 & " " & submenue2
	wait_custom 3: ToolsActivate: wait_custom 3
	Repository.Value("submenue1")=submenue1
	Repository.Value("submenue0")=submenue0
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu").UIAObject("Submenue0").Click: wait_custom 3
	WriteToLogFile "Activated: " & submenue0
	If submenue1<>"" Then
		UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu1").UIAObject("Submenue1").Click: wait_custom 3
		WriteToLogFile "Activated: " & submenue1
	End If
	If submenue2<>"" Then
		UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu").UIAObject(submenue2).Click: wait_custom 3
		WriteToLogFile "Activated: " & submenue2
	End If
	functionend "Tools"
End Sub

Sub ToolsActivate()
	functionstart "ToolsActivate"
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("MenuBar").UIAObject("Tools").Click
	functionend "ToolsActivate"
End Sub


Function UserPreferencesUnits (byref units, byval selectUnits, byval ignore_g)
	if skip_up_units Then exit Function
	functionstart "UserPreferencesUnits" & " " & units
	If units_g<>"" Then
		If not ignore_g Then
			functionend "UserPreferencesUnits: " & units_g & ignore_g
			Exit function
		End If
	End If
	ToolsActivate: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu").UIAObject("Preferences...").Click: wait_custom 1
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab").UIAObject("User")
	obj.Click: wait_custom 1
	set objImp = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Measurement Unit  1 of")
	set objMet = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Measurement Unit  2 of")
	If objImp.GetROProperty("isselected") Then
		unitscur="Imperial"
	elseIf objMet.GetROProperty("isselected") Then
		unitscur="Metric"
	else
		ValidationFailed "UserPreferencesUnits", "Units not selected"
	end if	
	If selectUnits Then
		If units="Imperial" and unitscur="Metric" Then
			objImp.Click
			units="Imperial"
		elseIf units="Metric" and unitscur="Imperial" Then
			objMet.Click
			units="Metric"
		End If
		wait_custom 1: UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply_Pref").Click: wait_custom 2
	End If
	PreferencesPopup "Preferences", true: wait_custom 5
	ValidationSucceeded "UserPreferencesUnits", units
	functionend "UserPreferencesUnits" & " " & units
End function

Function UserPreferencesShowTableView (byref tableview, byval changeit)
	functionstart "UserPreferencesShowTableView"
	ToolsActivate: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu").UIAObject("Preferences...").Click: wait_custom 1
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab").UIAObject("User")
	obj.Click: wait_custom 1
	Set objSTV = UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Show Table View as initial")
	gvalue=objSTV.GetROProperty("togglestate"): tableview = gvalue
	If changeit Then
		If cStr(gvalue) = "0" Then
			objSTV.Click
			wait_custom 1: UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply_Pref").Click: wait_custom 2
			tableview="on"
		end if
			If cStr(gvalue) = "1" Then
			objSTV.Click
			wait_custom 1: UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply_Pref").Click: wait_custom 2
			tableview="off"
		End If
	End If
	PreferencesPopup "Preferences", true: wait_custom 5	
	functionend "UserPreferencesShowTableView" & " " & "intial table view is " & tableview
End function

Function UserPreferencesAutoSaveFlash (byval autoSave)
	if autoSave Then
		valueset = "enable"
	else
		valueset = "disable"
	end if
	functionstart "UserPreferencesAutoSaveFlash" & "->" & valueset
	UserPreferencesAutoSaveFlash=0
	ToolsActivate: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu").UIAObject("Preferences...").Click: wait_custom 1
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab").UIAObject("User")
	obj.Click: wait_custom 1
	gvalue=UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Always automatically save").GetROProperty("togglestate")
	If autoSave Then
		If cStr(gvalue) = "0" Then
			UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Always automatically save").Click
			wait_custom 1: UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply_Pref").Click: wait_custom 2
		End If
	else
		If cStr(gvalue) = "1" Then
			UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Always automatically save").Click
			wait_custom 1: UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply_Pref").Click: wait_custom 2
		End If
	End If
	PreferencesPopup "Preferences", true: wait_custom 5	
	If obj.Exist Then
		UserPreferencesAutoSaveFlash=-1
		functionend "UserPreferencesAutoSaveFlash" & " -1"
		Exit function
	End If
	functionend "UserPreferencesAutoSaveFlash"
End function

Function FlexConnectSetUP(byval channels)
	functionstart "FlexConnectSetUP" & " " & channels
	Set objRegExp = New RegExp
	objRegExp.Pattern = "[^a-z0-9]"
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAObject" Then
			flname = collections(iii).GetROProperty("name")
			realname=objRegExp.Replace(flname, "")
			realname=Replace(realname, "Channels", "")
			modch=objRegExp.Replace(channels, "")
			if 	instr(1, realname, modch)>0 then
				if instr(1, realname, "Rack")>0 Then
					Set FlexConnectSetUP = collections(iii)
					'FlexConnectSetUP.highlight
					functionend "FlexConnectSetUP": exit function
				end if
			end if	
		End If
	Next
	functionend "FlexConnectSetUP"
End Function


Function FlexConnectSet(byval name, byval clickit, byref fx, byref fy, byref fw, byref fh)
	functionstart "FlexConnectSet" & " " & name
	Set objRegExp = New RegExp
	objRegExp.Pattern = "[^a-z0-9]"
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAObject" Then
			flname = collections(iii).GetROProperty("name")
			if 	objRegExp.Replace(name, "")	= objRegExp.Replace(flname, "") Then
				Set FlexConnectSet = collections(iii)
				fx=collections(iii).GetROProperty("abs_x")
				fy=collections(iii).GetROProperty("abs_y")
				fw=collections(iii).GetROProperty("width")
				fh=collections(iii).GetROProperty("height")
				if clickit then
					mouseclick xb+15, yb+10, false
				end if
				functionend "FlexConnectSet" & " " & fx & fy & fw & fh: exit function
			end if	
		End If
	Next
	functionend "FlexConnectSet" & " " & fx & fy & fw & fh
End Function


Function Test_FlexController(byval name, byval TrafficZone, byval zoneType, byval qq, byval zz, byval adjust)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_FlexController=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_FlexController name, TrafficZone, ZoneType, qq, zz, adjust: exit function
		end if
		
		if AvoidGateway(APEG_128) Then
			exit function
		end if
		
		ccx=qq: ccy=zz
		
		if M170TurnOn ("on")>0 then
			skip_start_email=true: TrafficDotLogin name, repeat, false: skip_start_email=false
		else
			'workaround for redraw issue bug # 
			TD2CloseX: wait_custom "fixed7"
			skip_start_email=true: TrafficDotLogin name, repeat, false: skip_start_email=false
		end if

		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: SensorZoneTypeChange "Speed", true: wait_custom 7
		
		offzone_x=xx: offzone_y=yy-25
		
		Sensors=SensorsSetup: xx=adjust+xx+ww/2
		
		dim sensor_x(2): sensor_x(0)=xx: sensor_x(1)=xx-adjust: sensor_y=yy
		
		For n=1 To 2 Step 1	
			Repository.Value("sensorListName")=Sensors(n)	
			if DragSensor (Sensors(n), xx,yy,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_FlexController name, TrafficZone, ZoneType, qq, zz, adjust
			   		Exit function
				else
			   		KillTrafficDOT2
			   		ValidationFailed name, "Could not find sensor: " & sensorName
					Test_FlexController = 1 
		   			Exit Function
				End If
			end if
			xx=xx-adjust: wait_custom 3
		Next

		Set obj1 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID")
		Set obj2 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone")
		
		If instr (1, controller_type, "EX Card")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID")
		ElseIf instr (1, controller_type, "FlexConnect")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_FL")
		ElseIf instr (1, controller_type, "VCC")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_VCC")
		End If
		
		delta=100: dim cnames(1): dim fxs(1): dim fys(1): dim fws(1): dim fhs(1): dim cchannels(1)
		For n = 1 To 2 Step 1
			cnames(n-1)= DragControllerNew ("", ccx+150+delta*(n-1), ccy+200, n, ti): wait_custom "fixed7"
			cchannels(n-1)= replace(replace(mid (contr_name, 1, instr(1, contr_name, "-" )), "1:", ""), "-", "")
			sizeandrotateobject  cnames(n-1), Flexconnectset(cnames(n-1), false, fx, fy, fw, fh), true, 25, 25, false
			Flexconnectset cnames(n-1), false, fxs(n-1), fys(n-1), fws(n-1), fhs(n-1): : wait_custom "fixed7"
		Next
	
	 	emea_messages=false: changeRF_messages=false
	
		For n = 1 To 2 Step 1
			map_sensor=true
			sMessage=ConfigureSensorControllerMessage(Sensors(n), "FlexConnect Rack 1", cchannels(n-1))
			GripAndDragObjects sensor_x(n-1),  sensor_y, fxs(n-1)+fws(n-1)-5,  fys(n-1)+5, sMessage, Sensors(n),  cnames(n-1): wait_custom "fixed7"
		Next: map_sensor=false
		
		mouseclick 	offzone_x, offzone_y, false

		MapLayersControllerCardConnectionsAPSwitch "on": wait_custom 5
			
		printscreen name: wait_custom "fixed7": wait_custom "fixed7"
		
		MapLayersControllerCardConnectionsLimitTo  contr_name: wait_custom 5
		
		printscreen name: wait_custom "fixed7": SystemSave "Don't Save", false, true: wait_custom "fixed7"
				
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_FlexController = 1		
		End If
		
		TestFinished Err.Description, name
		
end function

Function Test_FlexControllerChannelsAndCommands (byval name, byval xc, byval yc)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_FlexControllerChannelsAndCommands=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_FlexControllerChannelsAndCommands name, xc, yc: exit function
		end if
		
		if AvoidGateway(APEG_128) Then
			exit function
		end if
		
		ccx=xc: ccy=yc
		
		if M170TurnOn ("on")>0 then
			skip_start_email=true: TrafficDotLogin name, repeat, false: skip_start_email=false
		else
			'workaround for redraw issue bug # 
			TD2CloseX: wait_custom "fixed7"
			skip_start_email=true: TrafficDotLogin name, repeat, false: skip_start_email=false
		end if

		If instr (1, controller_type, "EX Card")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID")
		ElseIf instr (1, controller_type, "FlexConnect")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_FL")
		ElseIf instr (1, controller_type, "VCC")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_VCC")
		End If
		
		ncontr=1
		
		delta=100: dim cnames(1): dim fxs(1): dim fys(1): dim fws(1): dim fhs(1): dim cchannels(1)
		
		For n = 1 To ncontr Step 1
			cnames(n-1)= DragControllerNew ("", ccx+100+delta*(n-1), ccy, n, ti): wait_custom "fixed7"
			cchannels(n-1)= replace(replace(mid (contr_name, 1, instr(1, contr_name, "-" )), "1:", ""), "-", "")
			sizeandrotateobject  cnames(n-1), Flexconnectset(cnames(n-1), false, fx, fy, fw, fh), true, 25, 25, false
			Flexconnectset cnames(n-1), false, fxs(n-1), fys(n-1), fws(n-1), fhs(n-1): : wait_custom "fixed7"
		Next
		
		if contr_name="1:1-4" then
			min=1: max=4
		ElseIf contr_name="1:5-8" Then
			min=5: max=8
		End If
		
		' disable all channels
		For n = min To max Step 1
			If n=min Then
				activate=true
			else
				activate=false
			End If
			FlexControllerTabItemsPress  activate, "Channels", "Ch " & n: wait_custom 3		
			if CheckBoxByNum ("Channels", 1, "off", false, "") then
				wait_custom 3: click_button "Apply", obj, true, false
			end if: wait_custom 3		
		Next: wait_custom 3
			
		FlexControllerTabItemsPress  activate, "Channels", "Ch " & min: wait_custom 3		
		if CheckBoxByNum ("Channels", 1, "off", false, "") then
			wait_custom 3: click_button "Apply", obj, true, false
		end if: wait_custom 3
		
		
		printscreen name: wait_custom "fixed7"
		
		'enabled all channels and change other controls values
		For n = min To max Step 1
			FlexControllerTabItemsPress  activate, "Channels", "Ch " & n: wait_custom 3
			if CheckBoxByNum ("Channels", 1, "on", false, "") then
				wait_custom 3: click_button "Apply", obj, true, false
			end if: wait_custom 3
			If n=max Then
				RadioButtonByNum 1, true, false, "Pulse", false: wait_custom 3
				RadioButtonByNum 2, true,  false, "Presence", false: wait_custom 3
				ComboBoxByNum  "Channels: Delay/Extension Mode", 2, true, true, false, "Delay", 1, false: wait_custom 3
				ComboBoxByNum  "Channels: Delay/Extension Time Value", 3, true, true, false, "3", 1, false: wait_custom 3
				ComboBoxByNum  "Channels: Holdover Settings", 4, true, true, false, "0.15", 1, false: wait_custom 3
				ComboBoxByNum  "Channels: Watchdog Failsafe Mode", 5, true, true, false, "Present", 1, false: wait_custom 3
				ComboBoxByNum  "Channels: Failsafe Mode Trigger", 6, true, true, false, "All Sensors", -1, true: wait_custom 3
			End If
		Next: wait_custom 3
				
		printscreen name: wait_custom "fixed7"
		
		UnmapFlexcontroller contr_name, false: wait_custom "fixed7"
				
		FindDevicesInTheList contr_name, true, objcf, tryid
		
		ControllerCardConfigTabs "Commands": wait_custom "fixed7"
		
		commands="Reset Interface;Reset CF Count;Reset Interface to Default;Identify Interface;Refresh"
		commands = split(commands, ";")
		
		For each cmd in commands
			FlexControllerCommands cmd
		next
		
		SystemSave "Don't Save", false, true: wait_custom "fixed7"
				
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_FlexControllerChannelsAndCommands = 1		
		End If
		
		TestFinished Err.Description, name
		
end function

Function FlexControllerCommands(byval cmdname)
	functionstart "FlexControllerCommands" & " " & cmdname
	click_button cmdname, objb, true, false: wait_custom "fixed7"
	If cmdname="Reset Interface to Default" Then
		wait_custom 5:  click_button "Yes", objb, true, false
	End If
	functionend "FlexControllerCommands"
End Function



Function UnmapFlexcontroller(byval name, byval activate)
	functionstart "UnmapFlexcontroller" & " " & name
	ControllerCardConfigTabs "Info": wait_custom "fixed7"
	click_button "Unmap", objb, true, false: wait_custom 5: click_button "Yes", objb, true, false
	functionend "UnmapFlexcontroller"
End Function


Function Test_MapLayers(byval name, byval TrafficZone, byval zoneType, byval qq, byval zz)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_MapLayers=0
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_MapLayers name, TrafficZone, ZoneType, qq, zz: exit function
		end if
		
		if AvoidGateway(APEG_128) Then
			exit function
		end if
		
		if M170TurnOn ("on")>0 then
			skip_start_email=true: TrafficDotLogin name, repeat, false: skip_start_email=false
		else
			'workaround for redraw issue bug # 
			TD2CloseX: wait_custom "fixed7"
			skip_start_email=true: TrafficDotLogin name, repeat, false: skip_start_email=false
		end if
		
		ValidateDropdownList 0, "CC Card Info...", "Messages_0062"
		
		Sensors=SensorsSetup: sensorName = Sensors(0)
		
		apx=qq: apy=zz: ti=0
		
		DragAP apx, apy+100, oap, 0: wait_custom 3: DragControllerNew "", qq+250, zz+100, 2, ti: wait_custom "fixed7"
		
		DragSensorZone TrafficZone, qq, zz, xx, yy, ww, hh,tryid: wait_custom 3: SensorZoneTypeChange zoneType, true: wait_custom 3
		
		If hh>ww Then 
			yy=yy+hh/2: adjust=0
		end if
	
		xx=adjust+xx+ww/2
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_MapLayers name, TrafficZone, zoneTYPE, qq, zz
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_MapLayers = 1 
		   		Exit Function
			End If
		end if
	
		SensorVerticalPositionChange 1, true: wait_custom 5
			
		Set obj = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("Access Point")
		Set obj1 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID")
		Set obj2 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone")
		
		If instr (1, controller_type, "EX Card")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID")
		ElseIf instr (1, controller_type, "FlexConnect")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_FL")
		ElseIf instr (1, controller_type, "VCC")>0 Then
			Set obj3 = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_VCC")
		End If
			
		MapLayersSensorZonesAPSwitch false: wait_custom "fixed7": VerifyObjectOnMap "Sensor Zone", false, obj2
		MapLayersSensorZonesAPSwitch true: wait_custom "fixed7": VerifyObjectOnMap "Sensor Zone", true, obj2	
		printscreen name: wait_custom "fixed7"
		
		MapLayersControllerAPSwitch false: wait_custom "fixed7": VerifyObjectOnMap "Controller", false, obj3				
		MapLayersControllerAPSwitch true: wait_custom "fixed7": VerifyObjectOnMap "Controller", true, obj3	
		printscreen name: wait_custom "fixed7"
		
		wait_custom "fixed7": SystemSave "Don't Save", false, true		
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_MapLayers = 1		
		End If
		TestFinished Err.Description, name
		
end function

Function VerifyObjectOnMap (byval name, byval positive, byval obj)
	functionstart "VerifyObjectOnMap"
	Select Case positive
		Case true
			stepname = "Verify object on map: " & name
		Case false
			stepname = "Verify object not on map: " & name
	End Select
	If positive Then
		IF obj.Exist then
			If name="Sensor" Then
				sensorname=Repository.Value("sensorListName")
				If instr(1, obj.GetROProperty ("name"), sensorname)>0 Then
					ValidationSucceeded stepname, name
				else
					ValidationFailed stepname, name
				End If
			else
				ValidationSucceeded stepname, name
			End If
		else
			ValidationFailed stepname, name
		end if 
	else
		If obj.Exist then
			If name="Sensor" Then
				sensorname=Repository.Value("sensorListName")
				If instr(1, obj.GetROProperty ("name"), sensorname)>0 Then
					ValidationFailed stepname, name
				else
					ValidationSucceeded stepname, name
				End If
			else
				ValidationFailed stepname, name
			End If
		else
			ValidationSucceeded stepname, name
		end if
	end if 
	functionend "VerifyObjectOnMap"
End Function

Sub ActivateMapLayers
	functionstart "ActivateMapLayers"
	Set OBJ = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map Layers")
	If OBJ.Exist Then
		OBJ.Click
	else
		ClickFromConfig 927, 91
	End If
	wait_custom 3
	functionend "ActivateMapLayers"
End Sub

Sub MapLayersSensorsSwitch (byval onoff)
	functionstart "MapLayersSensorsSwitch" & " " & onoff
	mousePoint 5, 5: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Sensors, Repeaters, AP").Click
	functionend "MapLayersSensorsSwitch"
End Sub

Function MapLayersSensorsCHK 
	functionstart "MapLayersSensorsCHK"
	MapLayersSensorsCHK=UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Sensors, Repeaters, AP").GetROProperty("togglestate")
	functionend "MapLayersSensorsCHK"
End Function

Sub MapLayersPendingConnectionsSwitch (byval onoff)
	functionstart "MapLayersPendingConnectionsSwitch" & " " & onoff
	mousePoint 5, 5: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Pending Connections").Click
	functionend "MapLayersPendingConnectionsSwitch"
End Sub

Sub MapLayersControllerCardConnectionsSwitch (byval onoff)
	functionstart "MapLayersControllerCardConnectionsSwitch" & " " & onoff
	UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Controller Card Connections").Click
	functionend "MapLayersControllerCardConnectionsSwitch"
End Sub

Sub MapLayersRadioConnectionsSwitch (byval onoff)
	functionstart "MapLayersRadioConnectionsSwitch" & " " & onoff
	mousePoint 5, 5: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("RF Connections").Click
	functionend "MapLayersRadioConnectionsSwitch"
End Sub

Sub MapLayersSensorZonesSwitch (byval onoff)
	functionstart "MapLayersSensorZonesSwitch" & " " & onoff
	mousePoint 5, 5: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Sensor Zones").Click
	functionend "MapLayersSensorZonesSwitch"
End Sub

Sub MapLayersControllerSwitch (byval onoff) 
	functionstart "MapLayersControllerSwitch" & " " & onoff
	mousePoint 5, 5: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Controller Cards").Click
	functionend "MapLayersControllerSwitch"
End Sub

Function MapLayersControllerCHK
	functionstart "MapLayersControllerCHK"
	MapLayersControllerCHK=UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Controller Cards").GetROProperty("togglestate")
	functionend "MapLayersControllerCHK"
End function

Function MapLayersRadioConnectionsCHK
	functionstart "MapLayersRadioConnectionsCHK"
	MapLayersRadioConnectionsCHK=UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("RF Connections").GetROProperty("togglestate")
	functionend "MapLayersRadioConnectionsCHK"
End function

Function MapLayersControllerCardConnectionsCHK
	functionstart "MapLayersControllerCardConnectionsCHK"
	MapLayersControllerCardConnectionsCHK=UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Controller Card Connections").GetROProperty("togglestate")
	functionend "MapLayersControllerCardConnectionsCHK"
End function

Function MapLayersPendingConnectionsCHK 
	functionstart "MapLayersPendingConnectionsCHK"
	MapLayersPendingConnectionsCHK=UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Pending Connections").GetROProperty("togglestate")
	functionend "MapLayersPendingConnectionsCHK"
End function

Function MapLayersSensorZonesCHK
	functionstart "MapLayersSensorZonesCHK"
	MapLayersSensorZonesCHK=UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Sensor Zones").GetROProperty("togglestate")
	functionend "MapLayersSensorZonesCHK"
End function

Sub MapLayersSensorsRepeatersAPSwitch (byval boolcheck)
	functionstart "MapLayersSensorsRepeatersAPSwitch"
	ActivateMapLayers
	If boolcheck Then
		If cStr(MapLayersSensorsCHK) = "0" Then
			MapLayersSensorsSwitch "on"
		End If
	else
		If cStr(MapLayersSensorsCHK) = "1" Then
			MapLayersSensorsSwitch "off"
		End If
	End If
	wait_custom 1: ActivateMapLayers
	functionend "MapLayersSensorsRepeatersAPSwitch"
End Sub

Sub MapLayersPendingConnectionsAPSwitch (byval boolcheck)
	functionstart "MapLayersPendingConnectionsAPSwitch"
	ActivateMapLayers
	If boolcheck Then
		If cStr(MapLayersPendingConnectionsCHK) = "0" Then
			MapLayersPendingConnectionsSwitch "on"
		End If
	else
		If cStr(MapLayersPendingConnectionsCHK) = "1" Then
			MapLayersPendingConnectionsSwitch "off"
		End If
	End If
	wait_custom 1: ActivateMapLayers
	functionend "MapLayersPendingConnectionsAPSwitch"
End Sub

Sub MapLayersControllerCardConnectionsAPSwitch (byval boolcheck)
	functionstart "MapLayersControllerCardConnectionsSwitch"
	ActivateMapLayers: wait_custom 1
 	if vartype(boolcheck)= vbBoolean then
 	else
 		CheckBoxByNum "Map Layers", 2, boolcheck, false, "Controller Interface Connections"
 		functionend "MapLayersControllerCardConnectionsSwitch"	
		Exit sub
	End If
	If boolcheck Then
		If cStr(MapLayersControllerCardConnectionsCHK) = "0" Then
			MapLayersControllerCardConnectionsSwitch "on"
		End If
	else
		If cStr(MapLayersControllerCardConnectionsCHK) = "1" Then
			MapLayersControllerCardConnectionsSwitch "off"
		End If
	End If
	wait_custom 1: ActivateMapLayers
	functionend "MapLayersControllerCardConnectionsSwitch"
End Sub

Sub MapLayersSwitch (byval num, byval descript, byval onoff, byval activate)
	functionstart "MapLayersSwitch" & " " & descript
	if activate then ActivateMapLayers: wait_custom 1
	CheckBoxbynum "Map Layers", num, onoff, false, descript: wait_custom 1
	if activate then ActivateMapLayers
	functionend "MapLayersSwitch"
End Sub

function MapLayersControllerCardConnectionsLimitTo(byval selection)
	functionstart "MapLayersControllerCardConnectionsLimitTo" & " " & selection
	ActivateMapLayers: wait_custom 1
	MapLayersSwitch 3, "Controller Card Connetcions: Limit to(check)", "on", false: wait_custom 3
	ComboBoxByNum "Controller Card Connetcions: Limit to(dropdwn)", 2, true,true , false, selection, 0: wait_custom 1
	ActivateMapLayers: wait_custom 1
	functionend "MapLayersControllerCardConnectionsLimitTo"
end function


Sub MapLayersRadioConnectionsAPSwitch (byval boolcheck)
	functionstart "MapLayersRadioConnectionsAPSwitch"
	ActivateMapLayers
	If boolcheck Then
		If cStr(MapLayersRadioConnectionsCHK) = "0" Then
			MapLayersRadioConnectionsSwitch "on"
		End If
	else
		If cStr(MapLayersRadioConnectionsCHK) = "1" Then
			MapLayersRadioConnectionsSwitch "off"
		End If
	End If
	wait_custom 1: ActivateMapLayers
	functionend "MapLayersRadioConnectionsAPSwitch"
End Sub

Sub MapLayersSensorZonesAPSwitch (byval boolcheck)
	functionstart "MapLayersSensorZonesAPSwitch"
	ActivateMapLayers
	If boolcheck Then
		If cStr(MapLayersSensorZonesCHK) = "0" Then
			MapLayersSensorZonesSwitch "on"
		End If
	else
		If cStr(MapLayersSensorZonesCHK) = "1" Then
			MapLayersSensorZonesSwitch "off"
		End If
	End If
	wait_custom 1: ActivateMapLayers
	functionend "MapLayersSensorZonesAPSwitch"
End Sub

Sub MapLayersControllerAPSwitch (byval boolcheck)
	functionstart "MapLayersControllerAPSwitch"
	ActivateMapLayers
	If boolcheck Then
		If cStr(MapLayersControllerCHK) = "0" Then
			MapLayersControllerSwitch "on" 
		End If
	else
		If cStr(MapLayersControllerCHK) = "1" Then
			MapLayersControllerSwitch "off"
		End If
	End If
	wait_custom 1: ActivateMapLayers
	functionend "MapLayersControllerAPSwitch"
End Sub

Function SensorZoneTypeCode(byval zoneType)
	functionstart "SensorZoneTypeCode"
	Dim id, name
		Select Case zoneType
			Case ""
				id=SENSOR_ZONE_TYPE__EMPTY: name="EMPTY"
			Case "Count"
				id=SENSOR_ZONE_TYPE_COUNT: name="COUNT"
			Case "Avc"
				id=SENSOR_ZONE_TYPE_AVC: name="AVC"
			Case "Microradar"
				id=SENSOR_ZONE_TYPE_MICRORADAR: name="MICRORADAR"
			Case "Speed"
				id=SENSOR_ZONE_TYPE_SPEED: name="SPEED"
			Case "Stop Bar"
				id=SENSOR_ZONE_TYPE_STOP_BAR: name="STOP_BAR"
			Case "Travel Time"
				id=SENSOR_ZONE_TYPE_TRAVEL_TIME: name="TRAVEL_TIME"
		End Select
		readXML2 "sensorZoneTypes.xml", name, id
		SensorZoneTypeCode=id
		functionend "SensorZoneTypeCode"
End Function

Function GetAPChannel (byval SPP)
	functionstart "GetAPChannel" & " " & SPP
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject(SPP)
	channel=obj.GetROProperty("name")
	GetAPChannel= trim(replace(channel, SPP & ":", ""))
	channel=GetAPChannel
	functionend "GetAPChannel" & " " & channel
End Function


Function Test_Dummy (byval name)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_Dummy=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_Dummy name: exit function
		end if
		
		writetologfile "THIS IS A TEST!!!"
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_Dummy = 1	
		End If
		
		TestFinished Err.Description, name
		
end function


Function Test_AutoAssignTimeslots (byval name)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_AutoAssignTimeslots=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_AutoAssignTimeslots name: exit function
		end if
		
		Tools "Utilities...", "Auto-assign Timeslots", "": wait_custom 3
		
		AutoAssignTimeSlots: wait_custom 3
		
		TD2CloseX ()
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_AutoAssignTimeslots = 1	
		End If
		
		TestFinished Err.Description, name
		
end function


Function AutoAssignTimeSlots()
	
	functionstart "AutoAssignTimeSlots"
	
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Auto-assigning timeslots"): wait_custom "fixed7"
	
	If obj.Exist Then
		Do  while instr(1, progress, "Auto-assigning timeslots complete.")>0
			progress = replace(obj.GetROProperty ("name"), vbLf, "")
			counter=counter+1: wait_custom 3
			If counter>30 Then
				ValidationFailed  "Timeslots Auto-assign", "timeout"
				Exit do
			End If
		loop
	End If
	
	ActivateButton "OK"
	
	functionend "AutoAssignTimeSlots"
End Function

Function ManuallyAssignTimeSlotValidation()
	functionstart "ManuallyAssignTimeSlotValidation"
	ManuallyAssignTimeSlotValidation=0
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Cannot manually assign")
	wait_custom 3
	If obj.Exist Then
		lgf=obj.GetROProperty ("name")
		WriteToLogfile lgf: ActivateButton "OK": wait_custom 3
		ValidationFailed  "ManuallyAssignTimeSlotValidation", replace(lgf, vbLf, "")
		ManuallyAssignTimeSlotValidation=1
	else
		ValidationSucceeded "ManuallyAssignTimeSlotValidation", ""
	End If
	functionend "ManuallyAssignTimeSlotValidation"
End Function

Function Test_ChangeRFchannelByDragging (byval name, byval x, byval y)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ChangeRFchannelByDragging=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ChangeRFchannelByDragging name, x, y: exit function
		end if
		
		if AvoidGateway(APEG_1450) Then
			exit function
		end if
		
		changeRF_messages=true
		
		noYes=false: bName="Yes": clickOK=true: partialvalid=false: validation=SavingToAPMessage0()
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")
		
		apx=x: apy=y
		
		DragAP apx, apy+100, oap, 0: wait_custom 3
		
		GetSPP1xyw apx_1, apy_1, apw_1: GetObjectABSXYWH "AP", ActivateAP(), apx1, apy1, aph, apw
		
		dim apxc(1): dim apyc(1): apxc(0)=apx1: apxc(1)=apx_1 + apw_1/2: apyc(0)=apy1: apyc(1)=apy_1
		
		zoneName = DragSensorZone ("Sensor Zone EB", x, y, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange "Stop Bar", true: wait_custom 3
  	
		xx=xx+ww/2
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ChangeRFchannelByDragging name, x, y
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ChangeRFchannelByDragging = 1 
		   		Exit Function
			End If
		end if
		SensorVerticalPositionChange 1, true: : wait_custom 2: ConfigTabPress "Cmds": wait_custom 7
		
		ws1= SensorWidthGet: xs1= SensorAbsXGet: ys1= SensorAbsYGet

		GripAndDragObjects xs1+ws1/2, ys1+ws1/2, apx_1+apw_1/2, apy_1, _
					SensorChangeRFchannelMessage(sensorName, GetAPChannel("SPP-1")), sensorName, "AP/SPP-1"	
		
		wait_custom 3: CommandLogCommandComplete tryit, 5
		
		MapLayersRadioConnectionsAPSwitch true: wait_custom "fixed7"
		
		printscreen name: wait_custom "fixed7"
		
		for n=0 to 1
		
			click_button "Clear Log", obj, true, false: wait_custom 3
			
			GripAndDragObjects xs1+ws1/2, ys1+ws1/2, apx1-apw/2, apy1-apw/2, _
					SensorChangeRFchannelMessage(sensorName, GetAPChannel("SPP-0")), sensorName, "AP/SPP-0"	
			
			wait_custom 3: CommandLogCommandComplete tryit, 5
		next
		
		printscreen name: wait_custom "fixed7"
				
		TrafficDotClose false, true
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ChangeRFchannelByDragging = 1	
		End If
		TestFinished Err.Description, name
		
end function

Function Test_ConfigureSensorInTheTray (byval name, byval TrafficZone, byval zoneType, byval qq, byval zz)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ConfigureSensorInTheTray=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ConfigureSensorInTheTray name, TrafficZone, ZoneType, qq, zz: exit function
		end if
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")
	
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange zoneType, true: wait_custom 3
  
		ConfigureSensor sensorName, -3, 1, zoneName: wait_custom 7
		
		printscreen name: wait_custom 7
		
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes" 'meesage should change
		
		device_in_tray=true: DeleteSensor sensorName, _
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID"), _
				SensorDeleteConfirmMessage2(sensorName), "", ""	: device_in_tray=false

		wait_custom 5: UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes"
		
		if SensorZoneObjectOnMap (zoneName) then
			ValidationFailed zoneName, "on map after being unmapped"
		else
			ValidationSucceeded zoneName, "unmapped"
		end if
		
		wait_custom 5: SystemSave "Don't Save", false, true	
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ConfigureSensorInTheTray = 1	
		End If
		
		TestFinished Err.Description, name
End Function

Function ConfigureSensor(byval sensorName, byval horpos, byval vertpos, byval zoneName)
		functionstart "ConfigureSensor" & " " & sensorName
		FindDevicesInTheList sensorName, true, obj1, tryid
		SensorVerticalPositionChange vertpos, false: wait_custom 7
		SensorHorizontalPositionChangeA horpos, false: wait_custom 7: 
		ChangeSensorZoneA "", zoneName, true: wait_custom 3		
		functionend "ConfigureSensor"
End Function

Function Test_UnmapSensorAndSensorZone (byval name, byval TrafficZone, byval zoneType, byval qq, byval zz)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UnmapSensorAndSensorZone=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UnmapSensorAndSensorZone name, TrafficZone, ZoneType, qq, zz: exit function
		end if
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")
	
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange zoneType, true: wait_custom 3
  	
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y")
		ww=GetSensorZoneProperty("width"): hh=GetSensorZoneProperty("height")
		
		If hh>ww Then 
			yy=yy+hh/2: adjust=0
		End If 
		
		xx=adjust+xx+ww/2
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_UnmapSensorAndSensorZone name, TrafficZone, zoneTYPE, qq, zz, adjust, flashSave
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
		   		TestFinished "UserPreferencesAutoSaveFlash", name: wait_custom 7
				Test_UnmapSensorAndSensorZone = 1 
		   		Exit Function
			End If
		end if
		
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		
		SensorVerticalPositionChange 1, true: wait_custom 7
		
		printscreen name: wait_custom 7
				
		UnmapSensor sensorName, _
				null, _
				"", x1+w1/2, y1: wait_custom 3
		
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes" 'meesage should change
		
		device_in_tray=true: DeleteSensor sensorName, _
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID"), _
				SensorDeleteConfirmMessage2(sensorName), "", ""	: device_in_tray=false

		wait_custom 3
		
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes"
		
		if SensorZoneObjectOnMap (zoneName) then
			ValidationFailed zoneName, "on map after being unmapped"
		else
			ValidationSucceeded zoneName, "unmapped"
		end if
		
		printscreen name: wait_custom "fixed7": SystemSave "Don't Save", false, true	
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_UnmapSensorAndSensorZone = 1	
		End If
		
		TestFinished Err.Description, name
End Function


Function Test_OneSensorZoneType(byval name, byval TrafficZone, byval zoneType, byval qq, byval zz, byval adjust, byval flashSave)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_OneSensorZoneType=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_OneSensorZoneType name, TrafficZone, ZoneType, qq, zz, adjust, flashSave: exit function
		end if
		
		noYes=false: bName="Yes": clickOK=true: partialvalid=false: validation=SavingToAPMessage0()

		If role_c="GMG" Then
			ValidateButtons "GMG", "Map:", false, false, "Messages_0044": wait_custom 5
			ValidateButtons "GMG", "Gateway:", true, false, "Messages_0045"
			skipflash=true
			noYes=true: bName="OK": clickOK=false: partialvalid=false: validation=SavingToAPMessage0()
		else
			ValidateButtons "Standard", "Map:", true, true, "Messages_0042": wait_custom 5
			ValidateButtons "Standard", "Gateway:", true, true, "Messages_0043"
		End If
	
		if flashSave then
			If skipflash Then
				skipflash=false
			else
				if (UserPreferencesAutoSaveFlash (true))<0 then
					ValidationFailed name, "UserPreferencesAutoSaveFlash"
					TestFinished "UserPreferencesAutoSaveFlash", name: wait_custom 7
					Test_OneSensorZoneType = 1 
		   			Exit Function
				end if
			end if
			clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
		end if
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")
		
		DragCompass qq, zz-100: wait_custom 3
		
		apx=qq: apy=zz
		
		res = DragAP (apx, apy+100, oap, 0): wait_custom "fixed7"
	
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange zoneType, true: wait_custom 3
  	
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y")
		ww=GetSensorZoneProperty("width"): hh=GetSensorZoneProperty("height")
		
		If hh>ww Then 
			yy=yy+hh/2: adjust=0
		End If 
		
		xx=adjust+xx+ww/2
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_OneSensorZoneType name, TrafficZone, zoneTYPE, qq, zz, adjust, flashSave
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
		   		TestFinished "UserPreferencesAutoSaveFlash", name: wait_custom 7
				Test_OneSensorZoneType = 1 
		   		Exit Function
			End If
		end if
		
		SensorVerticalPositionChange 1, true: wait_custom 7
				
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 7
		
		printscreen name: wait_custom 3
		
		Dim sensorZones(0), sztypes(0): 
		
		sensorZones(0)=zoneName: sztypes(0) = SensorZoneTypeCode(zoneType)
		
		readXML "sensorZoneTypeMapping.xml", sensorZones, "", sztypes: wait_custom 3
		
		set objs=UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID")
		
		If counter<2 Then
			If objs.exist Then
				DeleteSensor sensorName, _
					objs, _
					SensorDeleteConfirmMessage2(sensorName), "", ""	
			else
				counter=counter+1
				
				set objs=UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID")
				
				DeleteSensor sensorName, _
					objs, _
					SensorDeleteConfirmMessage2(sensorName), "", ""	
			End If
		End If
		
		wait_custom 3
		
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes"
		
		wait_custom 3
		
		UnmapAP "", "", false, APDeleteConfirmMessage(): wait_custom 3
		
		UnmapCompass CompassRemoveMessage(), x_compass+5, y_compass+5: wait_custom 3

		if flashSave then 
			If role_c="GMG" Then
				noYes=true: system_slow=2
			else
				UserPreferencesAutoSaveFlash false: noYes=false
			end if
		end if
		
		wait_custom "fixed7": SystemSave "Save_2", noYes, true
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_OneSensorZoneType = 1	
		End If
		
		TestFinished Err.Description, name
End Function

Function Test_ExportImportDotTable(byval name, byval x, byval y)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ExportImportDotTable=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ExportImportDotTable name, x, y: exit function
		end if
		
		apx=x: apy=y: DragAP apx, apy+200, oap, 0: wait_custom "fixed15"
	
		For i = 1 To 2 Step 1
			If xx="" and yy="" and ww="" Then
				zoneName = DragSensorZone ("Sensor Zone EB", x, y, xx, yy, ww, hh,tryid): wait_custom 3
				xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): hh=GetSensorZoneProperty("height")
				ww=GetSensorZoneProperty("width")
			End If
		Next
		zone1_x=xx: zone1_y=yy: zone1_w=ww: zone1_h=hh

		SensorZoneTypeChange "Count", true: wait_custom 3
			
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")	
	
		if DragSensor (sensorName, xx,yy+5, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ExportImportDotTable name, x, y
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ExportImportDotTable = 1 
		   		Exit Function
			End If
		end if
		wait_custom 2: SensorVerticalPositionChange 1, true
		GetObjectXYWH sensorName, SensorByVoltageSet(), xs, ys, hs, ws: xs=xs+ws/2: ys=ys+ws/2

		sensorNameM= SetSensorName (number_of_tries, MicroradarsSetup, "MicroRadar")
		
		zoneNameM = DragSensorZone ("Sensor Zone WB", x, y+50, xx_m, yy_m, ww_m, hh_m, tryid): wait_custom 3
		SensorZoneTypeChange "Microradar", true: wait_custom 7
  			
		if DragSensor (sensorNameM, xx_m,yy_m, sensorNameM)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ExportImportDotTable name, x, y
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ExportImportDotTable = 1 
		   		Exit Function
			End If
		end if	
		SensorHorizontalPositionChange 3, true: wait_custom 3: SensorVerticalPositionChange 3, true: wait_custom 3	
		
		zoneNameG = DragSensorZone ("Sensor Zone EB", x, y+100, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange "Count", true: wait_custom 7
  		
  		xxn=10+xx+ww/2: yyn=yy+5
		
		sensorNameG="008E"
		
		DragNewSensor sensorNameG, xxn, yyn, sensorNameG: wait_custom 2: SensorVerticalPositionChange 1, true: wait_custom 5
					
		TrafficDotSave SavingToAPMessage0(), SavingToAPMessage1(), "Yes", false, false, true: wait_custom 5
		
		ActivateAP: wait_custom 3: filename= "export_" & GetDateTimeStamp & ".csv": csvfilename=ARCHIVED_FOLDER & filename: wait_custom 10
		
		printscreen name: wait_custom 5
		
		ExportImportDotTable csvfilename, false: wait_custom 10
		
		DeleteSensor sensorNameG, _
				UIObject("Sensor null"), _
				SensorDeleteConfirmMessage(sensorNameG), "", "": wait_custom "fixed10"
				
		UnmapSensorZone zoneNameG, SensorZoneDeleteConfirmMessage(zoneNameG), false,false, "Yes": wait_custom 5
				
		TrafficDotSave SavingToAPMessage0(), SavingToAPMessage1(), "Yes", false, false, true: wait_custom 5
		
		CloseTrafficDot(): wait_custom 10
		
		skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 5: skip_start_email=false
		
		ActivateAP: wait_custom 3: ExportImportDotTable csvfilename, true: wait_custom 15
		
		VerifyList "Sensor", sensorNameG, false: wait_custom "fixed7"
		
		printscreen name: wait_custom 5
				
		DeleteSensor sensorName, _
				null, _
				SensorDeleteConfirmMessage2(sensorName), xs, ys: wait_custom 5
				
		ActivateObjectOnmap "Sensor Zone:" & zoneName, zone1_x+zone1_w/2, zone1_y+zone1_h/2: wait_custom 5
				
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), true,false, "Yes": wait_custom 5
				
		DeleteSensor sensorNameM, _
				UIObject("SensorID"), _
				SensorDeleteConfirmMessage2(sensorNameM), "", "": wait_custom "fixed7"	

		ActivateObjectOnmap "Sensor Zone:" & zoneNameM, xx_m + ww_m/2, yy_m + hh_m/2: wait_custom 5
		
		UnmapSensorZone zoneNameM, SensorZoneDeleteConfirmMessage(zoneNameM), false,false, "Yes": wait_custom "fixed7"
		
		UnmapAP "", "", true, APDeleteConfirmMessage1() : wait_custom "fixed7"
		
		ClearAllConfiguredSensors: wait_custom "fixed7"
		
		SystemSave "Save_2", false, true
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_ExportImportDotTable = 1 		
		End If
		
		TestFinished Err.Description, name
End Function

Function Test_ClearPairings(byval name, byval x, byval y, byval adjust)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ClearPairings=0
			
		if TrafficDotLogin(name, repeat, false)<0 then
			exit function
		ElseIf repeat=1 Then
			Test_ClearPairings name, x, y, adjust: exit function
		end if
		
		number_of_dot_pairs="1"
		
		DragSensorZone "Sensor Zone EB", x, y, xx, yy, ww, hh,tryid: wait_custom 3: SensorZoneTypeChange "Speed", true: wait_custom 7

		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): ww=GetSensorZoneProperty("width")
		
		Sensors=SensorsSetup: xx=adjust+xx+ww/2
		
		dim sensor_x(2): sensor_x(0)=xx: sensor_x(1)=xx-adjust: sensor_y=yy
		
		For n=1 To 2 Step 1	
			Repository.Value("sensorListName")=Sensors(n)	
			if DragSensor (Sensors(n), xx,yy,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_ClearPairings name, "Sensor Zone EB", x, y, adjust
			   		Exit function
				else
			   		KillTrafficDOT2
			   		ValidationFailed name, "Could not find sensor: " & sensorName
					Test_ClearPairings = 1 
		   			Exit Function
				End If
			end if
			If n=1 Then	
				ConfigTabPress "Cmds": wait_custom 2
				xx0=SensorAbsXGet: yy0=SensorAbsYGet: ww0=SensorWidthGet		
				ConfigTabPress "Position": wait_custom 2
			End If
			SensorVerticalPositionChange (n), true: xx=xx-adjust: wait_custom 1
			if n=1 then
				ActivateSensorZone "", "", "": wait_custom 5
			end if: wait_custom 10
		Next
		
		mouseClick xx0+ww0/2, yy0+ww0/2, true: wait_custom 3 'apply SHIFT to select both sensors
		
		VehicleLengthAndSeparation 2, 6: wait_custom 3: ApplyChanges: wait_custom 5
	
		ActivateAPInfo: wait_custom 3: APInfoTabsPress "Pairings"
		
		str= "Leading Dot " & Sensors(1) & " Trailing Dot " & Sensors(2) 'Sensor Separation (ft) 2 Vehicle Length Correction 6"
		
		ReadTable UIListTable("List_AP_Table"), "AP Pairings",false, false, str, false, "", false: wait_custom 3
		
		Tools "Clearing...", "Clear Dot Pair Table", "": wait_custom 5
		
		ReadTable UIListTable("List_AP_Table"), "AP Pairings",false, false, "", false, "", false: wait_custom "fixed7"
		
		SystemSave "Don't Save", false, true
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_ClearPairings = 1	
		End If
		TestFinished Err.Description, name
End Function

Function Test_UnpairDots(byval name, byval x, byval y, byval adjust)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UnpairDots=0
			
		if TrafficDotLogin(name, repeat, false)<0 then
			exit function
		ElseIf repeat=1 Then
			Test_UnpairDots name, x, y, adjust: exit function
		end if
		
		number_of_dot_pairs="1"
		
		DragSensorZone "Sensor Zone EB", x, y, xx, yy, ww, hh,tryid: wait_custom 3: SensorZoneTypeChange "Speed", true: wait_custom 7

		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): ww=GetSensorZoneProperty("width")
		
		Sensors=SensorsSetup: xx=adjust+xx+ww/2
		
		dim sensor_x(2): sensor_x(0)=xx: sensor_x(1)=xx-adjust: sensor_y=yy
		
		For n=1 To 2 Step 1	
			Repository.Value("sensorListName")=Sensors(n)	
			if DragSensor (Sensors(n), xx,yy,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_ClearPairings name, "Sensor Zone EB", x, y, adjust
			   		Exit function
				else
			   		KillTrafficDOT2
			   		ValidationFailed name, "Could not find sensor: " & sensorName
					Test_ClearPairings = 1 
		   			Exit Function
				End If
			end if
			If n=1 Then
				ConfigTabPress "Cmds": wait_custom 2
				xx0=SensorAbsXGet: yy0=SensorAbsYGet: ww0=SensorWidthGet		
				ConfigTabPress "Position": wait_custom 2
			End If
			SensorVerticalPositionChange (n), true: xx=xx-adjust: wait_custom 1
			if n=1 then
				ActivateSensorZone "", "", "": wait_custom 5
			end if: wait_custom 10
		Next
		
		mouseClick xx0+ww0/2, yy0+ww0/2, true: wait_custom 3 'apply SHIFT to select both sensors
		
		VehicleLengthAndSeparation 2, 6: wait_custom 3: ApplyChanges: wait_custom 5
		
		EditBOX 0, false, Sensors(2), "Trailing Sensor", true: wait_custom 1
		
		EditBOX 1, false, Sensors(1), "Leading Sensor", true: wait_custom 5
	
		ActivateAPInfo: wait_custom 3: APInfoTabsPress "Pairings": wait_custom 5
		
		str= "Leading Dot " & Sensors(1) & " Trailing Dot " & Sensors(2) 'Sensor Separation (ft) 2 Vehicle Length Correction 6"
		
		ReadTable UIListTable("List_AP_Table"), "AP Pairings",false, false, str, false, "", false: wait_custom 3
		
		printscreen name: wait_custom 3
		
		TrafficDotSave SaveDOTPairMessage1(),SaveDOTPairMessage2(), "Yes", false, true, true: wait_custom 5
		
		TrafficDOtclose false, true: wait_custom 5
		
		skip_start_email = true: TrafficDotLogin name, repeat, false
		
		Activateobjectonmap "Sensor", xx0+ww0/2, yy0+ww0/2: wait_custom 1
		
		mouseClick xx0+ww0/2-adjust, yy0+ww0/2, true: wait_custom "fixed10" 'apply SHIFT to select both sensors
		
		if units_g=UNITS_METRIC then
			EditBOX "Sensor Separation (mm)", false, "2",  "Sensor Separation", true: wait_custom 1
			EditBOX "Vehicle Length Correction (mm)", false, "6", "Vehicle Length Correction", true: wait_custom 1
			'EditBOX 2, true, "2",  "Sensor Separation", true: wait_custom 1
			'EditBOX 3, true, "6", "Vehicle Length Correction", true: wait_custom 5
		else
			EditBOX "Sensor Separation (ft)", false, "2",  "Sensor Separation", true: wait_custom 1: 
			EditBOX "Vehicle Length Correction (ft)", false, "6", "Vehicle Length Correction", true: wait_custom 5
			'EditBOX 2, true, "2",  "Sensor Separation", true: wait_custom 1: 
			'EditBOX 3, true, "6", "Vehicle Length Correction", true: wait_custom 5
		end if
		
		UnPairDots "Unpair", "Yes": wait_custom "fixed15"
		
		'0.0032808398950131233
		'107.50328083989501
		if units_g=UNITS_METRIC then
			EditBOX "Sensor Separation (mm)  Value must be between 1 and 32767 mm", false, "0",  "Sensor Separation", true: wait_custom 1
			EditBOX "Vehicle Length Correction (mm)", false, "0", "Vehicle Length Correction", true
			'EditBOX 2, true, "0",  "Sensor Separation", true: wait_custom 1
			'EditBOX 3, true, "0", "Vehicle Length Correction", true
		else
			EditBOX "Sensor Separation (ft)  Value must be between 1 and 108 ft", false, "0",  "Sensor Separation", true: wait_custom 1: 
			EditBOX "Vehicle Length Correction (ft)", false, "0", "Vehicle Length Correction", true: wait_custom 5
			'EditBOX 2, true, "0",  "Sensor Separation", true: wait_custom 1: 
			'EditBOX 3, true, "0", "Vehicle Length Correction", true: wait_custom 5
		end if
	
		ActivateAPInfo: wait_custom 3: APInfoTabsPress "Pairings": wait_custom 5
		
		ReadTable UIListTable("List_AP_Table"), "AP Pairings",false, false, "", false, "", false: wait_custom "fixed7"
		
		printscreen name: wait_custom 3
		
		ClearAllConfiguredSensors: wait_custom 5
			
		number_of_dot_pairs="0": SystemSave "Save_2", false, true
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_UnpairDots = 1	
		End If
		TestFinished Err.Description, name
End Function



Function Test_ClearConfiguredSensors(byval name, byval x, byval y)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ClearConfiguredSensors=0
		
		if  TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ClearConfiguredSensors name, x, y: exit function
		end if

		Sensors=SensorsSetup: sensorName = Sensors(0)
	
		zoneName = DragSensorZone ("Sensor Zone EB", x, y, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange "Count", true: wait_custom 3
  	
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): 
		ww=GetSensorZoneProperty("width"): xx=10+xx+ww/2
		
		if DragSensor (sensorName, xx,yy, "")<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ClearConfiguredSensors name, x, y
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ClearConfiguredSensors = 1 
		   		Exit Function
			End If
		end if
		
		sensorNameM = MicroradarSensorsSetup()
		
		zoneNameM = DragSensorZone ("Sensor Zone WB", x, y+50, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange "Microradar", true: wait_custom 7
  	
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y")
		
		if DragSensor (sensorNameM, xx,yy, "")<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ExportImportDotTable name, x, y
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ExportImportDotTable = 1 
		   		Exit Function
			End If
		end if	
		
		zoneNameG = DragSensorZone ("Sensor Zone EB", x, y+100, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange "Stop Bar", true: wait_custom 7
  	
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): ww=GetSensorZoneProperty("width")
	
		sensorNameG="005E": Repository.Value("sensorListName")=sensorNameG: xx=10+xx+ww/2
	
		DragNewSensor sensorNameG, xx, yy, "": wait_custom 2
		
		sensor_deleted_from_cz=false
		
		UnmapSensorZone zoneName, SensorZoneSensorMessage0(sensorName), false, false, "": wait_custom 3
		
		UnmapSensorZone zoneNameM, SensorZoneSensorMessage0(sensorNameM), false, false, "": wait_custom 3
				
		UnmapSensorZone zoneNameG, SensorZoneSensorMessage0(sensorNameG), false, false, "": wait_custom 3
		
		printscreen name: wait_custom 3
		
		ClearAllConfiguredSensors: wait_custom 5: sensor_deleted_from_cz=true: wait_custom "fixed5"

		Dim Zones(2): Zones(0)=zoneName: Zones(1)=zoneNameM: Zones(2)=zoneNameG
		For i = 0 To ubound(Zones) Step 1
			if SensorZoneObjectOnMap (Zones(i)) then
				ValidationFailed Zones(i), "on map after being cleared"
			else
				ValidationSucceeded Zones(i), "cleared"
			end if
		Next
		
		printscreen name: wait_custom 3
		
		SystemSave "Don't Save", false, true		
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ClearConfiguredSensors = 1	
		End If
		
		TestFinished Err.Description, name
End Function

Function Test_CancelExit(name, TrafficZone, zoneType, qq, zz)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_CancelExit=0

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_CancelExit name, TrafficZone, zoneType, qq, zz: exit function
		end if
		
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: 

		SensorZoneTypeChange zoneType, true: wait_custom 3
				
		SystemSave "Cancel", false, true: wait_custom 1
		
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes": wait_custom "fixed7"
		
		SystemSave "Exit", false, true
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_CancelExit = 1	
		End If	
		
		TestFinished Err.Description, name
end Function

Function Test_PreferencesTableInitialview (byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_PreferencesTableInitialview=0
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_PreferencesTableInitialview name: exit function
		end if
		
		UserPreferencesShowTableView tableview, true
		
		TrafficDotClose false, true: init_table_view_on=true
		
		skip_start_email=true: TrafficDotLogin name, repeat, true: skip_start_email=false: init_table_view_on=false
		
		printscreen name: wait_custom 3
		
		RadioButtonSelect ("RepeaterRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "Group By Repeater",false, true, "", false, "", false
		RadioButtonSelect ("SensorZoneRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "Group By Sensor Zone",false, true, "", false, "", false
		RadioButtonSelect ("NormalRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "View Normal",false, true, "", false, "", false
		RadioButtonSelect ("SummaryRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "View Summary",false, true, "", false, "", false
		RadioButtonSelect ("ViewDotTableRadioButton"): wait_custom 3:ReadTable UIListTable("List"), "View Dot Table",false, true, "", false, "", false
		RadioButtonSelect ("Activity"): wait_custom 3: ReadTable UIListTable("List"), "View Activity",false, true, "", false, "", false
		RadioButtonSelect ("NormalRadioButton"): wait_custom 3
		
		UserPreferencesShowTableView tableview, true
		
		TrafficDotClose false, true 
			
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_PreferencesTableInitialview = 1		
		End If
		
		TestFinished Err.Description, name
		
end function

Function Test_ReassignSensorZone(byval name, byval TrafficZone1, byval TrafficZone2, byval zoneType, byval qq, byval zz, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ReassignSensorZone=0

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ReassignSensorZone name, TrafficZone1, TrafficZone2, zoneType, qq, zz, adjust: exit function
		end if
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")
		
		zoneName1 = DragSensorZone (TrafficZone1, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: 
		SensorZoneTypeChange zoneType, true: wait_custom 3
		
		If hh>ww Then 
			yy=yy+hh/2: adjust=0
		end if
	
		xx=adjust+xx+ww/2
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ReassignSensorZone name, TrafficZone1, TrafficZone2, zoneType, qq, zz, adjust
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ReassignSensorZone = 1 
		   		Exit Function
			End If
		end if
		
		ConfigTabPress "Cmds": wait_custom 2
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		ConfigTabPress "Position": wait_custom 2
	
		sensor_x=x1+w1/2: sensor_y=y1+w1/2
		
		SensorVerticalPositionChange 1, true: wait_custom 3
			
		zoneName2 = DragSensorZone (TrafficZone2, qq+30, zz+30, xx, yy, ww, hh,tryid): wait_custom 3: 
		SensorZoneTypeChange zoneType, true: wait_custom 3: 	
		
		ActivateSingleSensor "", sensor_x, sensor_y: wait_custom 3

		ChangeSensorZone zoneName1, zoneName2, true: wait_custom 3

		printscreen name: wait_custom "fixed7"

		UnmapSensorZone zoneName1, SensorZoneDeleteConfirmMessage(zoneName1), false, false, "Yes": wait_custom "fixed7"
		
		sensor_deleted_from_cz=false
	
		UnmapSensorZone zoneName2, SensorZoneSensorMessage0(sensorName), false,  false, "": wait_custom "fixed7"
		
		If sensor_on_zone Then
			ValidationSucceeded "Validate sensor: " & sensorName & " on sensor zone: " & zoneName, ""
		else
			ValidationFailed "Validate sensor: " & sensorName & " on sensor zone: " & zoneName, ""
			SystemSave "Save_2",  false, true: TestFinished Err.Description, name
 		End If
		
		DeleteSensor sensorName, _
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID"), _
				SensorDeleteConfirmMessage2(sensorName), "", "": wait_custom 7

		UnmapSensorZone zoneName2, SensorZoneDeleteConfirmMessage(zoneName2), false, false, "Yes": wait_custom "fixed7"	
		
		VerifyList "Sensor", sensorName, false: wait_custom "fixed7"
		
		SystemSave "Save_2", false, true
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ReassignSensorZone = 1		
		End If
		
		TestFinished Err.Description, name

end function

Function Test_DragSensorsToNewStopZone(byval name, byval qq, byval zz, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_DragSensorsToNewStopZone=0

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_DragSensorsToNewStopZone name, qq, zz, adjust: exit function
		end if
		
		zoneName1 = DragSensorZone ("Sensor Zone EB", qq, zz, xx1, yy1, ww, hh,tryid): wait_custom 3: 
		SensorZoneTypeChange "Stop Bar", true: wait_custom 3
  		
		xx1=xx1+ww/4: yy1=yy1+hh/2

		wait_custom 10: sensorN=left(GenericSensorSetup(false), 3): sensornplus=3
		
		dim newsensors(1)
		For n = 1 To 2 Step 1
			newsensorname=sensorN & (n+sensornplus)
			DragNewSensor newsensorname, xx1+(n-1)*adjust, yy1, ""
			wait_custom 2: SensorVerticalPositionChange 1, true
			If n=1 Then
				xs1= SensorNewAbsXGet: ys1= SensorNewAbsYGet: ws1= SensorNewWidthGet: wait_custom 3
			End If
			UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab").UIAObject("Adv").Click: wait_custom 3
			newsensors(n-1)=newsensorname
		Next: wait_custom 10

		zoneName2 = DragSensorZone ("Sensor Zone EB", qq, zz+adjust*3, xx2, yy2, ww, hh,tryid): wait_custom 3: 
		
		SensorZoneTypeChange "Stop Bar", true: wait_custom 3: 
		
		target_ys=yy2+hh-2: printscreen name: wait_custom 3

		For n = 1 To 2 Step 1	
			GripAndDragObjects xs1+(n-1)*adjust+ws1/2, ys1+ws1/2, _
						xx2+(n-1)*adjust+ww/4, target_ys, "", newsensors(n-1) & " " & zoneName1,  zoneName2: wait_custom 3
		Next
		
		wait_custom 3: ActivateObjectOnmap "Sensor Zone", xx1+ww/2, yy1+hh/2: wait_custom 3

		UnmapSensorzoneXY zoneName1: wait_custom 3: ConfirmYesButtonXY: wait_custom 3

		TrafficDotSaveAndCloseXY true, 20, 30, 30

		skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 10:skip_start_email=false
		
		printscreen name: wait_custom 3

		TrafficDotSave SaveDOTMessage0, SaveDOTPairMessage2, "Yes", false, true, true: wait_custom 15

		UnmapSensorZone zoneName2, SensorZoneSensorMessage0(newsensors(0) & " " & newsensors(1)), false, true, "OK": wait_custom 7

		For n=1 To 2 Step 1	
			DeleteSensorDragOff newsensors(n-1),null,SensorDeleteConfirmMessage3(newsensors(n-1)), xx2+adjust*(n-1)+ww/4, target_ys
		Next: wait_custom 5

		UnmapSensorZone zoneName2, SensorZoneDeleteConfirmMessage(zoneName2), false, true, "Yes": wait_custom "fixed7"

		ClearAllConfiguredSensors: wait_custom 5
		
		SystemSave "Save_2", false, true

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_DragSensorsToNewStopZone = 1		
		End If
		
		TestFinished Err.Description, name
end function

Sub RefocusActivate (byval name, byval x1, byval y1)
	functionstart "RefocusActivate"
	clickfromconfig x1, y1: wait_custom 3
	functionend "RefocusActivate"
End Sub

Function SetSensorName (byval numberoftries, byval Sensors, byval stype)
	functionstart "SetSensorName" & " " & stype
	If numberoftries>0 Then
		sensorName = Sensors(numberoftries)
	else
		sensorName = Sensors(0)
	End If
	SetSensorName=sensorName
	functionend "SetSensorName" & " " & sensorName
End Function

Function Test_ChangeSensorZoneName(byval name, byval TrafficZone, byval zoneType, byval qq, byval zz, byval adjust)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ChangeSensorZoneName=0

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ChangeSensorZoneName name, TrafficZone, ZoneType, qq, zz, adjust: exit function
		end if
		zoneType="Count"
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: 
		SensorZoneTypeChange zoneType, true: wait_custom 3
		
		If hh>ww Then 
			yy=yy+hh/2: adjust=0
		end if
	
		xx=adjust+xx+ww/2
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")	
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ChangeSensorZoneName name, TrafficZone, zoneTYPE, qq, zz, adjust
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ChangeSensorZoneName = 1 
		   		Exit Function
			End If
		end if
		
		ConfigTabPress "Cmds": wait_custom 2
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		ConfigTabPress "Position": wait_custom 2
	
		sensor_x=x1+w1/2: sensor_y=y1+w1/2
				
		SensorVerticalPositionChange 1, true: wait_custom 5
		
		printscreen name: wait_custom 3
			
		zoneName = ChangeSensorZoneName (sensorName, zoneName, lcase(new_zone_name)): wait_custom 10
		
		TrafficDotSaveAndCloseXY true, 20, 25, 15
		
		skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 3: skip_start_email=false
		
		printscreen name: wait_custom 3
		
		ActivateRenamedSensorzone zoneName, true: wait_custom "fixed5"
		
		sensor_deleted_from_cz=false
	
		UnmapSensorZone zoneName, SensorZoneSensorMessage0(sensorName), true,  true, "": wait_custom "fixed7"
		
		If sensor_on_zone Then
			ValidationSucceeded "Validate sensor: " & sensorName & " on sensor zone: " & zoneName, ""
		else
			ValidationFailed "Validate sensor: " & sensorName & " on sensor zone: " & zoneName, ""
			SystemSave "Save_2",  false, true: TestFinished Err.Description, name
 		End If
		
		GetObjectXYWH sensorName, SensorByVoltageSet(), x, y, h, w: x=x+w/2: y=y+w/2: wait_custom "fixed7"
		
		DeleteSensor sensorName, _
				null, _
				SensorDeleteConfirmMessage2(sensorName), x, y: wait_custom "fixed7": sensor_deleted_from_cz=true
		
		ActivateRenamedSensorzone zoneName, true: wait_custom "fixed7"
		
		UnmapSensorZone  zoneName, SensorZoneDeleteConfirmMessage(new_zone_name), true, true, "Yes": wait_custom "fixed7"	
		
		SystemSave "Save_2", false, true
		
		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_ChangeSensorZoneName = 1	
		End If
		
		TestFinished Err.Description, name
End Function

Function SensorByVoltageSet()
	functionstart "SensorByVoltageSet"
	Set SensorByVoltageSet = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor_Voltage")
	functionend "SensorByVoltageSet"
End Function

Function TrafficDotSaveAndCloseXY(byval clickYes, byval delay1, byval delay2, byval delay3)
	functionstart "TrafficDotSaveAndCloseXY"
	if role_c="EMEA" or env_role="EMEA"  Then
		ClickFromConfig 300, 5: wait_custom "fixed" & delay1
		If mapping_choice="bvd4" or mapping_choice="bvd20" Then
			WriteToLogfile "BVD program is running: " & mapping_choice
			wait_custom "fixed25"
			exit function
		end if
	else
		ClickFromConfig 200, 5: wait_custom "fixed" & delay1
	end if
	If  clickYes  Then
			SaveYesButtonXY 1: wait_custom "fixed" & delay2
	End If
	SaveOKButtonXY 2: wait_custom delay3:
	if role_c="EMEA" or env_role="EMEA"  Then
		CloseTrafficDotXY: wait_custom 3
	else
		CloseTrafficDotXY: wait_custom 3
	end if
	functionend "TrafficDotSaveAndCloseXY"
End Function


Function ActivateRenamedSensorzone(byval name, byval clickon)
	functionstart "ActivateRenamedSensorzone" & " " & name
	Repository.Value("sensorZoneName")="Sensor Zone " & name
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor Zone cc1")
	If obj.Exist Then
		ValidationSucceeded "ActivateRenamedSensorzone", name
		If clickon Then
			obj.Click: wait_custom 3
		End If
	else
		ValidationFailed "ActivateRenamedSensorzone", getname	
	End If
	functionend "ActivateRenamedSensorzone"
End Function

Function SensorNewAbsXGet()
	functionstart "SensorNewAbsXGet"
	x = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor null").GetROProperty("abs_x")
	SensorNewAbsXGet = x
	functionend "SensorNewAbsXGet" & " " & x
End Function

Function SensorNewAbsYGet()
	functionstart "SensorNewAbsYGet"
	y= UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor null").GetROProperty("abs_y")
	SensorNewAbsYGet=y
	functionend "SensorNewAbsYGet" & " " & y
End Function

Function SensorNewWidthGet()
	functionstart "SensorNewWidthGet"
	w= UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor null").GetROProperty("width")
	SensorNewWidthGet=w
	functionend "SensorNewWidthGet" & " " & w
End Function

Function ShowLogsGetX()
	functionstart "ShowLogsGetX"
	x=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Show Logs").GetROProperty("x")
	ShowLogsGetX=x
	logs_cached_x=x
	functionend "ShowLogsGetX" & " " & x
End Function

Function ShowLogsGetY()
	functionstart "ShowLogsGetY"
	y=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Show Logs").GetROProperty("y")
	ShowLogsGetY=y
	logs_cached_y=y
	functionend "ShowLogsGetY" & " " & y
End Function

Function ConfigAbsXGet()
	functionstart "ConfigAbsXGet"
	x=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Config").GetROProperty("abs_x")
	ConfigAbsXGet=x
	functionend "ConfigAbsXGet" & " " & x
End Function

Function ConfigAbsYGet()
	functionstart "ConfigAbsYGet"
	ConfigAbsYGet=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Config").GetROProperty("abs_y")
	functionend "ConfigAbsYGet" & " " & ConfigAbsYGet
End Function

Function SensorAbsXGet()
	functionstart "SensorAbsXGet"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID")
	If obj.Exist Then
		SensorAbsXGet=obj.GetROProperty("abs_x")
	else
		SensorAbsXGet="???"
	End If
	functionend "SensorAbsXGet" & " " & SensorAbsXGet
End Function

Function SensorAbsYGet()
	functionstart "SensorAbsYGet"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID")
	If obj.Exist Then
		SensorAbsYGet=obj.GetROProperty("abs_y")
	else
		SensorAbsYGet="???"
	End If
	functionend "SensorAbsYGet" & " " & SensorAbsYGet
End Function

Function SensorWidthGet()
	functionstart "SensorWidthGet"
	Set obj =UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID")
	If obj.Exist Then
		SensorWidthGet=obj.GetROProperty("width")
	else
		SensorWidthGet="???"
	End If
	functionend "SensorWidthGet" & " " & SensorWidthGet
End Function

Function RepeaterAbsXGet()
	functionstart "RepeaterAbsXGet"
	RepeaterAbsXGet=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Repeater").GetROProperty("abs_x")
	functionend "RepeaterAbsXGet"	& " " & RepeaterAbsXGet
End Function

Function RepeaterAbsYGet()
	functionstart "RepeaterAbsYGet"
	RepeaterAbsYGet=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Repeater").GetROProperty("abs_y")
	functionend "RepeaterAbsYGet"	
End Function

Function RepeaterWidthGet()
	functionstart "RepeaterWidthGet"
	RepeaterWidthGet=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Repeater").GetROProperty("width")
	functionend "RepeaterWidthGet"	
End Function

Function RenameSensorZone (byval name, byval newname)
	functionstart "RenameSensorZone" & " " & name
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Required Field Name: Required")
	ClickFromConfig 89, 238: ClearTextBoxAll
	SendKeysShell newname, 2: wait_custom 1
	cname=obj.GetROProperty("text")
	If lcase(cname)=lcase(newname) Then
		ValidationSucceeded "RenameSensorZone", newname
	Else 
		ValidationFailed "RenameSensorZone", name
	End If
	functionend "RenameSensorZone" & " " & newname
End Function

Function ChangeSensorZoneName (byval sensorName, byval currentName, byval zoneName)
	functionstart "ChangeSensorZoneName" & " " & sensorName & " " & currentName & "-->" & zoneName
	dim obj: Set obj = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Change sensor zone name")
	x= obj.GetROProperty("abs_x"): y= obj.GetROProperty("abs_y")
	obj.Click: wait_custom 3: mouseClick x+30, y+5, false
	wait_custom 3: SendKeysShell zoneName, 2: ApplyChanges: wait_custom 3
	newname="Sensor Zone " & zoneName
	Repository.Value("sensorZoneName")=  newname
	Repository.Value("UseNewZone")="Use new (" & newname & ")"
	ChangeSensorZoneName=newname
	functionend "ChangeSensorZoneName"	
End Function

Sub ChangeSensorZone (byval currentZoneName, byval selectorid, byval applyc)
	functionstart "ChangeSensorZone" & " " & currentZoneName & "-->" & selectorid
	Dim aRuntime(), itemN
	DropdownList "Change to:", false, "Change sensor zone", false, obj
	Set itms=obj.GetItems: ReDim aRuntime(itms.Count-1)
	For rowCount = 1 To itms.Count
		itmname=(itms.item(rowCount))
		If itmname=selectorid Then
			itemN=rowCount
		End If
		aRuntime(rowCount-1)=itmname	
	Next
	obj.Click: wait_custom 5: SelectItemDir itemN, "DOWN": wait_custom 3
	value = obj.GetROProperty ("value")
	If value="" Then
		Oops "", tryid
		If tryid<2 Then
			ChangeSensorZone currentZoneName, selectorid, applyc: resetTryid:exit sub
		End If
	End If
	If applyc Then
		Click_button "Apply", obj1, true, false: wait_custom 3
	End If
	functionend "ChangeSensorZone" 
End Sub

Function ClickFromConfig(byval x_1, byval y_1)
	functionstart "ClickFromConfig"
	If x_config ="" Then
		x_config=ConfigAbsXGet
		y_config=ConfigAbsYGet
	End If
	mouseClick x_config-x_1, y_config+y_1, false: wait_custom 3
	functionend "ClickFromConfig"
End Function

Function ApplyAndUnmapAndSave
	functionstart "ApplyAndUnmapAndSave"
	MoveTrafficDOT2window: wait_custom 3
	x=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map/Table").GetROProperty("abs_x")
	y=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map/Table").GetROProperty("abs_y")
	mouseClick x-41+33+97, y+608+20, false: wait_custom 3
	mouseClick x-41+33-152+97, y+608+20, false:wait_custom 3
	mouseClick x-326+10, y+406+3, false:wait_custom 3
	mouseClick x+115, y-21, false:wait_custom 3 'system close
	mouseClick x-493+116, y+454-36, false:wait_custom 3 'Yes
	mouseClick x-354+25, y+510+10, false:wait_custom 3 'Yes
	functionend "ApplyAndUnmapAndSave"
End Function

Function ApplyChangesCached
	functionstart "ApplyChangesCached"
	Click_button "Apply", obj, true, false: exit function
	If x_config="" Then
	End If
	mouseClick x_config-41+33, y_config+608+20, false: wait_custom 3
	If UIAWindow("Sensys Networks TrafficDOT").UIAObject("Please Apply or Revert").Exist then
		ActivateOKbutton (): wait_custom 3
		mouseClick x_config-41+33, y_config+608+20, false: wait_custom 3
	End If
	functionend "ApplyChangesCached"
End Function

Function ApplyChanges
	functionstart "ApplyChanges"
	ApplyChanges=1
	If role_c="EMEA" Then
		ApplyChanges=-1
		functionend "ApplyChanges"
		exit function
	ElseIf offline_mode Then
		Click_button "Apply", obj, true, false
		functionend "ApplyChanges"
		exit function
	End If
	ApplyChangesCached: functionend "ApplyChanges": exit function
	SendKeysShell "{TAB}", 2
	MoveTrafficDOT2window: wait_custom 3
	x=ConfigAbsXGet
	y=ConfigAbsYGet
	mouseClick x-41+33, y+608+20, false: wait_custom 3
	functionend "ApplyChanges"
End Function

Function RevertChangesXY
	functionstart "RevertChangesXY"
	MoveTrafficDOT2window: wait_custom 3
	x=ConfigAbsXGet
	y=ConfigAbsYGet
	wait_custom 5: mouseClick x-41+33-72, y+608+20, false: wait_custom 3
	functionend "RevertChangesXY"
End Function

Function SavingToAPMessage0()
	functionstart "SavingToAPMessage0"
	Dim params(5)
	params(0)=vbNewLine: params(1)=vbNewLine
	params(2)=vbNewLine: params(3)=vbNewLine
	params(4)=vbNewLine: params(5)=vbNewLine + vbNewLine + vbNewLine
	SavingToAPMessage0=MessagesParamsSet ("Messages_0003", params)
	functionend "SavingToAPMessage0" 
End Function

Function SavingToAPMessage1()
	functionstart "SavingToAPMessage1"
	Dim params(8)
	params(0)=vbNewLine: params(1)=vbNewLine
	params(2)=vbNewLine: params(3)=vbNewLine
	params(4)=vbNewLine: params(5)=vbNewLine+vbNewLine+vbNewLine
	params(6)=vbNewLine+vbNewLine+vbNewLine
	params(7)=vbNewLine
	params(8)=vbNewLine
	SavingToAPMessage1=MessagesParamsSet ("Messages_0005", params)
	functionend "SavingToAPMessage1"
End Function

Function SavingToAPMessage0_1()
	functionstart "SavingToAPMessage0_1"			
	Dim params(1): params(0)=vbnewline
	params(1)=vbnewline
	SavingToAPMessage0_1=MessagesParamsSet ("Messages_0019", params)		
	functionend "SavingToAPMessage0_1"
End Function

Function SavingToAPMessage3()
	functionstart "SavingToAPMessage3"
	SavingToAPMessage3=EnvironmentGetMessages("Messages_0006")
	functionend "SavingToAPMessage3"
End Function

Function SensorZoneDeleteConfirmMessage(byval zoneName)
	functionstart "SensorZoneDeleteConfirmMessage"
	Dim params(0): params(0)=zoneName
	SensorZoneDeleteConfirmMessage=MessagesParamsSet ("Messages_0007", params)
	functionend "SensorZoneDeleteConfirmMessage"
End Function

Function TextBoxDeleteConfirmMessage()
	functionstart "TextBoxDeleteConfirmMessage"
	TextBoxDeleteConfirmMessage =EnvironmentGetMessages("Messages_0008")
	functionend "TextBoxDeleteConfirmMessage"
End Function

Function EnvironmentGetMessages(byval messsageid)
	functionstart "EnvironmentGetMessages" & " " & messsageid
	EnvironmentGetMessages=test_MESSAGES(messsageid)
	functionend "EnvironmentGetMessages"
End Function

Function RestoreAPMessage(byval filename)
	functionstart "RestoreAPMessage"
	Dim params(2)
	params(0)=filename
	params(1)=vbnewline
	params(2)=vbnewline
	RestoreAPMessage=MessagesParamsSet ("Messages_0009", params)
	functionend "RestoreAPMessage"
End Function

Function SensorDeleteConfirmMessage (byval sensorName)
	functionstart "SensorDeleteConfirmMessage"	
	Dim params(0): params(0)=sensorName
	SensorDeleteConfirmMessage=MessagesParamsSet ("Messages_0010", params)
	functionend "SensorDeleteConfirmMessage"
End Function

Function APDeleteConfirmMessage1()
	functionstart "APDeleteConfirmMessage1"
	APDeleteConfirmMessage1=EnvironmentGetMessages("Messages_0011") 
	functionend "APDeleteConfirmMessage1"
End Function

Function APDeleteConfirmMessage()
	APDeleteConfirmMessage1: exit function
	functionstart "APDeleteConfirmMessage"
	APDeleteConfirmMessage=EnvironmentGetMessages("Messages_0012")
	functionend "APDeleteConfirmMessage"
End Function

Function SensorZoneSensorMessage0 (byval sensorName)	
	functionstart "SensorZoneSensorMessage0"
	Dim params(0): params(0)=sensorName
	SensorZoneSensorMessage0=MessagesParamsSet ("Messages_0014", params)
	functionend "SensorZoneSensorMessage0"				
End Function

Function SensorDeleteConfirmMessage3 (byval sensorName)
	functionstart "SensorDeleteConfirmMessage3"
	Dim params(0): params(0)=sensorName
	SensorDeleteConfirmMessage3=MessagesParamsSet ("Messages_0015", params)
	functionend "SensorDeleteConfirmMessage3"	
End Function

Function SensorUnconfigureConfirmMessage (byval sensorName)
	functionstart "SensorUnconfigureConfirmMessage"
	Dim params(0): params(0)=sensorName
	SensorUnconfigureConfirmMessage=MessagesParamsSet ("Messages_0063", params)
	functionend "SensorUnconfigureConfirmMessage"	
End Function

Function SensorDeleteConfirmMessage4 (byval sensorName)
	functionstart "SensorDeleteConfirmMessage4"
	Dim params(0): params(0)=sensorName
	SensorDeleteConfirmMessage4=MessagesParamsSet ("Messages_0031", params)
	functionend "SensorDeleteConfirmMessage4"	
End Function

Function SensorDeleteConfirmMessage2 (byval sensorName)
	functionstart "SensorDeleteConfirmMessage2"		
	Dim params(0): params(0)=sensorName
	SensorDeleteConfirmMessage2= MessagesParamsSet ("Messages_0018", params)
	functionend "SensorDeleteConfirmMessage2"				
End Function

function failedTests (byval testName)
	functionstart "failedTests"
	if test_failed=true then
		ReDim Preserve f_Tests(UBound(f_Tests)+1)
		f_Tests(UBound(f_Tests))=testName
	end if
	functionend "failedTests"
end function

Function test(aArray, vElementNumber)

  Dim aNewArray
  ReDim aNewArray(0)
  Dim vLoopValue, vLimit
  
  vLoopValue = 0

  For Each sValue In aArray
    If vLoopValue <> vElementNumber Then
      If vLoopValue = 0 And vElementNumber <> 0 Then
        aNewArray(vLoopValue) = sValue 
      ElseIf vLoopValue = 1 And vElementNumber = 0 Then
        aNewArray(vLoopValue) = sValue
      Else
        vLimit = Ubound(aNewArray) + 1
        ReDim Preserve aNewArray(vLimit)
        aNewArray(Ubound(aNewArray)) = sValue
      End If
    End If

    vLoopValue = vLoopValue + 1
  Next
  DeleteFromArray = aNewArray
End Function

Function readTeststFile(byval filename, byref tarray)
	functionstart "readTeststFile" & " " & filename
	
	readTeststFile=0: if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
	
	Dim WshShell, oExec
	
	filepath= TEST_GROUPS_LOC + filename
	
	Set wshShell = CreateObject("WScript.Shell")
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
  	If objFSO.FileExists(filepath) Then
		Set objInputFile = objFSO.OpenTextFile(filepath,1)
	else
		readTeststFile=-1
		functionend "readTeststFile"
		Exit function
    End If
	Do until objInputFile.AtEndofStream
		strline = objInputFile.ReadLine
		If instr(1, lcase(strline), "rem")>0 Then
		elseIf strline="" Then
		else
			ReDim Preserve array_group_tests(UBound(tarray)+1)
			tarray(UBound(tarray))=trim(strline)
			db_TestCaseRun tarray(UBound(tarray))
		End If
	Loop
	objInputFile.Close
	If err>0 Then
		print err.Description 
		readTeststFile=-1
	End If
	functionend "readTeststFile"
End Function

Function readAndUpdateCFGfile (byval templatename, byref configfilepath, byref sensorName, byref repeaterName, byref controller)
	functionstart "readAndUpdateCFGfile" & " " & filename 
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if	
	values="rep; radio; cuc; cdch; fdch; ss; mt; gs; fch0; fch1; clc; cm; sens"
	arvalues = Split(values, ";")
	controllername = controller_emea
	
	MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
	
	Sensors=SensorsSetup: RepeaterSet rep, life, 0
	
	sensorName=Sensors(1): repeaterName=rep: controller=controllername
	
	fch1_x="14"
	cuc_x= channel_0
	cdch_x = cint(channel_0) + 2
	fdch_x = cint(channel_0)-2
	cm_x = controllercode + "1"
	
	color_code="CD"
	
	sensor_new_channel = fdch_x

	newvalues=rep + "; SPP0; " & cuc_x & " ; " & cdch_x & "; " & fdch_x & "; " + Sensors(1) + "; " + _
			mapping_choice + "; " + GlobalSensitivityConfigFileA + "; " + channel_0 + _
			"; " & fch1_x & "; " + color_code +"; " & cm_x & "; " + sensitivity_c
	
	arnewvalues = Split(newvalues, ";")
	
	Const ForReading = 1: Const ForWriting = 2
	
	filepath = CONFIG_EMEA + templatename & ".csv"
	filepathC = CONFIG_EMEA + templatename + DateTimeStamp + ".csv"
	
	configfilepath = filepathC
	
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
  	If objFSO.FileExists(filepath) Then
		Set objInputFile = objFSO.OpenTextFile(filepath,ForReading)
		Set objWriteFile= objFSO.CreateTextFile (filepathC, true)
	else
		functionend "readAndUpdateCFGfile"
		Exit function
    End If
	Do until objInputFile.AtEndofStream
		strline = objInputFile.ReadLine
		For n = 0 To ubound(arvalues) Step 1
			If instr(1, strline, arvalues(n))>0  Then
				strline= replace (strline, arvalues(n), arnewvalues(n))
			End If	
		Next				
		strline= replace (strline, "test, ", "")
		objWriteFile.WriteLine strline
	Loop
	objInputFile.Close
	objWriteFile.Close
	functionend "readAndUpdateCFGfile" & " sensor: " & sensorName & _
					" repeater: " & repeaterName & " controller: " & controller
End Function


Function EnabledGroups(byref groups)
	functionstart "EnabledGroups"
	if lcase(Environment.value("Try_Group_All_DB")) = "on" Then
		gplus=gplus+1
		groups=groups+"Try_Group_All_DB "
	end If
	if lcase(Environment.value("Try_Group_All")) = "on" Then
		gplus=gplus+1
		groups=groups+"Try_Group_All "
	end If
	if lcase(Environment.value("Try_Group_Acceptance")) = "on" Then
		gplus=gplus+1
		groups=groups+"Try_Group_Acceptance "
	end If
	if lcase(Environment.value("Try_Group_Smoke")) = "on" Then
		gplus=gplus+1
		groups=groups+"Try_Group_Smoke "
	end If
	if lcase(Environment.value("Try_Group_EMEA")) = "on" Then
		gplus=gplus+1
		groups=groups+"Try_Group_EMEA "
	end If
	if lcase(Environment.value("Try_Group_Custom")) = "on" Then
		gplus=gplus+1
		groups=groups+"Try_Group_Custom "
	end If
	if lcase(Environment.value("Try_Group_UI")) = "on" Then
		gplus=gplus+1
		groups=groups+"Try_Group_UI "
	end If
	EnabledGroups=gplus
	functionend "EnabledGroups"
End Function

Function enabledTestsBuildArray(byref arr, byval testcasename)
	'functionstart "enabledTestsBuildArray" & " " & testcasename
	db_TestCaseRun testcasename
	ReDim Preserve arr(UBound(arr)+1)
	arr(UBound(arr))=testcasename
	'functionend "enabledTestsBuildArray"
End Function

Function enabledTestsBuildArrayAllNoEMEA(byref arr, byval testcasename)
	if lcase(test_ACTION(testcasename))="run" or lcase(Environment.value("Try_Group_All"))="on" _
			or lcase(Environment.value("Try_Group_No_EMEA"))="on" then
		functionstart "enabledTestsBuildArrayAllNoEMEA" & " " & testcasename
		db_TestCaseRun testcasename
		ReDim Preserve arr(UBound(arr)+1)
		arr(UBound(arr))=testcasename
		functionend "enabledTestsBuildArrayAllNoEMEA"
	End If 
End Function

Function enabledTestsBuildArrayAllUI(byref arr, byval testcasename)
	if lcase(test_ACTION(testcasename))="run" or lcase(Environment.value("Try_Group_All"))="on" _
			or lcase(Environment.value("Try_Group_UI"))="on" then
		functionstart "enabledTestsBuildArrayAllUI" & " " & testcasename
		db_TestCaseRun testcasename
		ReDim Preserve arr(UBound(arr)+1)
		arr(UBound(arr))=testcasename
		functionend "enabledTestsBuildArrayAllUI"
	End If 
End Function

Function enabledTestsBuildArrayAll(byref arr, byval testcasename)
	if lcase(test_ACTION(testcasename))="run" or lcase(Environment.value("Try_Group_All"))="on" then
		functionstart "enabledTestsBuildArrayAll" & " " & testcasename
		ReDim Preserve arr(UBound(arr)+1)
		arr(UBound(arr))=testcasename
		db_TestCaseRun testcasename
		functionend "enabledTestsBuildArrayAll"
	End If 
End Function

Function enabledTestsBuildArrayNoEMEAUI(byref arr, byval testcasename)
	if lcase(test_ACTION(testcasename))="run" or lcase(Environment.value("Try_Group_All"))="on" _
			or lcase(Environment.value("Try_Group_No_EMEA"))="on"  or lcase(Environment.value("Try_Group_UI"))="on" then
		functionstart "enabledTestsBuildArrayNoEMEAUI" & " " & testcasename
		db_TestCaseRun testcasename
		ReDim Preserve arr(UBound(arr)+1)
		arr(UBound(arr))=testcasename
		functionend "enabledTestsBuildArrayNoEMEAUI"
	End If 
End Function

Function enabledTests()
	
	functionstart "enabledTests"
	environment.LoadFromFile env_path_changed
	apeg=lcase(Environment.value("APname"))
	emeatests_file = "EMEATests_" & apeg & ".txt"
	acceptance_file="AcceptanceTests_" & apeg & ".txt"
	smoke_file="SmokeTests_" & apeg & ".txt"
	custom_file="CustomTests_" & apeg & ".txt"
	ui_file="UITests_" & apeg & ".txt"
	
	testsE="Test_EMEA;Test_EMEA_Auto_Config;Test_EMEA_Backup_Restore;Test_EMEA_No_Config;Test_EMEA_Microradar;" & _
			"Test_EMEA_7_Sensors;Test_EMEA_CC_STS_Mapping;Test_EMEA_Microradar_Auto_Sensor_Config;Test_EMEA_Auto_Sensor_Config;" & _
			"Test_EMEA_Table_View;Test_EMEA_Change_Channel_Write_Config_File_To_AP;Test_EMEA_Template_Config;" & _
			"Test_EMEA_Reasign_Channels;Test_EMEA_Global_Sensitivity_Other;Test_EMEA_Load_Config_File;Test_EMEA_Clear_Map_Generate_Template_Config;" & _
			"Test_EMEA_Generic_Microradar_Config;Test_EMEA_Partial_Save_Config;Test_EMEA_Size_Sensors;Test_EMEA_Discovery_Mode;" & _
			"Test_EMEA_Sensor_Size;Test_EMEA_Sensors_Unconfigure;Test_EMEA_Run_Autoconfig;" & _
			"Test_EMEA_Run_AutoconfigBASIC;Test_EMEA_Incomplete_Topology;Test_EMEA_RunAutoconfig_Two_Radios;Test_EMEA_Generic_Sensors;" & _
			"Test_EMEA_BVD4_Config;Test_EMEA_BVD20_Config" 
			
	testsB="Test_UI_Sensosrs_Cmd;Test_UI_AP_Info_Cmd;Test_UI_AP_Info_Tabs;Test_UI_Microradar_Sensor_Adv;" & _
			"Test_UI_Sensor_Adv;Test_UI_Sensosrs_M_Cmd"
	
	
	testsC="Test_Maps;Test_Table_Views;Test_New_Sensors;Test_Sensor_Zone_EB;Test_Sensor_Zone_NB;Test_Sensor_Zone_SB;Test_Sensor_Zone_WB;" & _
			"Test_Microradar_Sensors;Test_Count_Zone_One_Sensor;Test_Stopbar_Zone_One_Sensor;Test_Travel_Time_Zone_Three_Sensors;" & _
			"Test_Speed_Zone_Two_Sensors;Test_Text_Box_Edit;Test_Change_Sensor_Zone_Name;Test_Reassign_SensorZone;Test_Parkng_Microradar;" & _
			"Test_Cancel_Exit;Test_Map_Layers;Test_Arrows_EB_XML;Test_Arrows_WB_XML;Test_Arrows_SB_XML;Test_Arrows_NB_XML;" & _
			"Test_Offline_Basic;Test_SensMetrics_XML;Test_SensorZone_Layout_XML;Test_SensMetrics_Config;Test_Tools_Utilities_Scan_Devices;" & _
			"Test_Export_Import_Dot_Table;Test_Clear_Configured_Sensors;Test_Clear_Pairings;Test_Drag_Sensors_To_New_StopZone;" & _
			"Test_PrintScr;Test_STOPBAR_Microradar;Test_StopbarZoneOne_GMG;Test_RLE_Basics;Test_Reboot;Test_Change_RF_Channel_By_Dragging;" & _
			"Test_Tools_Charts;Test_Tools_Addons;Test_Connect_And_Roles;Test_Preferences_Table_Initial_View;Test_Unpair_Dots;" & _
			"Test_SensMetrics_XML_ALT_UNITS;Test_SensMetrics_Config_ALT_UNITS;Test_SensMetrics_Publish_For_Snaps;" & _
			"Test_Unmap_Sensors_Dont_Ask;Test_System_Color;Test_Auto_Assign_Timeslots;Test_SensMetrics_Clear_ConfiguredSensors;" & _
			"Test_Unmap_Sensor_And_SensorZone;Test_Configure_Sensor_In_The_Tray;Test_Flex_Controller;" & _
			"Test_Flex_Controller_Channels_And_Commands;Test_Maps_GMG;Test_SensMetrics_Clear_ConfiguredSensors_MET;" & _
			"Test_SensMetrics_Publish_For_Snaps_MET;Test_SensMetrics_Config_MET;Test_Sensor_Zone_Names"

	
	if lcase(Environment.value("Try_Group_All"))="on" Then
		group_test_all=true
	end if
	
	if lcase(Environment.value("Try_Group_All_DB"))="on" Then
		If connect_error Then
			group_test_all=true
		else
			ReDim array_group_tests(-1)		
			tests=db_TestsToRunList: tests=Split(tests,";")	
			For each tc in tests
				enabledTestsBuildArray array_group_tests, tc
			Next 
			enabledTests=array_group_tests: db_set_run=true: functionend "enabledTests" & ">" & "DB Selected" 	
			Exit function
		End If
	end if
	
	if not group_test_all then
		if lcase(Environment.value("Try_Group_Smoke"))="on" Then
			group_test_smoke=true
			ReDim array_group_tests(-1)	
			if readTeststFile (smoke_file,array_group_tests )<0 then	
				tests="Test_Travel_Time_Zone_Three_Sensors;Test_SensMetrics_Config;Test_UI_AP_Info_Tabs;Test_Parkng_Microradar"
	  			tests=Split(tests,";")
				For each tc in tests
					enabledTestsBuildArray array_group_tests, tc
				Next 
			end if
			enabledTests=array_group_tests
			db_set_run=true: functionend "enabledTests" & ">" & "group smoke" 
			Exit function
		End If
		
		if lcase(Environment.value("Try_Group_Custom"))="on" Then
			group_test_custom=true
			ReDim array_group_tests(-1)
			if readTeststFile (custom_file,array_group_tests )<0 then
				tests="Test_Travel_Time_Zone_Three_Sensors;Test_SensMetrics_Config;Test_UI_AP_Info_Tabs;Test_Parkng_Microradar"
	  			tests=Split(tests,";")
				For each tc in tests
					enabledTestsBuildArray array_group_tests, tc
				Next 
			end if
			enabledTests=array_group_tests
			db_set_run=true: functionend "enabledTests" & ">" & "group custom" 
			Exit function
		End If
		
		if lcase(Environment.value("Try_Group_UI"))="on" Then
			group_test_ui=true
			ReDim array_group_tests(-1)
			if readTeststFile (ui_file,array_group_tests )<0 then
				tests="Test_UI_Sensor_Adv;Test_UI_Microradar_Sensor_Adv;Test_UI_AP_Info_Tabs;Test_UI_AP_Info_Cmd;" & _
						"Test_UI_Sensosrs_Cmd;Test_UI_Sensosrs_M_Cmd"
	  			tests=Split(tests,";")
				For each tc in tests
					enabledTestsBuildArray array_group_tests, tc
				Next 
			end if
			enabledTests=array_group_tests
			db_set_run=true: functionend "enabledTests" & ">" & "group UI" 
			Exit function
		End If
		
		if lcase(Environment.value("Try_Group_Acceptance"))="on" Then
			group_test_acceptance=true
			ReDim array_group_tests(-1)
			if lcase(Environment.value("Test_Reboot"))="run" then
				ReDim Preserve array_group_tests(UBound(array_group_tests)+1)
				array_group_tests(UBound(array_group_tests))="Test_Reboot"
			end if
			if readTeststFile (acceptance_file, array_group_tests)<0 then
				tests="Test_Sensor_Zone_EB;Test_Stopbar_Zone_One_Sensor;Test_Speed_Zone_Two_Sensors;Test_Reassign_SensorZone;" & _
						"Test_UI_Sensosrs_Cmd;Test_UI_Sensosrs_M_Cmd;Test_Parkng_Microradar;Test_Travel_Time_Zone_Three_Sensors"
	  			tests=Split(tests,";")
				For each tc in tests
					enabledTestsBuildArray array_group_tests, tc
				Next 	
			end if
			enabledTests=array_group_tests
			db_set_run=true: functionend "enabledTests" & ">" & "group acceptance" 
			Exit function
		End If
	
		if lcase(Environment.value("Try_Group_EMEA"))="on" Then
			group_test_emea=true
			ReDim array_group_tests(-1)
			if readTeststFile (emeatests_file, array_group_tests)<0 then	
				testsE=Split(testsE,";")
				For each tc in testsE
					enabledTestsBuildArray array_group_tests, tc
				Next 
			end if
			enabledTests=array_group_tests
			db_set_run=true: functionend "enabledTests" & ">" & "group emea" 
			Exit function
		End If
	End if
	
	Dim aTests(): ReDim aTests(-1)

	if group_test_all Then

		ReDim array_group_tests(-1)

		tests=testsE+ ";" +testsB + ";" + testsC
		
  		tests=Split(tests,";")
		For each tc in tests
			enabledTestsBuildArray array_group_tests, tc
		Next 
		enabledTests=array_group_tests
		functionend "enabledTests" & ">" & "group all" 
		Exit function
	End If
	
	testsE=Split(testsE,";")
	
	For each tc in testsE
		enabledTestsBuildArray aTests, tc
	Next 
			
	testsB=Split(testsB,";")
	For each tc in testsB
		enabledTestsBuildArrayNoEMEAUI aTests, tc
	Next 
	
	testsC=Split(testsC,";")
	
	For each tc in testsC
		enabledTestsBuildArrayAllNoEMEA aTests, tc
	Next 

	enabledTests=aTests
	
	db_set_run=true
	
	functionend "enabledTests"
	
end function

function printfailedtests (byval arrayF)
	functionstart "printfailedtests"
	for i=0 to UBound(arrayF) step 1
		subjectline=subjectline + arrayF(i) + vbnewline
	next
	If subjectline="" Then
		subjectline="none"
	End If
	printfailedtests= subjectline
	print printfailedtests
	functionend "printfailedtests"
end function

function printsubject (arrayT, name)
	for i=0 to UBound(arrayT) step 1
		if arrayT(i)=name then
			subjectline=subjectline + vbNewLine+ ">" + arrayT(i) + "<"
		else
			subjectline=subjectline + vbNewLine+ arrayT(i)
		end if
	next
	printsubject= subjectline
end function

Sub AdjustZoom (byval y)
	If 	role_c="RLE"  or init_table_view_on Then
		Exit sub
	End If
	functionstart "AdjustZoom" & " " & y
	a=3: yy=UIAWindow("Sensys Networks TrafficDOT").UIASlider("178%").UIAObject("Thumb").GetROProperty("y")
	If Abs(yy-y)<3 Then
		functionend "AdjustZoom"
		Exit sub
	End If
	If (yy-y)<0 Then
		Do while a=3
			UIAWindow("Sensys Networks TrafficDOT").UIAButton("Zoom Out").Click
			yy=UIAWindow("Sensys Networks TrafficDOT").UIASlider("178%").UIAObject("Thumb").GetROProperty("y")
			If Abs(yy-y)<3 Then
				functionend "AdjustZoom"
				Exit sub
			End If
			wait_custom 1
		loop	
	End If
	If (yy-y)>0 Then
		Do while a=3
			UIAWindow("Sensys Networks TrafficDOT").UIAButton("Zoom in").Click
			yy=UIAWindow("Sensys Networks TrafficDOT").UIASlider("178%").UIAObject("Thumb").GetROProperty("y")
			If Abs(yy-y)<3 Then
				functionend "AdjustZoom"
				Exit sub
			End If
			wait_custom 1
		loop
	End If
	functionend "AdjustZoom"
End Sub

Sub ComboBOXValidations (a1, aRuntime)
	
End Sub

Function Test_ParkingMicroradar (byval name, byval xx, byval yy)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ParkingMicroradar=0	
		
		number_of_dot_pairs="microradar"
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ParkingMicroradar name, xx, yy: exit function
		end if

		If Environment("SensorStatic")="Yes" then
			sensorName=Environment("MicroRadar") 
		else
			SensorFromTableDynamicly true,false
			sensorName=sensor_in_test	
		End If
		
		x=GenericButtonXGet("Fullscreen"): y=GenericButtonYGet("Fullscreen")
		
		x1=x+xx: y1=y+yy
		
		ValidateButtons "Parking", "Gateway:",  true, false, "Messages_0038"
		
		if DragSensor (sensorName, x1,y1, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_ParkingMicroradar name,  xx, yy
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_ParkingMicroradar = 1 
		   		Exit Function
			End If
		end if			
			
		wait_custom 3: TrafficDotSave  SavingToAPMessage0_1(), "", "OK", false, true, false
		
		wait_custom 3: printscreen name: wait_custom 3
		
		DeleteSensor sensorName, _
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID"), _
				SensorDeleteConfirmMessage2(sensorName), "", "": wait_custom "fixed7"		
		
		SystemSave "Save_2", true, true
		
		number_of_dot_pairs="0"
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_ParkingMicroradar = 1 		
		End If
		
		TestFinished Err.Description, name
End Function 

Function DetectionRangeChange(byval intFt)
	functionstart "DetectionRangeChange" & " " & cStr(intFt)
	UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("Change to:").Click(): wait_custom 3
	Select Case intFt
		Case 4
			SelectItem 1
		Case 6
			SelectItem 2
		Case 8
			SelectItem 3
		Case 10
			SelectItem 4
	End Select
	functionend "DetectionRangeChange"
End Function

Function Test_STOPBAR_Microradar (byval name, byval xx, byval yy)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_STOPBAR_Microradar=0	
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			Exit function
		ElseIf repeat=1 Then
			Test_STOPBAR_Microradar name, xx, yy: Exit function
		end if

		If Environment("SensorStatic")="Yes" then
			sensorName=Environment("MicroRadar") 
		else
			SensorFromTableDynamicly true,false
			sensorName=sensor_in_test	
		End If
		
		x=GenericButtonXGet("Show Logs"): y=GenericButtonYGet("Show Logs")
		
		x1=x+xx: y1=y+yy	

		ValidateButtons "Stopbar", "Gateway:",  true, false, "Messages_0037"
		
		if DragSensor (sensorName, x1,y1, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_STOPBAR_Microradar name,  xx, yy
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_STOPBAR_Microradar = 1 
		   		Exit Function
			End If
		end if		
		
		tabs0str="Card Addresses;Configuration"
		tabs="Any;Car;Bicycle" : tabsstr = tabs: tabs=Split(tabs,";")
		tabs1="Controller Card;FlexConnect" : tabs1str=tabs1: tabs1=Split(tabs1,";")
		
		SensorTabsPress tabs0str, "Card Addresses": wait_custom 3
		
		For each tb in tabs
			SensorTabsPress tabsstr, tb: wait_custom 3
  			For each tb1 in tabs1
			 	SensorTabsPress tabs1str, tb1: wait_custom 3
			next
		Next
		
		buttons="Reset (Keep RF);Apply;Recalibrate;Revert": buttons=Split(buttons,";")
		
		SensorTabsPress tabs0str, "Configuration": wait_custom 3
		For each btn in buttons
			 VerifyControl "button", btn, false: wait_custom 3
		Next
		
		DetectionRangeChange 6: wait_custom 3: ActivateButton "Apply": wait_custom 3:hide_log=true: HideLog: wait_custom 1
	
		wait_custom 3: TrafficDotSave SaveDOTMessage1, "", "OK", false, false, false: wait_custom 3
		
		SensorTabsPress tabs0str, "Card Addresses": wait_custom 1
		SensorTabsPress tabsstr, "Any": wait_custom 1: 	SensorTabsPress tabs1str, "Controller Card": wait_custom 3
		
		printscreen name: wait_custom 5
	
		DeleteSensor sensorName, _
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID"), _
				SensorDeleteConfirmMessage2(sensorName), "", "": wait_custom "fixed7"	
				
		TrafficDotSave  SavingToAPMessage0_1(), "", "OK", false, true, false
		
		wait_custom "fixed7": CloseTrafficDot() 
	
		If(Err.Number<>0) or test_failed   Then
			ValidationFailed name, Err.Description
			Test_STOPBAR_Microradar = 1 		
		End If
		TestFinished Err.Description, name	
End Function

Function Test_SpeedZoneType(byval name, byval TrafficZone, byval qq, byval zz, byval adjust)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_SpeedZoneType=0	 
	
		if TrafficDotLogin(name, repeat, false)<0 then
			exit function
		ElseIf repeat=1 Then
			Test_SpeedZoneType name, TrafficZone, qq, zz, adjust: exit function
		end if
		
		ValidateButtons "Standard", "Map:", false, true, "Messages_0042": wait_custom 5
		ValidateButtons "Standard", "Gateway:", true, true, "Messages_0043"

		assertStringEquals blist, blist1, _
					"verify Standard Gateway view controls: buttons", ""

		number_of_dot_pairs="1": apx=qq: apy=zz
		
		res= DragAP (apx, apy+100, oap, 0): wait_custom 3
		
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: SensorZoneTypeChange "Speed", true: wait_custom 7

		xx=GetSensorZoneProperty("x")
		yy=GetSensorZoneProperty("y")
		ww=GetSensorZoneProperty("width")
		
		Sensors=SensorsSetup: xx=adjust+xx+ww/2
		
		dim sensor_x(2): sensor_x(0)=xx: sensor_x(1)=xx-adjust: sensor_y=yy
		
		For n=1 To 2 Step 1	
			Repository.Value("sensorListName")=Sensors(n)	
			if DragSensor (Sensors(n), xx,yy,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_SpeedZoneType name, TrafficZone, qq, zz, adjust
			   		Exit function
				else
			   		KillTrafficDOT2
			   		ValidationFailed name, "Could not find sensor: " & sensorName
					Test_SpeedZoneType = 1 
		   			Exit Function
				End If
			end if
			If n=1 Then	
				ConfigTabPress "Cmds": wait_custom 2
				xx0=SensorAbsXGet: yy0=SensorAbsYGet: ww0=SensorWidthGet	
				ConfigTabPress "Position": wait_custom 2
			End If
			SensorVerticalPositionChange (n), true: xx=xx-adjust: wait_custom 1
			if n=1 then
				ActivateSensorZone "", "", "": wait_custom 5
			end if: wait_custom 10
		Next
		
		mouseClick xx0+ww0/2, yy0+ww0/2, true: wait_custom 3 'apply SHIFT to select both sensors
		
		VehicleLengthAndSeparation 2, 6: wait_custom 3: ApplyChanges: wait_custom 15
		
		TrafficDotSave SaveDOTPairMessage1(),SaveDOTPairMessage2(), "Yes", false, true, true: wait_custom 10
		
		printscreen name: wait_custom 3
		
		Dim sensorZones(0), sztypes(0)
		
		sensorZones(0)=zoneName
		sztypes(0)=SensorZoneTypeCode("Speed")
		
		readXML "sensorZoneTypeMapping.xml", sensorZones, "", sztypes: wait_custom 3
		
		sensor_x(0)=xx0+ww0/2
		sensor_x(1)=xx0+ww0/2-adjust
		sensor_x(2)=xx0+ww0/2-adjust-adjust

		sensor_y=yy0+ww0/2
		
		if res<0 then
			ReadAPInfoTable false, Sensors(1), Sensors(2)
		else
			ReadAPInfoTable true, Sensors(1), Sensors(2): wait_custom 1
			UnmapAP "", "", true, APDeleteConfirmMessage(): wait_custom 1
		end if
		
		ForcefocusOnSensorZone 3: wait_custom 3
		
		For n=1 To 2 Step 1	
			DeleteSensor Sensors(n), _
				null, _
				SensorDeleteConfirmMessage2(Sensors(n)), sensor_x(n-1), sensor_y
		Next
	
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes"
		
		number_of_dot_pairs="0": wait_custom "fixed7": SystemSave "Save_2", false, true
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_SpeedZoneType = 1 		
		End If
		
		TestFinished Err.Description, name
End Function

Function Test_SensorZoneLayoutXML (byval name, byval ZoneType, byval x_a, byval y_a)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_SensorZoneLayoutXML=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_SensorZoneLayoutXML name, ZoneType, x_a, y_a: exit function
		end if
		
		dim z: z=3: dim sensorZone(), tagval(), trafficZones()
		
		redim preserve sensorZone(z): redim preserve tagval(z): redim preserve trafficZones(z)
		
		trafficZones(0)="Sensor Zone SB"
		trafficZones(1)="Sensor Zone NB"
		trafficZones(2)="Sensor Zone EB"
		trafficZones(3)="Sensor Zone WB"
		
		DeltasForSensorZones trafficZones(0), deltaxH, deltayH
		DeltasForSensorZones trafficZones(2), deltaxV, deltayV
		
		tagval(0)="WB": tagval(1)="EB": tagval(2)="EB": tagval(3)="WB"
		
		dim x_a_extend: x_a_extend = x_a+100
		
		For n = 1 To z+1 Step 1
			If n<3 Then
				zoneName = DragSensorZone (trafficZones(n-1), x_a+n*deltaxH, y_a+n*deltayH, xx, yy, ww, hh,tryid)
			else
				zoneName = DragSensorZone (trafficZones(n-1), x_a_extend+n*deltaxV, y_a+n*deltayV, xx, yy, ww, hh,tryid)			
			End If
			wait_custom "fixed5": SensorZoneTypeChange ZoneType, true
			sensorZone(n-1)=zoneName
		Next
		
		readXML "sensorZonesUI.xml", sensorZone, "sensorZoneLayout", tagval: wait_custom 3
		
		For n = 1 To z-2 Step 1
			zonenamenew=tagval(n-1) & "00" & n
			SensorZoneChangeName true, sensorZone(n-1), zonenamenew, true: wait_custom 5
			sensorZone(n-1)=zonenamenew
		Next
				
		readXML "sensorZonesUI.xml", sensorZone, "sensorZoneLayout", tagval: wait_custom 3
		
		printscreen name: wait_custom "fixed7"
			
		SystemSave "Don't Save",  false, true

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_SensorZoneLayoutXML = 1		
		End If

		TestFinished Err.Description, name

end function

Function Test_SensMetricsPublishForSnaps (byval name, byval ZoneType, byval x_a, byval y_a)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_SensMetricsPublishForSnaps=0	
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_SensMetricsPublishForSnaps name, ZoneType, x_a, y_a: exit function
		end if

		Sensors=SensorsSetup
		
		if instr(1,  name, "_MET") then
			UserPreferencesUnits UNITS_METRIC, true, false
		else
			UserPreferencesUnits UNITS_IMPERIAL, true, false
		end if
		
		dim sensorZones(2), xs(2), ys(2), directions(2), trafficZones(2), throughnum(2)
		
		trafficZones(0)="Sensor Zone EB": trafficZones(1)="Sensor Zone WB": trafficZones(2)="Sensor Zone NB"
		throughnum(0)="1": throughnum(1)="1": throughnum(2)="3"
		directions(0)="EB Inbound": directions(1)="WB Inbound": directions(2)="NB Inbound"

		Dim delta, dircode,lanenumber_1 : delta=35: dircode="0": lanenumber_1=1
		
		wait_custom 3
		For n = 0 To 2 Step 1		
			if n=1 Then x_a=x_a+szwidth+delta
			if n=2 Then 
				x_a=x_a-delta: y_a=y_a+szwidth+delta
			end if: sensorZones(n) = DragSensorZone (trafficZones(n), x_a, y_a,xx, yy, ww, hh, tryid): wait_custom 3
			xs(n)=GetSensorZoneProperty("x"): ys(n)=GetSensorZoneProperty("y")
			wait_custom 3: SensorZoneTypeChange ZoneType, true: wait_custom 3
			PickDirection SZDirectionNameAndCode(directions(n), dircode): wait_custom 1
			ApplyChanges: wait_custom 3: MustSupplySpeedExist: wait_custom 1
			ConfigLeg "Speed", "45", true: ConfigLeg "Through", throughnum(n), true: wait_custom 10
			If n=0 Then SensorZoneDimensions szwidth, szheight: wait_custom "fixed7"
		Next: wait_custom 10: gset="2": gnum=1
		
		For n=1 To 3 Step 1	
			xpos=xs(n-1)+szwidth/2: ypos=ys(n-1)+szheight/2
			if n=3 Then
				xpos=xs(n-1)+szheight/2: ypos=ys(n-1)+szwidth/2
			end if
			if DragSensor (Sensors(n), xpos,ypos, sensorZones(n-1))<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_SensMetricsPublishForSnaps name, ZoneType, x_a, y_a
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_SensMetricsPublishForSnaps = 1
			   		Exit function
				End If
			end if
			SensorVerticalPositionChange 1, true: wait_custom 3
			SensorGeometrySet gnum, gset, true: wait_custom 3
			if n<3 then ActivateSensorZone "", "", ""
			wait_custom "fixed7"
		Next
	
		For n = 0 To ubound(sensorZones) Step 1
			ActivateSensorZone sensorZones(n), xs(n)+7, ys(n)+7: wait_custom 5
			LaneNumberChange true, lanenumber_1, true, true: wait_custom 5
		Next
		
		ActivateMapButton: wait_custom 7: 
		
		ValidateSenseMtericsConfig GeometryValidateMessage0: wait_custom 1	
		
		SystemSave "Save_2", false, false
		
		printscreen name: wait_custom "fixed7"
		
		PublishSensmetricsFile: wait_custom 5
		
		For n=1 To 3 Step 1
			sensx=xs(n-1)+szwidth/2: sensy=ys(n-1)+szheight/2
			If n=3 Then
				sensx=xs(n-1)+szheight/2: sensy=ys(n-1)+szwidth/2
			End If
			
			DeleteSensor Sensors(n), _
				null, _
				SensorDeleteConfirmMessage2(Sensors(n)), sensx, sensy
		Next
		
		For n=0 To ubound(sensorZones) Step 1
			UnmapSensorZone sensorZones(n), SensorZoneDeleteConfirmMessage(sensorZones(n)), false, false, "Yes"
		next
		
		wait_custom 5: SystemSave "Save_2", false, true
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_SensMetricsPublishForSnaps = 1		
		End If
		
		TestFinished Err.Description, name	
end function

Function PublishSensmetricsFile
		functionstart "PublishSensmetricsFile"
		Click_button "Publish SensMetrics File for SNAPS", obj, true, true: wait_custom 5
		ActivateButton "Publish": wait_custom 5
		ActivateButton "OK"
		functionend "PublishSensmetricsFile"
End Function

Function Test_SensMetricsValidateConfig (byval name, byval ZoneType, byval x_a, byval y_a)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_SensMetricsValidateConfig=0	
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_SensMetricsValidateConfig name, ZoneType, x_a, y_a: exit function
		end if

		Sensors=SensorsSetup
		
		if instr(1, name, "_MET") then
			UserPreferencesUnits UNITS_METRIC, true, false
		else
			UserPreferencesUnits UNITS_IMPERIAL, true, false
		end if
		
		dim sensorZones(2), xs(2), ys(2), directions(2), trafficZones(2), throughnum(2)
		
		trafficZones(0)="Sensor Zone EB": trafficZones(1)="Sensor Zone WB": trafficZones(2)="Sensor Zone NB"
		throughnum(0)="1": throughnum(1)="1": throughnum(2)="3"
		directions(0)="EB Inbound": directions(1)="WB Inbound": directions(2)="NB Inbound"

		Dim delta, dircode,lanenumber_1 : delta=35: dircode="0": lanenumber_1=1
		
		wait_custom 3: 
		For n = 0 To 2 Step 1		
			if n=1 Then x_a=x_a+szwidth+delta
			if n=2 Then 
				x_a=x_a-delta: y_a=y_a+szwidth+delta
			end if: sensorZones(n) = DragSensorZone (trafficZones(n), x_a, y_a, xx, yy, ww, hh,tryid): wait_custom 3
			xs(n)=GetSensorZoneProperty("x"): ys(n)=GetSensorZoneProperty("y")
			wait_custom 3: SensorZoneTypeChange ZoneType, true: wait_custom 3
			PickDirection SZDirectionNameAndCode(directions(n), dircode): wait_custom 1
			ApplyChanges: wait_custom 3: MustSupplySpeedExist: wait_custom 1
			ConfigLeg "Speed", "45", true: ConfigLeg "Through", throughnum(n), true: wait_custom 10
			If n=0 Then SensorZoneDimensions szwidth, szheight: wait_custom 7
		Next: wait_custom 10: gset="2": gnum=1
		
		For n=1 To 3 Step 1	
			xpos=xs(n-1)+szwidth/2: ypos=ys(n-1)+szheight/2
			if n=3 Then
				xpos=xs(n-1)+szheight/2: ypos=ys(n-1)+szwidth/2: gset="0": gnum=2
			end if
			if DragSensor (Sensors(n), xpos,ypos, sensorZones(n-1))<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
					x_a=x_a+delta: y_a=y_a-szwidth-delta
			   		Test_SensMetricsValidateConfig name, ZoneType, x_a, y_a
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_SensMetricsValidateConfig = 1
			   		Exit function
				End If
			end if
			SensorVerticalPositionChange 1, true: wait_custom 3
			SensorGeometrySet gnum, gset, true: wait_custom 3
			ActivateSensorZone "", "", "": wait_custom 15
		Next
	
		For n = 0 To 2 Step 1
			ActivateSensorZone sensorZones(n), xs(n)+7, ys(n)+7: wait_custom 5
			LaneNumberChange true, lanenumber_1, true, true: wait_custom 5
		Next
	
		ActivateMapButton: wait_custom 7:

		ValidateSenseMtericsConfig GeometryValidateMessage1(Sensors(3)): wait_custom 1
		
		ActivateSingleSensor Sensors(3), xs(2)+szheight/2,ys(2)+szwidth/2: wait_custom 3
		SensorGeometrySet 2, "2", true: wait_custom 7
		
		ActivateMapButton: wait_custom 7
		
		ValidateSenseMtericsConfig GeometryValidateMessage0: wait_custom 1	
		
		printscreen name: wait_custom "fixed7"
		
		'UserPreferencesUnits units, true, true: wait_custom 3
		
		SystemSave "Don't Save", false, true
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_SensMetricsValidateConfig = 1		
		End If
		
		TestFinished Err.Description, name	
end function

Function GeometryValidateMessage0()
	functionstart "GeometryValidateMessage0"
	GeometryValidateMessage0=EnvironmentGetMessages("Messages_0016")
	functionend "GeometryValidateMessage0" 
End Function

Function GeometryValidateMessage1(byval sensorName)
	functionstart "GeometryValidateMessage1" & " " & sensorName
	Dim params(0): params(0)=sensorName
	GeometryValidateMessage1=MessagesParamsSet ("Messages_0017", params)
	functionend "GeometryValidateMessage1"
End Function

Function AutoConfigSettingsMessage(byval mappings, byval gsens)
	functionstart "AutoConfigSettingsMessage"
	Dim params(1): params(0)=mappings: params(1)=gsens
	AutoConfigSettingsMessage=MessagesParamsSet ("Messages_0036", params)
	functionend "AutoConfigSettingsMessage"
End Function

Sub ValidateSenseMtericsConfig(byval message)
	functionstart "ValidateSenseMtericsConfig" & " " & message
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Validate SensMetrics Config").Click: wait_custom 3
	Repository.Value("validateGeometry") = message: wait_custom 1
	exists=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Geometry configuration").Exist
	If exists Then
		ValidationSucceeded "ValidateSenseMtericsConfig", message
		ActivateOKbutton
	else
		ValidationFailed "ValidateSenseMtericsConfig", "ValidateSenseMtericsConfig"
	End If
	If err.Number<>0 Then
		ValidationFailed "ValidateSenseMtericsConfig", err.Description
	End If
	functionend "ValidateSenseMtericsConfig"
End Sub

Sub SensorGeometrySet (byval radionum, byval setNum, byval aApplyChanges)
	functionstart "SensorGeometrySet"
	str="Horizontal/Vertical Index Position:  " & radionum & " of 12"
	ConfigTabPress "Geometry": wait_custom 1
	Repository.Value("radio_position_geometry") = str: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("GeometryPosition").Select: wait_custom 5	
	ClickFromConfig 65, 182: wait_custom 3: ClearTextBoxAll: wait_custom 5: SendKeysShell setNum, 2: wait_custom 3
	If aApplyChanges Then
		ApplyChanges: wait_custom 3
	End If
	functionend "SensorGeometrySet"
End Sub

Function Test_ThreeSensorsZoneType(byval name, byval TrafficZone, byval ZoneType, byval qq, byval zz, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_ThreeSensorsZoneType=0	 

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_ThreeSensorsZoneType name, TrafficZone, ZoneType, qq, zz, adjust: exit function
		end if
		
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: SensorZoneTypeChange ZoneType, true: wait_custom 3
		
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): ww=GetSensorZoneProperty("width")
		
		Sensors=SensorsSetup: xx=adjust+xx+ww/2
		
		dim sensor_x(3)
		sensor_x(0)=xx
		sensor_x(1)=xx-adjust
		sensor_x(2)=xx-adjust-adjust

		sensor_y=yy
		
		For n=1 To 3 Step 1	
			if DragSensor (Sensors(n), xx,yy,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_ThreeSensorsZoneType name, TrafficZone, ZoneType, qq, zz, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_ThreeSensorsZoneType = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				ConfigTabPress "Cmds": wait_custom 2
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
				ConfigTabPress "Position": wait_custom 2
			End If
			SensorVerticalPositionChange -1, true: wait_custom 3: SensorHorizontalPositionChange (n-2), true: xx=xx-adjust: wait_custom 3
			ActivateSensorZone "", "", "": wait_custom 15
		Next

		TrafficDotSave SaveDOTMessage0(),SaveDOTPairMessage2(), "Yes", false, true, true: wait_custom 5
		
		Dim sensorZones(0), sztypes(0)
		
		sensorZones(0)=zoneName
		sztypes(0)=SensorZoneTypeCode(ZoneType)
		
		readXML "sensorZoneTypeMapping.xml", sensorZones, "", sztypes: wait_custom 3
		
		sensor_x(0)=x1+w1/2
		sensor_x(1)=x1+w1/2-adjust
		sensor_x(2)=x1+w1/2-adjust-adjust

		sensor_y=y1+w1/2
		
		printscreen name: wait_custom 3
		
		For n=1 To 3 Step 1	
			DeleteSensor Sensors(n), _
				null, _
				SensorDeleteConfirmMessage2(Sensors(n)), sensor_x(n-1), sensor_y
		Next
	
		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false,false, "Yes"
	
		wait_custom "fixed7": SystemSave "Save_2", false, true

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_ThreeSensorsZoneType = 1	
		End If
		TestFinished Err.Description, name
End Function

Function Test_UnmapSensorsDontAsk(byval name, byval TrafficZone, byval ZoneType, byval qq, byval zz, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_UnmapSensorsDontAsk=0	 

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_UnmapSensorsDontAsk name, TrafficZone, ZoneType, qq, zz, adjust: exit function
		end if
		
		zoneName = DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 3: SensorZoneTypeChange ZoneType, true: wait_custom 3
		
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): ww=GetSensorZoneProperty("width")
		
		Sensors=SensorsSetup: xx=adjust+xx+ww/2
		
		dim sensor_x(3)
		sensor_x(0)=xx
		sensor_x(1)=xx-adjust
		sensor_x(2)=xx-adjust-adjust

		sensor_y=yy
		
		For n=1 To 3 Step 1	
			if DragSensor (Sensors(n), xx,yy,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_UnmapSensorsDontAsk name, TrafficZone, ZoneType, qq, zz, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_UnmapSensorsDontAsk = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				ConfigTabPress "Cmds": wait_custom 2
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
				ConfigTabPress "Position": wait_custom 2
			End If
			xx=xx-adjust: ActivateSensorZone "", "", "": wait_custom "fixed5"
		Next
		
		sensor_x(0)=x1+w1/2: sensor_x(1)=x1+w1/2-adjust: sensor_x(2)=x1+w1/2-adjust-adjust

		sensor_y=y1+w1/2: dont_ask=true
		
		For n=1 To 3 Step 1	
			UnmapSensor Sensors(n), _
				null, _
				"", sensor_x(n-1), sensor_y: wait_custom 3
		Next: dont_ask=false
		
		wait_custom "fixed7": printscreen name: wait_custom 3
		
		SystemSave "Don't Save", false, true

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_UnmapSensorsDontAsk = 1	
		End If
		
		TestFinished Err.Description, name
End Function

Sub PickDirection (byval DirectionName)
		functionstart "PickDirection" & " " & DirectionName
		Dim nb: nb=1
		UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("Direction:").Click: wait_custom 1
		Select Case DirectionName
			Case "EB Inbound"
				SelectItem nb
			Case "WB Inbound"
				SelectItem nb+2
			Case "NB Inbound"
				SelectItem nb+4
			Case "SB Inbound"
				SelectItem nb+6
			Case "EB Outbound"
				SelectItem nb+1
			Case "WB Outbound"
				SelectItem nb+3
			Case "NB Outbound"
				SelectItem nb+5
			Case "SB Outbound"
				SelectItem nb+7
		End Select
		functionend "PickDirection"
End Sub

Sub ConfigTabActivateSensMetrics (byval TabName)
	functionstart "ConfigTabActivateSensMetrics" & " " & TabName
	UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_SensMetrics").UIAObject(TabName).Click: wait_custom 1
	functionend "ConfigTabActivateSensMetrics"
End Sub

Sub ConfigLeg (byval param, byval paramvalue, byval aApplyChanges)
	functionstart "ConfigLeg" & " " & param & " " & paramvalue
	ConfigTabActivateSensMetrics "Leg"
	Select Case param
		Case "Speed"
			ClickFromConfig 150, 455: ClearTextBoxAll: 
		Case "Left Turn Permissive"
			ClickFromConfig 110, 190: ClearTextBoxAll: 
		Case "Left Turn Protected"
			ClickFromConfig 110, 221: ClearTextBoxAll: 
		Case "Right Turn Permissive"
			ClickFromConfig 110, 288: ClearTextBoxAll: 
		Case "Right Turn Protected"
			ClickFromConfig 110, 321: ClearTextBoxAll: 
		Case "Through"
			ClickFromConfig 110, 388: ClearTextBoxAll: 
	End Select
	SendKeysShell paramvalue, 2	
	If aApplyChanges Then
		ApplyChanges: wait_custom 3
	End If
	functionend "ConfigLeg"
End Sub

Sub SensorZoneChangeName (byval boolActivate, byval szname, byval newName, byval boolApplyChanges)
	functionstart "SensorZoneChangeName"
	If boolActivate Then
		ActivateSensorZone szname, "", "": wait_custom 1
	End If	
	UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Required Field Name: Required").type newName: wait_custom 1
	If boolApplyChanges Then
		ApplyChanges : wait_custom 1
	End If
	Repository.Value("sensorZoneName")=newName
	Repository.Value("UseNewZone")="Use new (" & newName & ")"
	functionend "SensorZoneChangeName"
End Sub

Function MustSupplySpeedExist()
	functionstart "MustSupplySpeedExist"
	popup = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Must supply a valid speed").Exist
	if popup then ActivateOKbutton
	functionend "MustSupplySpeedExist"
End Function

Function SZDirectionNameAndCode (byval directionName, byref dircode)
	functionstart "SZDirectionNameAndCode"
	dircode="1"
	If instr(1, directionName, "Inbound")>0 Then
		dircode="0"	
	End If
	SZDirectionNameAndCode=directionName
	functionend "SZDirectionNameAndCode"
End Function

Function PocketLaneLengthSet (byval tabclick, byval lanelength, byval aApplyChanges, byval units)
	functionstart "PocketLaneLengthSet"
	If tabclick Then
		ConfigTabActivateSensMetrics "Lane": wait_custom 1
	End If
	UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Is Pocket Lane?").Click: wait_custom 3
	ClickFromConfig 96, 228: ClearTextBoxAll: 
	SendKeysShell lanelength, 2	
	If aApplyChanges Then
		ApplyChanges: wait_custom 3
	End If
	If units="Metric" Then
		EditBOX "Lane Length (m)",  false, lanelength,  units, true: wait_custom 1
	else
		EditBOX "Lane Length (ft)",  false, lanelength,  units, true: wait_custom 1
	End If
	functionend "PocketLaneLengthSet"
End Function

Function LaneNumberChange (byval tabclick, byval laneNumber, byval defaultIsEmpty, byval aApplyChanges)
	
	functionstart "LaneNumberChange" & " " & laneNumber
	
	Dim adNum, key: if tabclick then ConfigTabActivateSensMetrics "Lane": wait_custom 1
	
	current=UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("Lane Number").GetROProperty("value")

	If current<>"" Then defaultIsEmpty=false: If cstr(lanenumber)=current Then Exit function
	
	If defaultIsEmpty or current="" then current=0
	
	key="UP": If cint(lanenumber)>=cint(current) Then key="DOWN"

	UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("Lane Number").Click: wait_custom 3
	
	SelectItemDir Abs(cint(laneNumber)-cint(current)), key: wait_custom 1
	
	If aApplyChanges Then ApplyChanges: wait_custom 3
	functionend "LaneNumberChange"

End Function

Function Test_EMEA_Global_Sensitivity_Other(byval name)
	
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_EMEA_Global_Sensitivity_Other=0	

	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function
	ElseIf repeat=1 Then
		Test_EMEA_Global_Sensitivity_Other name: exit function
	end if
	
	if AvoidGateway(APEG_128) Then
		exit function
	end if
	
	TD2CloseX(): wait_custom 7
	
	apname = Environment("APname"): emea_messages=false
	configfile="TDConfig_" & apname & ".csv"

	WinSCPDelete configfile, "/etc/apeg": file_deleted=true: upload_no=false
	
	force_other_gs=true
		
	global_sensitivity="Other": skip_start_email=true: TrafficDotLogin name, repeat, false: upload_no=true
	
	Sensors=SensorsSetup: mapping_choice_found=false: MappingChoiceFind Sensors(1), mch
	
	If global_sensitivity="Other" Then
		ValidationSucceeded "Global Sensitivity", "Other"
	else
		ValidationFailed "Global Sensitivity", "Not Other"
	End If
	
	TD2CloseX(): wait_custom "fixed7"
	
	If(Err.Number<>0)  or test_failed Then
		ValidationFailed name, Err.Description
		Test_EMEA_Global_Sensitivity_Other = 1	
	End If
	
	TestFinished Err.Description, name
	
end function

Function Test_EMEA_BVD_Config (byval name, byval bvd)
	
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_EMEA_BVD_Config=0	

	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function
	ElseIf repeat=1 Then
		Test_EMEA_BVD_Config name: exit function
	end if
	
	if AvoidGateway(APEG_128) Then
		exit function
	end if
		
	filemap="mappings40" & bvd & ".csv": configfilewrite=CONFIG_EMEA & filemap

	if mapping_choice<>bvd Then
		TD2CloseX(): wait_custom "fixed7"
		new_mapping_choice=bvd
		apname = Environment("APname"): emea_messages=false
		configfile="TDConfig_" & apname & ".csv"
		WinSCPDelete configfile, "/etc/apeg": file_deleted=true: upload_no=false
		skip_start_email=true: TrafficDotLogin name, repeat, false: upload_no=true
	End If
		
	WriteConfigFileToAP configfilewrite, false: wait_custom "fixed25"
		
	TD2LaunchAfterEMEAbvdReboot name
		
	wait_custom 7: printscreen name: wait_custom "fixed7"
	
	RefreshMapAndConfigFile "", false: wait_custom "fixed25"
	
	If(Err.Number<>0) or test_failed  Then
		ValidationFailed name, Err.Description
		Test_EMEA_BVD_Config = 1	
	End If
	
	TestFinished Err.Description, name
End Function

Function Test_EMEA_CC_STS_Mapping(byval name, byref changeback)
	
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_EMEA_CC_STS_Mapping=0	

	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function
	ElseIf repeat=1 Then
		Test_EMEA_CC_STS_Mapping name, changeback: exit function
	end if
	
	if AvoidGateway(APEG_128) Then
		exit function
	end if
	
	TD2CloseX(): wait_custom "fixed7"

	if mapping_choice ="cc" or mapping_choice="apgi" Then
		if OddOrEven(GetBuildNumberDry)=1 then
			new_mapping_choice="bvd4"
		else
			new_mapping_choice="bvd20"
			
		end if
	else
		if OddOrEven(GetBuildNumberDry)=1 then
			new_mapping_choice="cc"
		else
			new_mapping_choice="apgi"
		end if	
	End If
	
	apname = Environment("APname"): emea_messages=false
	configfile="TDConfig_" & apname & ".csv"

	WinSCPDelete configfile, "/etc/apeg": file_deleted=true: upload_no=false
	
	skip_start_email=true: TrafficDotLogin name, repeat, false: upload_no=true
	
	WriteToFeatureFile "Configuration File was deleted from AP" & " " & configfile, ""
	
	TD2CloseX(): wait_custom 7
	
	apegfile=ARCHIVED_FOLDER & "apeg" & GetDateTimeStamp & ".rc"
		
	WinSCPDownload "apeg.rc", "/etc/apeg", apegfile
	
	inverted=false
	
	if new_mapping_choice="cc" or new_mapping_choice= "apgi" then inverted=true
	
	str="enableSTS=" & """1"""
		
	FileReadAndValidate   apegfile , str , true, 1, inverted: wait_custom 5
	
	WriteToFeatureFile "Mapping choice was set to " & " " & ucase(mapping_choice), ""
	
	If(Err.Number<>0) or test_failed  Then
		ValidationFailed name, Err.Description
		Test_EMEA_CC_STS_Mapping = 1	
	End If
	
	TestFinished Err.Description, name
End Function

Function Test_EMEA_Load_Config_File(byval name, byref changeback)
	
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_EMEA_Load_Config_File=0	
	
	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function
	ElseIf repeat=1 Then
		Test_EMEA_Load_Config_File name, changeback: exit function
	end if
	
	if AvoidGateway(APEG_128) Then
		exit function
	end if
	
	TD2CloseX(): wait_custom 7
	
	apname = Environment("APname"): emea_messages=false
	configfile="TDConfig_" & apname & ".csv"

	WinSCPDelete configfile, "/etc/apeg": file_deleted=true: upload_no=false
	
	skip_start_email=true: template_yes=false: TrafficDotLogin name, repeat, false: upload_no=true: file_deleted=false

	wait_custom "fixed25": skip_start_email=false: TrafficDotLogin name, repeat, false: skip_start_email=true	

	If(Err.Number<>0) or test_failed Then
		ValidationFailed name, Err.Description
		Test_EMEA_Load_Config_File = 1	
	End If
	
	TestFinished Err.Description, name
	
End Function



Function Test_EMEA_CC_STS_Mapping_Original(byval name, byval mappingchoice)
	
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_CC_STS_Mapping_Original=0	

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_CC_STS_Mapping_Original name, mappingchoice: exit function
		end if
		
		Tools "Preferences...", "", "": wait_custom 5
		
		mappc= Environment("EMEA_Mapping_Choice")
		
		If mappc="" Then
			mappc=mappingchoice
		End If
		
		if ChangeMappingChoice (mappc, "Apply")<0 then
			TrafficDotClose false, false
		else
			wait_custom 90
		end if

		apegfile=ARCHIVED_FOLDER & "apeg" & GetDateTimeStamp & ".rc"
		
		WinSCPDownload "apeg.rc", "/etc/apeg", apegfile
		
		str="enableSTS=" & """1"""
		
		FileReadAndValidate apegfile , str , true, 1, true: wait_custom 5

		TestCase32 ("Test_EMEA_7_Sensors")
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_CC_STS_Mapping name, mappingchoice: exit function
		end if
		
		Tools "Preferences...", "", "": wait_custom 5
		
		if ChangeMappingChoice ("STS", "Apply")<0 then
			TrafficDotClose false, false
		else
			wait_custom 180
		end if
	
		apegfile=ARCHIVED_FOLDER & "apeg" & GetDateTimeStamp & ".rc"
		
		WinSCPDownload "apeg.rc", "/etc/apeg", apegfile
		
		str="enableSTS=" & """1"""
		
		FileReadAndValidate apegfile , str , true, 1 , false: wait_custom "fixed7"
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_CC_STS_Mapping_Original = 1	
		End If
		TestFinished Err.Description, name
End Function

Function ValidateButtons(byval rolename, byval viewname, byval activateview, byval removecontroller, byval messageid)
	functionstart "ValidateButtons" & " " & rolename & " " & viewname
	If activateview Then
		If instr(lcase(viewname), "map")>0 Then
			ActivateMapButton
		ElseIf instr(lcase(viewname), "gateway")>0 Then
			ActivateButton "Gateway Info": wait_custom "fixed10"
		Elseif instr(lcase(viewname), "sensor")>0 Then
			SensorsList false	
		End If 	
	End If
	blist = ButtonsList (viewname, false)
	If removecontroller Then
		blist = replace(blist, "APGIDeviceDragtoplaceonMap", "")
		WriteToLogfile "Revised ButtonList" & ":" & blist
	End If
	
	If messageid="Messages_0041" or _
		messageid="Messages_0042" or _
		messageid="Messages_0044" or _
		messageid="Messages_0048" Then
		blist = replace(blist, "UploadIntersectionTemplateorMapUpload", "")
	End If
	If messageid="Messages_0041" or _
		messageid="Messages_0042" or _
		messageid="Messages_0043" or _
		messageid="Messages_0044" or _
		messageid="Messages_0045" or _
		messageid="Messages_0047" or _
		messageid="Messages_0048" or _
		messageid="Messages_0037" or _
		messageid="Messages_0038" or _
		messageid="Messages_0039" Then
		blist = replace(blist, "Txt", "")
	End If
	
	blist1=EnvironmentGetMessages (messageid)
	assertStringEquals blist, blist1, _
				"verify " & rolename & " " & viewname & " view controls: buttons", ""
	functionend "ValidateButtons"
End Function

Function ValidateDropdownList (byval dpName, byval viewname, byval messageid)
	functionstart "ValidateDropdownList" & " " & dpName & " " & viewname
	dplist = DropdownList (dpName, false, viewname, false, objd)
	If messageid="Messages_0053" Then
		dplist1=ChangeRFChannelMessage ("Messages_0053")
	ElseIf messageid="Messages_0058" Then
		dplist1=EnvironmentGetMessages (messageid)
		dplist1=replace (dplist1, "?", "μ")
	ElseIf messageid="Messages_0059" Then
		dplist1=EnvironmentGetMessages (messageid)
		functionend "ValidateDropdownList"
		Exit function
		If instr(1,dplist1,dplist)>0   Then
			ValidationSucceeded "ValidateDropdownList", dpName
			functionend "ValidateDropdownList"
			Exit function
		End If
	else
		dplist1=EnvironmentGetMessages (messageid)
	End If
	assertStringEquals dplist, dplist1, _
				"verify " & "dropdown: " & dpname & "on " & viewname,  ""
	functionend "ValidateDropdownList"
End Function

Function Test_SensMetrics (byval name, byval TrafficZone, byval zoneType, byval directionName, byval x_a, byval y_a)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_SensMetrics=0	 

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_SensMetrics name, TrafficZone, zoneType, directionName, x_a, y_a: exit function
		end if
		
		UserPreferencesUnits units, false, true
		
		ValidateButtons "SensMetrics", "Map:", false, true, "Messages_0041": wait_custom 5
		ValidateButtons "SensMetrics", "Gateway:", true, true, "Messages_0039"

		DeltasForSensorZones TrafficZone, deltax, deltay
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")
		lanelength_100="100": lanelength_0="0"
		
		If units="Metric" Then
			lanelength_converted_100="328.084"
		elseIf units="Imperial" Then
			lanelength_converted_100="100"
		End If
		
		const lanenumber_1="2": const lanenumber_2="3"
	
		zoneName = DragSensorZone (TrafficZone, x_a, y_a, xx, yy, ww, hh,tryid): wait_custom 3: SensorZoneTypeChange zoneType, false: wait_custom 3
		PickDirection SZDirectionNameAndCode(directionName, dircode): wait_custom 1: ApplyChanges: wait_custom 3: MustSupplySpeedExist: wait_custom 1
		ConfigLeg "Speed", "55", false: wait_custom 1: LaneNumberChange true, lanenumber_1, false, true
		
		zoneName1 = DragSensorZone (TrafficZone, x_a+deltax, y_a+deltay, xx, yy, ww, hh,tryid): wait_custom 3: SensorZoneTypeChange zoneType, false: wait_custom 3	
		ChangeSensorZoneArrowType ARROW_LEFT_RIGHT_THROUGH, true: wait_custom 3
		PickDirection SZDirectionNameAndCode(directionName, dircode1): wait_custom 1: ApplyChanges: wait_custom 3: MustSupplySpeedExist: wait_custom 1
		ConfigLeg "Speed", "45", false: ConfigLeg "Left Turn Permissive", "2", false: ConfigLeg "Left Turn Protected", "4", false
		ConfigLeg "Right Turn Permissive", "3", false: ConfigLeg "Right Turn Protected", "8", false: ConfigLeg "Through", "5", false
		LaneNumberChange true, lanenumber_1, false, false: wait_custom 1
		PocketLaneLengthSet false, lanelength_100, true, units: wait_custom 10
		
		dim sensorZones(1), lanecodes(1), lanenumbers(1), lanelengths(1), _
				leftTurnAllowed(1), rightTurnAllowed(1), throughAllowed(1)
		
		sensorZones(0)=zoneName: sensorZones(1)=zoneName1
		
		lanecodes(0)=dircode: lanecodes(1)=dircode1
		lanenumbers(0)=lanenumber_1: lanenumbers(1)=lanenumber_1
		lanelengths(0)=lanelength_0: lanelengths(1)=lanelength_converted_100
		leftTurnAllowed(0)="false": leftTurnAllowed(1)="true"
		rightTurnAllowed(0)="false": rightTurnAllowed(1)="true"
		throughAllowed(0)="true": throughAllowed(1)="true"
		
		readXML "sensorZonesUI.xml", sensorZones, "laneType", lanecodes: wait_custom 3
		readXML "sensorZonesUI.xml", sensorZones, "laneLength", lanelengths: wait_custom 3
		readXML "sensorZonesUI.xml", sensorZones, "laneNumber", lanenumbers: wait_custom 3
		readXML "sensorZonesUI.xml", sensorZones, "leftTurnAllowed", leftTurnAllowed: wait_custom 3
		readXML "sensorZonesUI.xml", sensorZones, "rightTurnAllowed", rightTurnAllowed: wait_custom 3
		readXML "sensorZonesUI.xml", sensorZones, "throughAllowed", throughAllowed: wait_custom 3

		ActivateSensorZone zoneName, "", "": wait_custom 3: LaneNumberChange true, lanenumber_2, false, true: wait_custom 3
		
		lanenumbers(0)=lanenumber_2: lanenumbers(1)=lanenumber_1
		
		readXML "sensorZonesUI.xml", sensorZones, "laneNumber", lanenumbers: wait_custom 3
		
		UserPreferencesUnits units, true, true
		
		SystemSave "Don't Save",  false, true
		
		If(Err.Number<>0) or test_failed   Then
			ValidationFailed name, Err.Description
			Test_SensMetrics = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function

Function Test_SensMetricsClearConfiguredSensors (byval name, byval ZoneType, byval x_a, byval y_a)
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_SensMetricsClearConfiguredSensors=0	
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_SensMetricsClearConfiguredSensors name, ZoneType, x_a, y_a: exit function
		end if

		if instr(1,  name, "_MET") then
			UserPreferencesUnits UNITS_METRIC, true, false
		else
			UserPreferencesUnits UNITS_IMPERIAL, true, false
		end if
		
		Sensors=SensorsSetup
		
		dim sensorZones(2), xs(2), ys(2), directions(2), trafficZones(2), throughnum(2)
		
		trafficZones(0)="Sensor Zone EB": trafficZones(1)="Sensor Zone WB": trafficZones(2)="Sensor Zone NB"
		throughnum(0)="1": throughnum(1)="1": throughnum(2)="3"
		directions(0)="EB Inbound": directions(1)="WB Inbound": directions(2)="NB Inbound"

		Dim delta, dircode,lanenumber_1 : delta=35: dircode="0": lanenumber_1=1
		
		wait_custom 3
		For n = 0 To 2 Step 1		
			if n=1 Then x_a=x_a+szwidth+delta
			if n=2 Then 
				x_a=x_a-delta: y_a=y_a+szwidth+delta
			end if: sensorZones(n) = DragSensorZone (trafficZones(n), x_a, y_a, xx, yy, ww, hh,tryid): wait_custom 3
			xs(n)=GetSensorZoneProperty("x"): ys(n)=GetSensorZoneProperty("y")
			wait_custom 3: SensorZoneTypeChange ZoneType, true: wait_custom 3
			PickDirection SZDirectionNameAndCode(directions(n), dircode): wait_custom 1
			ApplyChanges: wait_custom 3: MustSupplySpeedExist: wait_custom 1
			ConfigLeg "Speed", "45", true: ConfigLeg "Through", throughnum(n), true: wait_custom 10
			If n=0 Then SensorZoneDimensions szwidth, szheight: wait_custom "fixed7"
		Next: wait_custom 10: gset="2": gnum=1
		
		For n=1 To 3 Step 1	
			xpos=xs(n-1)+szwidth/2: ypos=ys(n-1)+szheight/2
			if n=3 Then
				xpos=xs(n-1)+szheight/2: ypos=ys(n-1)+szwidth/2
			end if
			if DragSensor (Sensors(n), xpos,ypos, sensorZones(n-1))<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_SensMetricsClearConfiguredSensors name, ZoneType, x_a, y_a
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_SensMetricsClearConfiguredSensors = 1
			   		Exit function
				End If
			end if
			SensorVerticalPositionChange 1, true: wait_custom 3
			SensorGeometrySet gnum, gset, true: wait_custom 3
			if n<3 then ActivateSensorZone "", "", ""
			wait_custom "fixed7"
		Next
	
		For n = 0 To ubound(sensorZones) Step 1
			ActivateSensorZone sensorZones(n), xs(n)+7, ys(n)+7: wait_custom 5
			LaneNumberChange true, lanenumber_1, true, true: wait_custom 5
		Next
		
		printscreen name: wait_custom 7
		
		sensor_deleted_from_cz=false
		
		For n = 0 To ubound(sensorZones)-1 Step 1
			UnmapSensorZone sensorZones(n), SensorZoneSensorMessage0(Sensors(n+1)), false, false, "": wait_custom 3
		Next
		
		ClearAllConfiguredSensors: wait_custom 5: sensor_deleted_from_cz=true: wait_custom "fixed5"


		For n = 0 To ubound(sensorZones) Step 1
			if SensorZoneObjectOnMap (sensorZones(n)) then
				ValidationFailed sensorZones(n), "on map after being cleared"
			else
				ValidationSucceeded sensorZones(n), "cleared"
			end if
		Next
		
		printscreen name: wait_custom 7
		
		SystemSave "Don't Save",  false, true
		
		If(Err.Number<>0) or test_failed   Then
			ValidationFailed name, Err.Description
			Test_SensMetricsClearConfiguredSensors = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function

Function ValidationFailed(byval name, byval errordescription) 
	If instr(1, name, "Test_")>0 Then name="Test general error:"
	functionstart "ValidationFailed" & " " & name & " " & errordescription
	Reporter.ReportEvent  micFail, name, errordescription
	fails_counter=fails_counter+1
	If instr(1, name, "Test_")>0 Then
	else	
		test_failed = true
	End If
	If name="SensitivityCheck" Then
		printscreen test_case_name: wait_custom 5
	End If
	test_step_failed=true
	functionend "ValidationFailed" &  " " & name & " " & errordescription
End Function

Function AvoidGateway(byval gatewayip)
	functionstart "AvoidGateway" & " " & gatewayip
	AvoidGateway=false
	If connect_error Then 
		if 	Environment("IPaddress")=gatewayip Then
			AvoidGateway=true
		end if
	end if
	functionend "AvoidGateway" 
End function

Function Test_EMEA(byval name, byval numrepeaters, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)
		
		TestAbsolete name: Exit Function 
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA name, numrepeaters, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
		
		repeater_x1=x_d: repeater_y1=y_d: numberofrepeaters=2: btw=50

		Dim repeater_x(5): Dim repeaters(5): Dim newsensors(5)
		
		repeaterNameS="100"
		
		life=false
		
		For n = 1 To numrepeaters Step 1
			repeaterName=repeaterNameS & n
			DragRepeater repeaterName, repeater_x1+btw*(n-1), repeater_y1, life: wait_custom 1
			If n=1 Then
				repeater_x_0=RepeaterAbsXGet
				repeater_y=RepeaterAbsYGet
				w=RepeaterWidthGet
			End If
			repeaters(n-1)=repeaterName
			repeater_x(n-1)=repeater_x_0+btw*(n-1)
		Next
		
		sMessage=ConfigureRepeaterMessage(repeaters(0), repeaters(1))
		
		rep_base_x=repeater_x(0)+btw+w/2: rep_base_y=repeater_y+w/2
		
		GripAndDragObjects rep_base_x, rep_base_y, repeater_x(0)+w/2, _
						repeater_y+w/2, sMessage, repeaters(1), repeaters(0): wait_custom 3 
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 3
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d: apx=x_d: apy=y_d+200
		
		DragAP apx, apy, oap, 0: skip_controller=true: wait_custom 5
		
		GripAndDragObjects repeater_x(0)+w/2, repeater_y+w/2, apx, apy, sMessage, repeaters(0), "AP": wait_custom 5
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 5
		
		controllerName = ControllerSetup("", 2)
		If controllerName<>"" Then
			skip_controller=false: ti=0
			wait_custom 10: DragControllerNew controllerName, x_d+250, y_d+200, 2, ti
		End If

		Set controller_obj = ActivateController (controllerName, "", ""): 
		
		wait_custom 3: SizeAndRotateObject controllerName, controller_obj, false, 25, 25, false, 0: wait_custom 10
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		Sensors=SensorsSetup
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA name, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, false: wait_custom 1: TramNearByChange "On": wait_custom 1
			ApplyEMEA 0:  wait_custom 7: HideLog: wait_custom 1
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
			wait_custom 15: ys=ys+adjust
		Next 
	
		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaters(0))
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
						repeater_x(0)+w/2, repeater_y+w/2, sMessage, Sensors(n), repeaters(0): wait_custom 3
		Next
		
		sensorN="000": x_new=xs+adjust: y_new=yy_orig: wait_custom 5
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4
			DragNewSensor newsensorname , x_new, y_new, newsensorname: wait_custom 1
			ChangeSensitivity senst, false, false: wait_custom 1: TramNearByChange "On": wait_custom 1
			ApplyEMEANewSensor newsensorname: wait_custom 7
			HideLog: wait_custom 5
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 2
			y_new=y_new+adjust
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next	

		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), repeaters(1))
			GripAndDragObjects xx1+w1/2, yy1+(n-1)*adjust+w1/2, _
							repeater_x(1)+w/2, repeater_y+w/2, sMessage, newsensors(n-1), repeaters(1) : wait_custom 3
		Next
		
		If numnewsensors>2 Then
			xc = controller_obj.GetROProperty("abs_x")
			xy = controller_obj.GetROProperty("abs_y")
			wc = controller_obj.GetROProperty("width")
			newxc=xc+wc-8
			newyc=xy+10
			emea_messages=true: channel="1"
			str4= newsensors(2) & ", " & repeaters(1) & ", false, 0"
			str5 = newsensors(2) & "," & "1" & "-" & channel
			if instr (1, controller_type, "FlexConnect")>0 then
				controllername_map="FlexConnect Rack 1"
			else
				controllername_map="ExCard Rack 1"
			End If  
			sMessage=ConfigureSensorControllerMessage(newsensors(2), controllername_map, channel)
			GripAndDragObjects xx1+w1/2, yy1+(2)*adjust+w1/2, newxc, newyc, sMessage, newsensors(2),controllername_map
			emea_messages=false
		End If

		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()

		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		Dim validations(7)
		
		validations(0) = repeaters(1) & ", " & repeaters(0) & ", true" ', 4, 5, 15"
		validations(1)= Sensors(1) & ", " & repeaters(0) & ", false, "' & channelv
		validations(2)= newsensors(0) & ", " & repeaters(1) & ", false, 0"
		validations(3)= newsensors(1) & ", " & repeaters(1) & ", false, 0"
		validations(4)=str4: validations(5)=str5
		validations(6)=repeaters(0) & ", " & APRadio_0 & ", true, 4, 5, 14"
			
		ActivateObjectOnMap "AP", apx, apy: wait_custom 3: ActivateGetTopologyConfigFromAP: wait_custom 3
		csvfilename=ARCHIVED_FOLDER & "mappings" & GetDateTimeStamp & ".csv"
		FileUpload "Download config from Gateway", csvfilename , "Save", true, "Sensys Networks TrafficDOT": wait_custom 7

		For n = 0 To ubound(validations) Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, false: wait_custom 10
		Next

		dim sensor_y(): ReDim preserve sensor_y(numsensors)
		
		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next: sensor_x=x1+w1/2
		
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5
		
		For n=1 To numnewsensors Step 1	
			DeleteSensorDragOff sensorN & n+4, _
				null, _
				SensorDeleteConfirmMessage3(sensorN & n+4), xx1+w1/2, yy1+w1/2+adjust*(n-1)
		Next: wait_custom 5
		
		For n = numrepeaters To 1 Step -1
			repeaterName=repeaterNameS & n
			UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "Unconfigure": wait_custom 1
		Next: wait_custom 5
		
		UnmapController controllerName, ControllerUnmapMessage(controllerName), skip_controller, false, "", "": wait_custom 10
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 10
	
		For n = 1 To numnewsensors Step 1
			VerifyList "Sensor", sensorN & n+4, false
		Next
		
		For n=1 To numsensors Step 1
			VerifyList "Sensor",Sensors(n), false
		Next: wait_custom 3
		
		For n = 1 To numrepeaters 		
			VerifyList "Repeater", repeaterNameS & n, false
		Next: wait_custom 3
		
		VerifyList "Controller", controllerName, skip_controller: wait_custom 3
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom "fixed7"
	
		TrafficDotClose false, false: 

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA = 1	
		End If
		
		TestFinished Err.Description, name
		
End Function

Function GenericSensorSetup(byval microradar)
	functionstart "GenericSensorSetup"
	gsn=Environment.Value("GenericSensor")
	If gsn="" Then
		gsn="000"
	End If
	if microradar then
		gsn="00B"
	end if
	GenericSensorSetup=gsn
	functionend "GenericSensorSetup"
End Function

Function Test_EMEA7Sensors(byval name, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA7Sensors=0	 
		
		apname = Environment("APname"): emea_messages=false
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA7Sensors name, x_d, y_d, adjust: exit function
		end if
		
		MapLayersPendingConnectionsAPSwitch true: wait_custom 3
		
		cname1 = controller_emea: MappingCONTROLLERSetUp controllercode, controllercode1, cname1, cname2
		
		TestTitleOnMap name + "(" + global_sensitivity + "," + mapping_choice + ")",  x_d, y_d+150, xtb, ytb, 0,90,0 
		
		DragCompass x_d-50,y_d-10: wait_custom 3
		
		repeaterName="700": life=false
		
		RepeaterSet repeaterName, life, 0: DragRepeater repeaterName, x_d, y_d, life: wait_custom 1
		
		repeater_x=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d

		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x+w/2, repeater_y+w/2, apx, apy, sMessage, repeaterName, "AP": wait_custom 3
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		Sensors=SensorsSetup: numsensors=1
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA7Sensors name, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA7Sensors = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, false: wait_custom 1: TramNearByChange "On": wait_custom 1
			ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
			ActivateObjectOnMap "Repeater", repeater_x+w/2, repeater_y+w/2
			wait_custom 15: ys=ys+adjust
		Next 

		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaterName)
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
							repeater_x+w/2, repeater_y+w/2, sMessage, Sensors(n), repeaterName
		Next
		
		sensorN=left(GenericSensorSetup(false), 3): sensorNM=left(GenericSensorSetup(true), 3)
		x_new=xs+adjust: y_new=yy_orig: wait_custom 5
		
		numnewsensors = 7
		Dim newsensors(): ReDim preserve newsensors(numnewsensors)
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n
			if n=3 then newsensorname=sensorNM & n
			DragNewSensor newsensorname , x_new, y_new, newsensorname: wait_custom 1
			ApplyEMEANewSensor newsensorname: wait_custom 7
			HideLog: wait_custom 5
			ActivateObjectOnMap "Repeater", repeater_x+w/2, repeater_y+w/2: wait_custom 2
			y_new=y_new+adjust
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next	

		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), repeaterName)
			GripAndDragObjects xx1+w1/2, yy1+(n-1)*adjust+w1/2, _
							repeater_x+w/2, repeater_y+w/2, sMessage, newsensors(n-1), repeaterName: wait_custom 5
		Next

		numallsensors = numsensors + numnewsensors
		
		cx1=x_d+250: cy1=y_d+200: ti=0: cx2=x_d+250: cy2=y_d+300
		
		DragControllerNew cname1, cx1, cy1, 2, ti: wait_custom 10
	
	    TrafficDotSaveAndCloseXY false, 25, 10, 3: wait_custom "fixed7"

		skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 10:skip_start_email=false
		
		wait_custom 10: DragControllerNew cname2, cx2, cy2, 2, ti: wait_custom "fixed15"

		TrafficDotSave SavingToAPMessage0_1(), SavingToAPMessage1(), "OK", false, true, false: wait_custom "fixed10"
		
		TD2LaunchAfterEMEAbvdReboot name
			
		Dim validations(): ReDim preserve validations(3+numnewsensors*2)
		
		validations(0)= Sensors(1) & ", " & repeaterName & ", false, "
		validations(1)= repeaterName & ", " & APRadio_0 & ", true, "
		
		For n = 1 To numnewsensors Step 1
			validations(n+1)= newsensors(n-1) & ", " & repeaterName & ", false, 0"
		Next
		
		validations(numnewsensors+2)= Sensors(1) & "," & controllercode & "1"
		startv=numnewsensors+3: channels = 4
		
		For n = startv To ubound(validations)-1 Step 1
			If mapping_choice<>"sts" and mapping_choice<>"bvd20" Then
				If (numsensors+1+n-startv)>channels Then 
					If mapping_choice="bvd4" Then
						controllercode=	controllercode1
					else
						controllercode="0-01-"
					End If
					validations(n)= newsensors(n-startv) & "," & controllercode & (numsensors+1+n-startv-4)
					print validations(n)
				else
					validations(n)= newsensors(n-startv) & "," & controllercode & (numsensors+1+n-startv)
					print validations(n)
				end if
			else
				validations(n)= newsensors(n-startv) & "," & controllercode & (numsensors+1+n-startv)
				print validations(n)
			End If 
		Next
	
		csvfilename=ARCHIVED_FOLDER & "mappings" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, apx, apy: wait_custom 7

		For n = 0 To ubound(validations)-1 Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, false: wait_custom 1
		Next
		
		FileReadAndValidate csvfilename,ucase(mapping_choice) , true, ubound(validations), false: wait_custom 7
		
		printscreen name: wait_custom 3
		
		UnmapCompass CompassRemoveMessage(), x_compass+5, y_compass+5: wait_custom 3
		
		UnmapTextBOX TextBoxDeleteConfirmMessage, xtb+5, ytb+5: wait_custom 3
		
		UnmapController cname1, ControllerUnmapMessage(cname1), false, false, cx1, cy1: wait_custom 7
		
		UnmapController cname2, ControllerUnmapMessage(cname2), false, false, cx2, cy2: wait_custom 7	
		
		dim sensor_y(): ReDim preserve sensor_y(numsensors)
		
		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next: sensor_x=x1+w1/2
		
		dont_ask=true
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5
		
		For n=1 To numnewsensors Step 1	
			newsensorname=sensorN & n
			if n=3 then newsensorname=sensorNM & n
			DeleteSensorDragOff newsensorname, _
				null, _
				SensorDeleteConfirmMessage3(newsensorname), xx1+w1/2, yy1+w1/2+adjust*(n-1)
		Next: wait_custom 5: dont_ask=false

		UnmapRepeater repeaterName, repeater_x+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "": wait_custom 10
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 10
		
		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()

		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK
		
		TrafficDotCloseBVD
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA7Sensors = 1	
		End If
		
		TestFinished Err.Description, name
End Function

function TD2LaunchAfterEMEAbvdReboot(byval tname)
	functionstart "TD2LaunchAfterEMEAbvdReboot"
	TD2LaunchAfterEMEAbvdReboot=false
	if mapping_choice="bvd4" or mapping_choice="bvd20" Then
		wait_custom "fixed25"
		skip_start_email=true: TrafficDotLogin tname, repeat, true: wait_custom 10:skip_start_email=false
		wait_custom "fixed7":TD2LaunchAfterEMEAbvdReboot=true 
	end if 
	functionend "TD2LaunchAfterEMEAbvdReboot"
end function 

Function Test_EMEA_TableView (byval name, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_TableView=0	 
		
		apname = Environment("APname"): emea_messages=false
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_TableView name, x_d, y_d, adjust: exit function
		end if
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys

		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		Sensors=SensorsSetup: numsensors=1
		
		MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2

		tramnearby = "On"
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_TableView name, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_TableView = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, false: wait_custom 1: TramNearByChange tramnearby: wait_custom 1
			ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
			ActivateObjectOnMap "AP", apx, apy: wait_custom 15: ys=ys+adjust
		Next 

		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaterName)
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
							apx, apy, sMessage, Sensors(n), "AP": : wait_custom 3
		Next
		
		sensorN=left(GenericSensorSetup(false), 3): x_new=xs+adjust: y_new=yy_orig: wait_custom 5
		
		numnewsensors = 1
		Dim newsensors(): ReDim preserve newsensors(numnewsensors)
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n
			DragNewSensor newsensorname , x_new, y_new, newsensorname: wait_custom 1
			ApplyEMEANewSensor newsensorname: wait_custom 7
			HideLog: wait_custom 5: ActivateObjectOnMap "AP", repeater_x+w/2, repeater_y+w/2: wait_custom 2
			y_new=y_new+adjust
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next	

		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), repeaterName)
			GripAndDragObjects xx1+w1/2, yy1+(n-1)*adjust+w1/2, _
							apx, apy, sMessage, newsensors(n-1), "AP": wait_custom 10
		Next

		MapLayersRadioConnectionsAPSwitch false: wait_custom 5

		numallsensors = numsensors + numnewsensors
		
		cx1=x_d+250: cy1=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllername, cx1, cy1, 2, ti), "", "") : wait_custom 25
		
		printscreen name: wait_custom 3
		
		ActivateButton("Map/Table"): wait_custom 7
		
		Dim validations(): ReDim preserve validations(1)
		
		Dim params2(1), params1(0)
		params1(0)= newsensors(0)
		params2(0)=Sensors(1): params2(1)=tramnearby
		
		validations(0)= MessagesParamsSet ("Messages_0034", params1)	
		validations(1)= MessagesParamsSet ("Messages_0035", params2)
	
		ReadTable UIListTable("List"), "EMEA Overview Table", false, false, "", true, validations, true
		
		printscreen name: wait_custom 3
		
		ActivateButton("Map/Table"): wait_custom 7: ActivateButton "Config": wait_custom "fixed7"

		TrafficDotClose false, true

		If(Err.Number<>0)  or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_TableView = 1	
		End If	
		TestFinished Err.Description, name
End Function

Function MessagesParamsSet(Byval messageID, byval paramvalues)
	functionstart "MessagesParamsSet" & " " & messageID
	MessagesParamsSet= test_MESSAGES(messageID)
	For n = 0 To ubound(paramvalues) Step 1 
		MessagesParamsSet = Replace(MessagesParamsSet, "param" & n+1, paramvalues(n))
	Next
	functionend "MessagesParamsSet" & " " & MessagesParamsSet
End Function

Sub MappingCONTROLLERSetUp(byref controllercode, byref controllercode1, byref cname1, byref cname2)
	functionstart "MappingCONTROLLERSetUp"
	
	If cname1="" Then
		cname1= controller_emea
	End If
	If mapping_choice="" Then
		mapping_choice_found=false
		Sensors=SensorsSetup
		MappingChoiceFind Sensors(1), mch
		MappingCONTROLLERSetUp controllercode, controllercode1, cname1, cname2: exit sub
	End If
	Select Case lcase(mapping_choice)
		Case "sts"
			controllercode="0-0-"
			cname2 = cname1 & "(5-8)"
		Case "bvd20"
			controllercode= bvd20_ipaddress & "-0-"
			cname2 = cname1 & "(5-8)"
		Case "bvd4"
			controllercode= bvd4_ipaddress & "-0-"
			controllercode1= bvd4_ipaddress_1 & "-0-"
			cname2 = "V1-0"
		Case "cc"
			controllercode="0-00-"
			cname2 = "V0-1"
		Case "apgi"
			controllercode="0-00-"
			cname2 = "V0-1"
	End Select
	functionend "MappingCONTROLLERSetUp" & " " & controllercode & " " & controllercode1 & " " & cname2
End Sub

Sub ActivateGetTopologyConfigFromAP
	functionstart "ActivateGetTopologyConfigFromAP"
	wait_custom 1: ActivateButton ("Download config from Gateway"): wait_custom 7
	functionend "ActivateGetTopologyConfigFromAP"
End Sub

Sub ActivateWriteConfigFileToAP
	functionstart "ActivateWriteConfigFileToAP"
	wait_custom 1: ActivateButton ("Write config file to Gateway"): wait_custom 7
	functionend "ActivateWriteConfigFileToAP"
End Sub

Sub ActivateStartFreshOnGateway
	functionstart "ActivateStartFreshOnGateway"
	For i = 1 To 2 
		wait_custom 1: ActivateButton ("Clear current config"): wait_custom 7
		If i=1 Then
			UIButton ("No").Click
		End If
	Next
	UIButton ("Yes").Click: bvd_address_set=false
	functionend "ActivateStartFreshOnGateway"
End Sub

Function Test_Offline_Basic(byval name)
	
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_Offline_Basic=0	

	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function
	ElseIf repeat=1 Then
		Test_Offline_Basic name: exit function
	end if
	
	TD2CloseX(): wait_custom 7
	
	overwrite_skip_test=true

	skip_start_email=false: offline_mode=true
	
	TestCase7("Test_New_Sensors")
	
	offline_mode=false: overwrite_skip_test=false
	
	If(Err.Number<>0) or test_failed  Then
		ValidationFailed name, Err.Description
		Test_Offline_Basic = 1	
	End If	
	
	TestFinished Err.Description, name

end function

Function Test_EMEA_Backup_Restore(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Backup_Restore=0	 
		
		apname = Environment("APname"): emea_messages=false

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Backup_Restore name, x_d, y_d: exit function
		end if
		
		textbox_xd=x_d: textbox_yd=y_d
		
		repeater_x1=x_d: repeater_y1=y_d
		
		numrepeaters=1: btw=50: adjust=0
			
		controllername = controller_emea: MappingCONTROLLERSetUp  controllercode, controllercode1, controllername, ""	
			
		Dim repeater_x(5): Dim repeaters(5)
		
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			DragRepeater repeaterName, repeater_x1+btw*(n-1), repeater_y1, life: wait_custom 1
			If n=1 Then
				repeater_x_0=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
			End If
			repeaters(n-1)=repeaterName: repeater_x(n-1)=repeater_x_0+btw*(n-1)
		Next
		
		rep_base_x=repeater_x(0)+btw+w/2
		rep_base_y=repeater_y+w/2
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d: apx=x_d: apy=y_d+200
		
		DragAP apx, apy, oap, 0: skip_controller=true
		
		RepeaterSet repeaterName, life, 0
		GripAndDragObjects repeater_x(0)+w/2, repeater_y+w/2, apx, apy, sMessage, repeaterName, "AP": wait_custom 3
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		Sensors=SensorsSetup: controllername = ControllerSetup(controller_emea, 2): numsensors=1
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_Backup_Restore name, x_d, y_d
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_Backup_Restore = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet
				x1= SensorAbsXGet
				y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, false: wait_custom 1: TramNearByChange "On": wait_custom 1
			ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
			wait_custom 15: ys=ys+adjust
		Next 
	
		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaters(0))
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
							repeater_x(0)+w/2, repeater_y+w/2, sMessage, Sensors(n), repeaters(0): wait_custom 3
		Next
		cx=x_d+250: cy=y_d+200
	
		If controllername<>"" Then
			skip_controller=false: ti=0
			wait_custom 10: DragControllerNew controllername, cx, cy, 2, ti
		End If

		Set obj = ActivateController (controllername, "", ""): wait_custom 3
		
		SizeAndRotateObject controllerName, obj, false, 25, 25, false, 0: wait_custom 10

		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
		
		title="Before Backup: Text Box"
		
		Set obj0 = TestTitleOnMap (title, textbox_xd, textbox_yd+150, xtb, ytb, 0, 90,0): wait_custom 3
		
		printscreen name: wait_custom 3
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfile=ARCHIVED_FOLDER & "mapp_before_restore" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfile, "", "": wait_custom 10
		
		mapvalidation= Sensors(1) & "," & controllercode & "1," 

		FileReadAndValidate csvfile, mapvalidation, true, 1, false: wait_custom 3
	
		ActivateObjectOnMap "AP", apx, apy: wait_custom 3 rem click on AP

		backup_filename_path=ARCHIVED_FOLDER & "back&up" & GetDateTimeStamp & ".csv"
		
		BackupAP backup_filename_path, false: wait_custom 1: ActivateFileErrorPopup: wait_custom 1
		
		filename= "backup" & GetDateTimeStamp & ".csv"
		backup_filename_path=ARCHIVED_FOLDER & filename
		
		BackupAP backup_filename_path, true: wait_custom 7
		
		UnmapController controllername, ControllerUnmapMessage(controllername), skip_controller, false, "", "": wait_custom 10
		
		dim sensor_y(): ReDim preserve sensor_y(numsensors)
		
		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next
		
		sensor_x=x1+w1/2
		
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5
		
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "Delete": wait_custom 1
		Next: wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
		
		UnmapTextBOX TextBoxDeleteConfirmMessage, xtb+5, ytb+5: wait_custom 5
		
		ignore_role_save=true:TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
	
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfileclear=ARCHIVED_FOLDER & "mapp_clr_before_restore" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfileclear, "", "": wait_custom 10
		
		mapvalidation= Sensors(1) & "," & controllercode & "1," 

		FileReadAndValidate csvfileclear, mapvalidation, true, 1, true: wait_custom 3
		
		ActivateAPInfo: wait_custom 1: RestoreAP backup_filename_path, RestoreAPMessage(filename) : wait_custom 1
		
		ApplyReboot: skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 5: skip_start_email=false 

		ActivateObjectOnMap "Text Box", xtb, ytb: wait_custom 3 				
				
		EditBoxValidate objrestored, title, true, 1: wait_custom 3
		
		printscreen name: wait_custom 3
		
		UnmapController controllerName, ControllerUnmapMessage(controllerName), skip_controller, false, "", "": wait_custom 10
		
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5
		
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "": wait_custom 1
		Next: wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
		
		UnmapTextBOX TextBoxDeleteConfirmMessage, xtb+5, ytb+5: wait_custom 5
		
		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfileclear=ARCHIVED_FOLDER & "mapp_clr_after_restore" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfileclear, "", "": wait_custom 10
		
		mapvalidation= Sensors(1) & "," & controllercode & "1," 

		FileReadAndValidate csvfileclear, mapvalidation, true, 1, true: wait_custom "fixed7"
		
		TrafficDotClose false, false

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_Backup_Restore = 1	
		End If	
		TestFinished Err.Description, name
End Function	

Function Test_EMEA_ReasignChannels(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_ReasignChannels=0	 
		
		apname = Environment("APname")

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_ReasignChannels name, x_d, y_d: exit function
		end if
		
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
	
		x=ShowLogsGetX: y=ShowLogsGetY: xs=x+x_d: ys=y+y_d

		Sensors=SensorsSetup: controllername = ControllerSetup(controller_emea, 2)
		
		MappingCONTROLLERSetUp  controllercode, controllercode1, controllername, ""	
		
		if DragSensor (Sensors(1), xs,ys,Sensors(1) )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2: Test_EMEA_ReasignChannels name, x_d, y_d
				Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true: Test_EMEA_ReasignChannels = 1: Exit function
			End If
		end if: wait_custom 15: w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		
		sensor_x=x1+w1/2: sensor_y=y1+w1/2

		newsensorname1="0008": x_new=xs+50: y_new=ys: wait_custom 10
		
		DragNewSensor newsensorname1, x_new, y_new, newsensorname1: wait_custom 1
		
		ApplyEMEANewSensor newsensorname1
		
		GripAndDragObjects x_new, y_new+10, _
							apx+5, apy+5, sMessage, newsensorname1, "GW" : wait_custom 3
		
		xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 7

		dot_id="": cx=x_d +200: cy=y_d +100
	
		If controllerName<>"" Then
			skip_controller=false: ti=0
			wait_custom 10: DragControllerNew controllerName, cx, cy, 2, ti: wait_custom 10
		End If

		Set obj = ActivateController (controllerName, cx, cy): wait_custom 10
		
		SizeAndRotateObject controllerName, obj, false, 25, 25, false, 0: wait_custom 5
		
		GetObjectXYWH controllerName, obj, xc, yc, hc, wc: emea_messages=true
		
		ChangeMappingChannel  x1+w1/2-2, y1+w1/2-2, _
							xc+wc-14, yc+hc-10, Sensors(1), controllerName: wait_custom 3					
							
		printscreen name: wait_custom 10
		
		DeleteSensorDragOff Sensors(1), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(1)), sensor_x+3, sensor_y+3: wait_custom 10
					
		if DragSensor (Sensors(2), xs,ys,Sensors(2) )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2: Test_EMEA_ReasignChannels name, x_d, y_d
				Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true: Test_EMEA_ReasignChannels = 1: Exit function
			End If
		end if: wait_custom 15: w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		
		sensor_x=x1+w1/2-2: sensor_y=y1+w1/2-2
		
		GripAndDragObjects sensor_x, sensor_y, _
							apx+5, apy+5, sMessage, Sensors(2), "GW" : wait_custom 3
		
		sensorN="010": adjust = 50
		x_new= x_new +adjust
		
		dim newsensors(1): dim nsensors_x(1): dim nsensors_y(1)
		
		For n = 1 To 2 Step 1
			newsensorname=sensorN & n+3
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			ApplyEMEANewSensor newsensorname: wait_custom 7
			dot_id="": newsensors(n-1)=newsensorname
			nsensors_x(n-1)=xx1+ww1/2+adjust*(n): nsensors_y(n-1)=yy1+ww1/2
			GripAndDragObjects x_new, y_new+10, _
							apx+5, apy+5, sMessage, newsensorname, "GW" : wait_custom 3
			x_new=x_new + adjust
		Next: wait_custom 5

		printscreen name: wait_custom 10
		
		emea_messages=false: clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
			
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		Dim validations(3)

		validations(0)= Sensors(2) & "," & controllercode & "1"
		validations(1) = newsensorname1 & "," & controllercode & "2"
		
		For n = 1 To 2 Step 1
		 	validations(n+1) = newsensors(n-1) & "," & controllercode & cstr(n+2)
		Next
		
		csvfilename=ARCHIVED_FOLDER & "mappings" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, "", "": wait_custom 10
		
		For n = 0 To ubound(validations) Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, false: wait_custom 1
		Next: wait_custom 10	
	
		CloseTrafficDot(): wait_custom 5
		
		rem !!!!!!!!!!!!!!!!!!!!!!!!second part of the test!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 10:skip_start_email=false

		UnmapController controllerName,  ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom "10_fixed"
		
		DeleteSensorDragOff Sensors(2), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(2)), sensor_x, sensor_y: wait_custom 7
			
		DeleteSensorDragOff newsensorname1, _
				null, _
				SensorDeleteConfirmMessage3(newsensorname1), xx1+w1/2, yy1+w1/2: wait_custom 7		

		For n=1 To 2 Step 1	
			print nsensors_x(n-1)
			print nsensors_y(n-1)
			DeleteSensorDragOff newsensors(n-1), _
				null, _
				SensorDeleteConfirmMessage3 (newsensors(n-1)), nsensors_x(n-1), nsensors_y(n-1)
		Next: wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5

		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK
		
		TrafficDotCloseBVD 
		'wait_custom "fixed7": CloseTrafficDot()
		
		If(Err.Number<>0) or test_failed   Then
			ValidationFailed name, Err.Description
			Test_EMEA_ReasignChannels = 1	
		End If	
		TestFinished Err.Description, name
End Function

Function Test_EMEA_ChangeChannelWriteConfigFileToAP(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_ChangeChannelWriteConfigFileToAP=0	 
		
		apname = Environment("APname"): emea_messages=false

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_ChangeChannelWriteConfigFileToAP name, x_d, y_d: exit function
		end if
		
		repeater_x1=x_d: repeater_y1=y_d: numrepeaters=1: btw=50: adjust=0
		
		Sensors=SensorsSetup: controllername = ControllerSetup(controller_emea, 2): numsensors=1
		
		MappingCONTROLLERSetUp  controllercode, controllercode1, controllername, ""
		
		Dim repeater_x(5): Dim repeaters(5)
				
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			DragRepeater repeaterName, repeater_x1+btw*(n-1), repeater_y1, life: wait_custom 5
			If n=1 Then
				repeater_x_0=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
			End If
			repeaters(n-1)=repeaterName: repeater_x(n-1)=repeater_x_0+btw*(n-1)
		Next
		
		rep_base_x=repeater_x(0)+btw+w/2: rep_base_y=repeater_y+w/2
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 3
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d: apx=x_d: apy=y_d+200
		
		DragAP apx, apy, oap, 0: skip_controller=true: wait_custom 3
		
		RepeaterSet repeaterName, life, 0
		GripAndDragObjects repeater_x(0)+w/2, repeater_y+w/2, apx, apy, "", repeaterName, "AP": wait_custom 3
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2: Test_EMEA_ChangeChannelWriteConfigFileToAP name, x_d, y_d
					Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true: Test_EMEA_ChangeChannelWriteConfigFileToAP = 1: Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ActivateObjectOnMap "Repeater", rep_base_x-1, rep_base_y-1
			wait_custom 15: ys=ys+adjust
		Next 
	
		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaters(0))
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
							repeater_x(0)+w/2, repeater_y+w/2, sMessage, Sensors(n), repeaters(0): wait_custom 3
		Next
		cx=x_d+250: cy=y_d+200
	
		If controllerName<>"" Then
			skip_controller=false: ti=0
			wait_custom 10: DragControllerNew controllerName, cx, cy, 2, ti
		End If

		Set obj = ActivateController (controllerName, "", ""): wait_custom 3
		
		SizeAndRotateObject controllerName, obj, false, 25, 25, false, 0: wait_custom 10
		
		printscreen name: wait_custom 10
		
		GetObjectXYWH controllerName, obj, xc, yc, hc, wc: emea_messages=true
		
		ChangeMappingChannel  x1+w1/2-2, y1+w1/2-2, _
							xc+wc-14, yc+hc-10, Sensors(1), controllerName: wait_custom 3
							
		GripAndDragObjects xc+wc/2, yc+hc/2, _
							xc-wc/2, yc+hc, "", controllerName, controllerName: wait_custom 3
							
		'printscreen name: wait_custom 3
		
		emea_messages=false: clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfileforwrite=ARCHIVED_FOLDER & "mapp_before_write" & GetDateTimeStamp & ".csv"
	
		DownloadConfigFromAP csvfileforwrite, "", "": wait_custom 7
		
		mapvalidation= Sensors(1) & "," & controllercode & "4," 

		FileReadAndValidate csvfileforwrite, mapvalidation, true, 1, false: wait_custom 3

		UnmapController controllerName, ControllerUnmapMessage(controllerName), _
						skip_controller, false, "", "": wait_custom 7
		
		dim sensor_y(): ReDim preserve sensor_y(numsensors)

		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next

		sensor_x=x1+w1/2
		
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5
		
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, _
										RepeaterUnmapMessage(repeaterName), false, "": wait_custom 1
		Next: wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 10
		
		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfileclear=ARCHIVED_FOLDER & "mapp_clr" & GetDateTimeStamp & ".csv": 
		
		DownloadConfigFromAP csvfileclear, "", "": wait_custom 10
		
		mapvalidation= Sensors(1) & "," & controllercode & "4," 

		FileReadAndValidate csvfileclear, mapvalidation, true, 1, true: wait_custom 3

		SystemSave "Don't Save", false, true: wait_custom 3
		
		rem !!!!!!!!!!!!!!!!!!!!!!!!second part of the test!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		rem !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
		skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 10:skip_start_email=false
		
		WriteConfigFileToAP csvfileforwrite, false: wait_custom 5		
		
		TD2LaunchAfterEMEAbvdReboot name
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d: apx=x_d: apy=y_d+200

		x_repeater=x+x_d: y_repeater=y+y_d: numrepeaters=1: btw=50: adjust=0
		
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			DragSensor repeaterName, x_repeater+btw*(n-1), y_repeater, "Repeater": wait_custom 1
			If n=1 Then
				repeater_x_0=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
			End If
			repeaters(n-1)=repeaterName: repeater_x(n-1)=repeater_x_0+btw*(n-1)
		Next
		
		rep_base_x=repeater_x_0+w/2: rep_base_y=repeater_y+w/2
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 5
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d: apx=x_d: apy=y_d+200
	
		DragAP apx, apy, oap, 0: skip_controller=true: wait_custom 5: numsensors=1: wait_custom "fixed7"
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
					Test_EMEA_ChangeChannelWriteConfigFileToAP name, x_d, y_d
					Exit function   
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_ChangeChannelWriteConfigFileToAP = 1: Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
			wait_custom 15: ys=ys+adjust
		Next 
		
		ti=0: cx=x_d+250: cy=y_d+200: DragControllerNew controllerName, cx, cy, 2, ti
		
		Set obj = ActivateController (controllerName, "", "")
		
		SizeAndRotateObject controllerName, obj, false, 25, 25, false, 0: wait_custom "fixed7"

		printscreen name: wait_custom 3

		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfile=ARCHIVED_FOLDER & "mapp_written" & GetDateTimeStamp & ".csv": 
		
		DownloadConfigFromAP csvfile, "", "": wait_custom 5
		
		mapvalidation= Sensors(1) & "," & controllercode & "4," 

		FileReadAndValidate csvfile, mapvalidation, true, 4, false: wait_custom 3
	
		UnmapController controllerName,  ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom "10_fixed"
		
		sensor_xx=x1+w1/2: sensor_yy=y1+w1/2
		
		DeleteSensorDragOff Sensors(1), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(1)), sensor_xx, sensor_yy: wait_custom 3
		
		RepeaterSet repeaterName, life, 0
		
		UnmapRepeater repeaterName, rep_base_x, rep_base_y, RepeaterUnmapMessage(repeaterName), false, ""
		
		wait_custom 5: UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
		
		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK
		
		TrafficDotCloseBVD

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_ChangeChannelWriteConfigFileToAP = 1	
		End If	
		TestFinished Err.Description, name
End Function

Function TrafficDotLoginBVD (byval name, byval repeat)
	functionstart "TrafficDotLoginBVD" & " " & mapping_choice
	If mapping_choice="bvd4" or mapping_choice="bvd20" Then
	else	
		skip_start_email=true: TrafficDotLogin name, repeat, false	
	End If
	functionend "TrafficDotLoginBVD"
End Function

Function TrafficDotCloseBVD
	functionstart "TrafficDotCloseBVD" & " " & mapping_choice
	If mapping_choice="bvd4" or mapping_choice="bvd20" Then
	else	
		wait_custom "fixed7": TrafficDotClose false, false	
	End If
	functionend "TrafficDotCloseBVD"
End Function
	
Function DownloadConfigFromAP (byval filepathandname, byval apx, byval apy)
	functionstart "DownloadConfigFromAP"
	If apx<>"" Then
		ActivateObjectOnMap "AP", apx, apy
	else
		ActivateAPInfo
	End If
	wait_custom 7: ActivateGetTopologyConfigFromAP: wait_custom 3
	FileUpload "Download config from Gateway", filepathandname , "Save", true, "Sensys Networks TrafficDOT": wait_custom 1
	functionend "DownloadConfigFromAP"
End Function

Function WriteConfigFileToAP (byval filepathandname, byval invalidcsvcont)
	functionstart "WriteConfigFileToAP" & " " & filepathandname
	ActivateAPInfo: wait_custom 7: ActivateWriteConfigFileToAP: wait_custom 3
	WriteConfigFiletoAPConfirm: wait_custom 3
	FileUpload "Select configuration file", filepathandname , "Open", true, "Sensys Networks TrafficDOT": wait_custom "fixed17"
	If mapping_choice="bvd4" or mapping_choice="bvd20" Then
		ReadingAndParsingConfigFileDialog false, 20, true
	else	
		ReadingAndParsingConfigFileDialog invalidcsvcont, 10, false
	End If
	functionend "WriteConfigFileToAP"
End Function 

Function RefreshMapAndConfigFile (byval filepathandname, byval applyonly)
	functionstart "RefreshMapAndConfigFile"
	ActivateAPInfo: wait_custom 7:
	ActivateStartFreshOnGateway
	wait_custom "fixed15"
	main_form_on=true: 
	If filepathandname="" Then
		Set okb = UIButton("OK")
		okbutton=false
		Do  while not okbutton
			If okb.Exist Then
				okb.Click: wait_custom "fixed10"
				If mapping_choice="bvd4" or mapping_choice="bvd20" Then
				Set obja = UIButton("Apply")
				If obja.Exist Then
					obja.Click
					WriteToLogFile "BVD program, system rebooting...": wait_custom "fixed20": mapping_choice_found=false
				End If
				wait_custom "fixed25"
				functionend "RefreshMapAndConfigFile": exit function 
				End If
				Set obj = UIButton("Reboot")
				If obj.Exist Then
					obj.Click
					WriteToLogFile "After Reboot 0, system rebooting...": wait_custom "fixed20": mapping_choice_found=false
				end if
				Set obja = UIButton("Apply")
				If obja.Exist Then
					obja.Click
					WriteToLogFile "After Apply 0, system rebooting...": wait_custom "fixed20": mapping_choice_found=false
				End If	
				functionend "RefreshMapAndConfigFile": exit function
			else
				okbutton=okb.Exist
			End If
		Loop 
		okb.Click: wait_custom "fixed10"
		if applyonly Then
			click_button "Apply", objectb, true, false
			WriteToLogFile "After Apply, system rebooting...":mapping_choice_found=false
			wait_custom "fixed25": functionend "RefreshMapAndConfigFile": exit function
		end if
		Set obj = UIButton("Reboot")
		If obj.Exist Then
			obj.Click
			WriteToLogFile "After Reboot 1, system rebooting...": wait_custom "fixed20": mapping_choice_found=false
		End If
		'UploadSucceededCsv true, true
	else
		UploadSucceededCsv false, true
	End If
	main_form_on=false
	functionend "RefreshMapAndConfigFile"
End Function 

Function ChangeMappingChannel (byval channel1_x, byval channel1_y, byval channel4_x, byval channel4_y, byval sensorname, byval controllername) 
	functionstart "ChangeMappingChannel" & " " & "1->4"
	GripAndDragObjects channel1_x, channel1_y, _
					channel4_x, channel4_y, _
					ConfigureSensorControllerMessage(sensorname, _
					"Controller Interface 0-0", "4"), sensorname, _
					controllername: wait_custom 3 ' change to channel 4
	functionend "ChangeMappingChannel"
End Function


Function ReadingAndParsingConfigFileDialog (byval invalidcsv, byval idletime, byval bvd)
	functionstart "ReadingAndParsingConfigFileDialog"
	wait_custom "fixed" & idletime: Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Reading and parsing config")
	If obj.Exist Then	
		set okb=UIButton("OK")
		Do  while not okb.Exist
			wait_custom "fixed7"
		loop
		dcontent = 	obj.GetROProperty ("name")	
		dcontent = replace(dcontent, vbLf, "")
		dcontentex =EnvironmentGetMessages ("Messages_0064")
		WriteToLogFile dcontent
		If invalidcsv Then
			If instr(dcontent, dcontentex)>0 Then
				ValidationSucceeded "ReadingAndParsingConfigFileDialog", "": wait_custom 3
			else
				ValidationFailed  "ReadingAndParsingConfigFileDialog", "01": wait_custom 10
			End If
		else
			If bvd Then
				dcontentex =EnvironmentGetMessages ("Messages_0067")' did not work	
				dcontentex = replace(dcontentex, vbLf, "")
				If dcontent="" Then dbcontent="005"
				If instr(lcase(dcontent), "invalid")>0 or instr(lcase(dcontent), "error")>0 Then
					ValidationFailed  "ReadingAndParsingConfigFileDialog", dcontent
				else
					If instr(dcontent, "Auto-configuration file saved")>0 Then
						ValidationSucceeded "ReadingAndParsingConfigFileDialog", dcontent
					else
						ValidationFailed  "ReadingAndParsingConfigFileDialog", dcontent
					End If
				End If
				okb.Click: wait_custom "fixed15": functionend "ReadingAndParsingConfigFileDialog": exit function
			else
				If instr(dcontent, dcontentex)>0 Then
					ValidationFailed  "ReadingAndParsingConfigFileDialog", "02": wait_custom 10
				End If
			End If
		End If
		ValidationSucceeded "ReadingAndParsingConfigFileDialog", "": wait_custom 3
		okb.Click: wait_custom "fixed7"
	else
		ValidationFailed  "ReadingAndParsingConfigFileDialog", "03": wait_custom 10
	End If
	functionend "ReadingAndParsingConfigFileDialog"
End Function
	
Function GetObjectXYWH(byval name, byval obj, byref x, byref y, byref h, byref w)
	functionstart "GetObjectXYWH" & " " & name
	x= obj.GetROProperty("x")
	y= obj.GetROProperty("y")
	h= obj.GetROProperty("height")
	w= obj.GetROProperty("width")
	functionend "GetObjectXYWH" & " " & x & " " & y & " " & h & " " & w
End Function

Function GetObjectABSXYWH(byval name, byval obj, byref x, byref y, byref h, byref w)
	functionstart "GetObjectABSXYWH" & " " & name
	x= obj.GetROProperty("abs_x")
	y= obj.GetROProperty("abs_y")
	h= obj.GetROProperty("height")
	w= obj.GetROProperty("width")
	functionend "GetObjectABSXYWH" & " " & x & " " & y & " " & h & " " & w
End Function

Function Test_EMEA_NoConfigFile(byval name, byval x_d, byval y_d)
	
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if: Test_EMEA_NoConfigFile=0	 
	
	if TrafficDotLogin(name, repeat, false)<0 then exit function
	
	if AvoidGateway(APEG_128) Then
		exit function
	end if
	
	controllername = controller_emea: Sensors=SensorsSetup

	MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
	
	CloseTrafficDot: wait_custom 2
	
	apname = Environment("APname"): emea_messages=false
	configfile="TDConfig_" & apname & ".csv"

	WinSCPDelete configfile, "/etc/apeg": file_deleted=true:  upload_no=false
	
	skip_start_email=true
	
	if TrafficDotLogin(name, repeat, false)<0 then 
		exit function
	ElseIf repeat=1 Then
		Test_EMEA_NoConfigFile name, x_d, y_d: exit function
	end if
	
	clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
	
	WriteToFeatureFile "Configuration File was deleted from Gateway" & " " & configfile, ""
	
	repeater_x1=x_d: repeater_y1=y_d: numrepeaters=1: btw=50: adjust=0
	
	Dim repeater_x(5): Dim repeaters(5): repeaterNameS="000": life=false
	
	For n = 1 To numrepeaters Step 1
		repeaterName=repeaterNameS & n
		DragRepeater repeaterName, repeater_x1+btw*(n-1), repeater_y1, life: wait_custom 1
		If n=1 Then
			repeater_x_0=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
		End If
		repeaters(n-1)=repeaterName: repeater_x(n-1)=repeater_x_0+btw*(n-1)
	Next
	
	rep_base_x=repeater_x(0)+btw+w/2: rep_base_y=repeater_y+w/2
	
	ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
	
	x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d: apx=x_d: apy=y_d+200
	
	DragAP apx, apy, oap, 0: skip_controller=true
	
	GripAndDragObjects repeater_x(0)+w/2, repeater_y+w/2, apx, apy, sMessage, repeaters(0), "AP": wait_custom 3
	
	xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
	
	Sensors=SensorsSetup 'controllername = ControllerSetup(controller_emea, 2): 
	
	numsensors=1: MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
	
	For n=1 To numsensors Step 1	
		if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_EMEA_Backup_Restore name, x_d, y_d
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true
		   		Test_EMEA_Backup_Restore = 1
		   		Exit function
			End If
		end if
		If n=1 Then
			w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		End If
		ChangeSensitivity senst, false, false: wait_custom 1: TramNearByChange "On": wait_custom 1
		ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
		wait_custom 15: ys=ys+adjust
	Next 

	For n = 1 To numsensors Step 1
		sMessage=ConfigureSensorMessage(Sensors(n), repeaters(0))
		GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
						repeater_x(0)+w/2, repeater_y+w/2, sMessage, Sensors(n), repeaters(0) 
	Next
	cx=x_d+250: cy=y_d+200
	If controllerName<>"" Then
		skip_controller=false: ti=0
		wait_custom 10: DragControllerNew controllerName, cx, cy, 2, ti
	End If

	Set obj = ActivateController (controllerName, "", ""): wait_custom 10
	
	SizeAndRotateObject controllerName,  obj, false, 25, 25, false, 0: wait_custom 10

	file_deleted=false: saved_map=true
		
	TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5

	if TD2LaunchAfterEMEAbvdReboot (name) Then
	else
		TrafficDotClose false, false: skip_start_email=true: wait_custom 7
		TrafficDotLogin name, repeat, true: skip_start_email=false
	end if: wait_custom 7 
	
	printscreen name: wait_custom 3

	UnmapController controllerName,  ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10
		
	dim sensor_y(): ReDim preserve sensor_y(numsensors)
	
	For n = 0 To numsensors Step 1
		sensor_y(n)=y1+w1/2+(adjust*n)
	Next
	
	sensor_x=x1+w1/2
	
	For n=1 To numsensors Step 1	
		DeleteSensorDragOff Sensors(n), _
			null, _
			SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
	Next: wait_custom 5
		
	For n = 1 To numrepeaters Step 1
		repeaterName=repeaterNameS & n
		UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "": wait_custom 1
	Next

	UnmapAP apx, apy, false, APDeleteConfirmMessage1() :wait_custom 10: saved_map=false
	
	ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom "fixed7"
	
	TrafficDotCloseBVD

	If(Err.Number<>0) or test_failed  Then
		ValidationFailed name, Err.Description
		Test_EMEA_NoConfigFile = 1	
	End If
	TestFinished Err.Description, name
End Function

Function GlobalSensitivityConfigFileA
	functionstart "GlobalSensitivityConfigFileA"
	Select Case global_sensitivity
		Case "Scoot/Mova"
			GlobalSensitivityConfigFileA="SM"
		Case "Count"
			GlobalSensitivityConfigFileA="C"
		Case "Other"
			GlobalSensitivityConfigFileA="O"
	End Select
	functionend "GlobalSensitivityConfigFileA"
End Function

Function GlobalSensitivityFind()
	functionstart "GlobalSensitivityFind"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("Change EMEA Sensitivity to:")
	Set itms=obj.GetItems: ReDim aRuntime(itms.Count-1)
	snum=0: global_sensitivity="Count"
	For rowCount = 1 To itms.Count
		itmname=(itms.item(rowCount))
		WriteToLogfile itmname	
		If itmname = "Scoot/Mova" Then
			global_sensitivity="Scoot/Mova"
			snum=snum+1
		ElseIf itmname="Count" Then
			snum=snum+1
		End If
		aRuntime(rowCount-1)=itmname	
	Next
	If snum=0 Then
		global_sensitivity = "Other"
	end if
	If snum=2 Then
	 	ValidationFailed "GlobalSensitivityFind", "choices in dropdown are incorrect"
	Else
		ValidationSucceeded "GlobalSensitivityFind", global_sensitivity
	end if
	functionend "GlobalSensitivityFind" & " " & global_sensitivity
End Function

Function MappingChoiceFindByLookingAtSensor(byval sensorName, byref mappingcoice)
	functionstart "MappingChoiceFindByLookingAtSensor"
'	set obj = VerifyList ("Sensor", sensorName, false)
'	obj.Click: wait_custom 5
	ActivateSensorInTheTray sensorName 
	Set objMCC = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping CC")
	Set objMSTS = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping STS")
	Set objMBVD20 = UIAWindow("Sensys Networks TrafficDOT").UIAObject("BVD20 Mapping")
	Set objMBVD4 = UIAWindow("Sensys Networks TrafficDOT").UIAObject("BVD4 Mapping")
	If objMCC.Exist Then
		mapping_choice="cc"
	elseIf objMSTS.Exist Then
		mapping_choice="sts"
	elseIf objMBVD20.Exist Then
		mapping_choice="bvd20"	
	elseIf objMBVD4.Exist Then
		mapping_choice="bvd4"
	else	
		If try_num<2 Then
			try_num=try_num+1
			MappingChoiceFindByLookingAtSensor sensorName, mappingcoice
		else
			ExitTestIncomplete "MappingChoiceFindByLookingAtSensor"
		End If
	End If
	
	if mapping_choice="bvd20" Then
		bvd20_ipaddress="192.70.58.2"
	elseif mapping_choice="bvd4" then
		bvd4_ipaddress="192.70.58.3"
		bvd4_ipaddress_1="192.70.58.4"
		bvd4_ipaddress_2="192.70.58.5"
	else
		bvd20_ipaddress="": bvd4_ipaddress=""
	end if
	
	mappingcoice=mapping_choice
	mapping_choice_found=true
	GlobalSensitivityFind: wait_custom 5

	spp0=channel0: spp1=channel1: channelsSetup spp1, spp0

	WriteToLogFile "spp0:" & spp0
	WriteToLogFile "spp1:" & spp1

	channel_0 = spp0
	channel_1 = spp1

	if sensitivity_c="" then sensitivity_c="SB"
	
	WriteToLogFile "sensitivity:" & sensitivity_c
	ValidationSucceeded "Sensitivity", sensitivity_c
	
	WriteToLogFile "mapping choice:" & mapping_choice
	ValidationSucceeded "Mapping choice", mapping_choice

	UtilitiesAutoConfigSettings ucase(mapping_choice), GlobalSensitivityConfigFileA: wait_custom 5
	functionend "MappingChoiceFindByLookingAtSensor" & " " & mappingcoice
End Function


Function MappingChoiceFind(byval sensorName, byref mappingcoice)
	If mapping_choice_found Then
		Exit function
	End If
	MappingChoiceFindByLookingAtSensor sensorName, mappingcoice
	Exit function
	functionstart "MappingChoiceFind"
	Tools "Preferences...", "", "": wait_custom "fixed_7"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping Choice Mapping")
	If obj.Exist Then
		Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  1 of 4")
		Set obj2 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  2 of 4")
		Set obj3 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  3 of 4")
		Set obj4 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  4 of 4")
		GetOBJECTXYWH "Radio: Mapping Choice 4 of 4", obj4, xo, yo, wo, ho
	else
		functionend "MappingChoiceFind"	
		Exit function
	end if
	If obj3.GetROProperty("isselected") Then
		mapping_choice="bvd4"
	elseif obj4.GetROProperty("isselected") Then
		mapping_choice="bvd20"
	elseif obj1.GetROProperty("isselected") Then
		mapping_choice="cc"
	elseif obj2.GetROProperty("isselected") Then
		mapping_choice="apgi"
	End If
	mappingcoice=mapping_choice
	mouseclick xo+wo/2+213, yo+wo-97, false : wait_custom 3 '?????? possible is a problem 
	mapping_choice_found=true
	functionend "MappingChoiceFind"	& " " & mappingcoice
End Function

Function MappingChoiceFind_14_2(byval sensorName, byref mappingcoice)
	If mapping_choice_found Then
		Exit function
	End If
	MappingChoiceFindByLookingAtSensor sensorName, mappingcoice
	Exit function
	functionstart "MappingChoiceFind"
	Tools "Preferences...", "", "": wait_custom "fixed_7"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping Choice Mapping")
	If obj.Exist Then
		Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  1 of 3")
		Set obj2 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  2 of 3")
		Set obj3 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  3 of 3")
		GetOBJECTXYWH "Radio: Mapping Choice 3 of 3", obj3, xo, yo, wo, ho
	else
		functionend "MappingChoiceFind"	
		Exit function
	end if
	If obj3.GetROProperty("isselected") Then
		mapping_choice="sts"
	elseif obj1.GetROProperty("isselected") Then
		mapping_choice="cc"
	elseif obj2.GetROProperty("isselected") Then
		mapping_choice="apgi"
	End If
	mappingcoice=mapping_choice
	mouseclick xo+wo/2+213, yo+wo-97, false : wait_custom 3
	mapping_choice_found=true
	functionend "MappingChoiceFind"	& " " & mappingcoice
End Function

Function ChangeMappingChoice_14_2 (byval choice, byval commandButton)
	functionstart "ChangeMappingChoice" & " " & choice
	ChangeMappingChoice=0
	finish=false: Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping Choice Controller")
	If obj.Exist Then
		Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  1 of 3")
		Set obj2 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  2 of 3")
		Set obj3 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  3 of 3")
	End If
	Select Case choice
		Case "STS"
			mapping_choice="sts"
			If not obj3.GetROProperty("isselected") Then
				obj3.Click: finish=true
			End If		
		Case "Controller Card"
			mapping_choice="cc"
			If not obj1.GetROProperty("isselected") Then
				obj1.Click: finish=true
			End If	
		Case "APGI"
			mapping_choice="apgi"
			If not obj2.GetROProperty("isselected") Then
				obj2.Click: finish=true
			End If	
	End Select
	If not finish then 
		functionend "ChangeMappingChoice"
		ChangeMappingChoice=-1
		exit function
	End If
	if commandButton<>"" then ActivateButton commandButton
	If commandButton = "Apply" Then
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("A reboot is required to") 
		visible = false
		Do  while not visible
			wait_custom 10: if obj.Exist then
				visible=true: ValidationSucceeded "ChangeMappingChoice", "Reboot popup"
				ActivateButton "Reboot": wait_custom 5
			else
				ValidationFailed "ChangeMappingChoice", "Reboot popup"
			End If
		Loop 
	End If
	functionend "ChangeMappingChoice"
End function


Function ChangeMappingChoice(byval choice, byval commandButton)
	functionstart "ChangeMappingChoice" & " " & choice
	ChangeMappingChoice=0
	finish=false: Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping Choice Controller")
	If obj.Exist Then
		Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  1 of 4")
		Set obj2 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  2 of 4")
		Set obj3 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  3 of 4")
		Set obj4 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  4 of 4")
	End If
	Select Case choice
		Case "BVD4"
			mapping_choice="bvd4"
			If not obj3.GetROProperty("isselected") Then
				obj3.Click: finish=true
			End If	
		Case "BVD20"
			mapping_choice="bvd20"
			If not obj4.GetROProperty("isselected") Then
				obj4.Click: finish=true
			End If
		Case "Controller Card"
			mapping_choice="cc"
			If not obj1.GetROProperty("isselected") Then
				obj1.Click: finish=true
			End If	
		Case "APGI"
			mapping_choice="apgi"
			If not obj2.GetROProperty("isselected") Then
				obj2.Click: finish=true
			End If	
	End Select
	If not finish then 
		functionend "ChangeMappingChoice"
		ChangeMappingChoice=-1
		exit function
	End If
	if commandButton<>"" then ActivateButton commandButton
	If commandButton = "Apply" Then
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("A reboot is required to") 
		visible = false
		Do  while not visible
			wait_custom 10: if obj.Exist then
				visible=true: ValidationSucceeded "ChangeMappingChoice", "Reboot popup"
				ActivateButton "Reboot": wait_custom 5
			else
				ValidationFailed "ChangeMappingChoice", "Reboot popup"
			End If
		Loop 
	End If
	functionend "ChangeMappingChoice"
End function

Function ChangeMappingChoice_Original (byval choice, byval commandButton)
	functionstart "ChangeMappingChoice" & " " & choice
	ChangeMappingChoice=0
	finish=false: Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping Choice Controller")
	If obj.Exist Then
		Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  1 of 3")
		Set obj2 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  2 of 3")
		Set obj3 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  3 of 3")
	End If
	Select Case choice
		Case "STS"
			mapping_choice="sts"
			If not obj3.GetROProperty("isselected") Then
				obj3.Click: finish=true
			End If		
		Case "Controller Card"
			mapping_choice="cc"
			If not obj1.GetROProperty("isselected") Then
				obj1.Click: finish=true
			End If	
		Case "APGI"
			mapping_choice="apgi"
			If not obj2.GetROProperty("isselected") Then
				obj2.Click: finish=true
			End If	
	End Select
	If not finish then 
		functionend "ChangeMappingChoice"
		ChangeMappingChoice=-1
		exit function
	End If
	if commandButton<>"" then ActivateButton commandButton
	If commandButton = "Apply" Then
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("A reboot is required to") 
		visible = false
		Do  while not visible
			wait_custom 10: if obj.Exist then
				visible=true: ValidationSucceeded "ChangeMappingChoice", "Reboot popup"
				ActivateButton "Reboot": wait_custom 5
			else
				ValidationFailed "ChangeMappingChoice", "Reboot popup"
			End If
		Loop 
	End If
	functionend "ChangeMappingChoice"
End function

function EMEAPreferencesWarning ()
	functionstart "EMEAPreferencesWarning"
	EMEAPreferencesWarning=1
	functionend "EMEAPreferencesWarning"
	exit function
	Set obj = UIAWindow("TrafficDOT 2").UIAObject("You are about to change") 
	if obj.Exist then 
		ActivateTD2Button "Yes": wait_custom 5
		EMEAPreferencesWarning=1
	else
		ValidationFailed "EMEAPreferencesWarning", "No Warning pop-up"
		EMEAPreferencesWarning=1
	end if
	functionend "EMEAPreferencesWarning"
End function

function RebootAP ()
	functionstart "RebootAP"
	RebootAP=0
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("A reboot is required to") 
	if obj.Exist then 
		ActivateButton "Reboot": wait_custom 5
		RebootAP=1
	end if
	functionend "RebootAP"
End function

Function MappingChoiceValidations ()
	If not file_deleted Then
		Exit function
	End If
	functionstart "MappingChoiceValidations"
	MappingChoiceValidations = 0
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Mapping Choice Controller")
	If obj.Exist Then
		ValidationSucceeded "MappingChoiceValidations", "Preferences pop-up on"
		Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  1 of 3")
		Set obj2 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  2 of 3")
		Set obj3 = UIAWindow("Sensys Networks TrafficDOT").UIARadioButton("Mapping Choice  3 of 3")
		If obj1.Exist and obj2.Exist and obj3.Exist Then
			xc=obj1.GetROProperty("x")
			yc=obj1.GetROProperty("y")
			ValidationSucceeded "MappingChoiceValidations", "Mapping choices"
			if obj3.GetROProperty("isselected") then
				ValidationSucceeded "MappingChoiceValidations", "Default: STS mapping"
			else
				ValidationFailed "MappingChoiceValidations", "Default: STS mapping" 
			End If 
		else
			ValidationFailed "MappingChoiceValidations", "Mapping choices" 
		End If
		ActivateButton "Apply": wait_custom 5
		if RebootAP > 0 then
			MappingChoiceValidations = 1
		End If 
	else
		ValidationFailed "MappingChoiceValidations", "Preferences pop-up on" 
	End If
	functionend "MappingChoiceValidations"
End function

Function EMEAPreffernces (byval validations, byval mpchoice, byval sensitivity)
	functionstart "EMEAPreffernces" & " " & mpchoice
	EMEAPreffernces = 0
	Set obj = UIAWindow("TrafficDOT 2").UIAObject("Mapping Choice Mapping")
	If obj.Exist Then
		If validations Then
			ValidationSucceeded "EMEAPreffernces", "Preferences pop-up on"
			Set obj1 = UIAWindow("TrafficDOT 2").UIARadioButton("Mapping Choice:  1 of 4")
			Set obj2 = UIAWindow("TrafficDOT 2").UIARadioButton("Mapping Choice:  2 of 4")
			Set obj3 = UIAWindow("TrafficDOT 2").UIARadioButton("Mapping Choice:  3 of 4")
			Set obj4a = UIAWindow("TrafficDOT 2").UIARadioButton("Mapping Choice:  4 of 4")
			
			Set obj4 = UIAWindow("TrafficDOT 2").UIARadioButton("Sensitivity Choice  1")
			Set obj5 = UIAWindow("TrafficDOT 2").UIARadioButton("Sensitivity Choice  2")
			Set obj6 = UIAWindow("TrafficDOT 2").UIARadioButton("Sensitivity Choice  3")
		
			If obj1.Exist and obj2.Exist and obj3.Exist and obj4a.Exist and obj4.Exist and obj5.Exist and obj6.Exist Then
				xc=obj1.GetROProperty("x")
				yc=obj1.GetROProperty("y")
				ValidationSucceeded "EMEAPreffernces: Mapping choices", "CC, APGI, BVD4, BVD20"
				ValidationSucceeded "EMEAPreffernces: Sensitivity", "Count, Scoot/Mova, Other"
				if instr(1, mapping_choice, "bvd")>0 then
					if obj4a.GetROProperty("isselected") then
						ValidationSucceeded "EMEAPreffernces", "Default: BVD20 mapping"
						'temp it is a bug
					else
						ValidationFailed "EMEAPreffernces", "Default: BVD20 mapping" 
					end if
				else
					If mapping_choice="bvd4" Then
						if obj3.GetROProperty("isselected") then
							ValidationSucceeded "EMEAPreffernces", "Default: BVD4 mapping"
						else
							ValidationFailed "EMEAPreffernces", "Default: BVD4 mapping" 
						end if
					ElseIf mapping_choice="bvd20" Then
						if obj4a.GetROProperty("isselected") then
							ValidationSucceeded "EMEAPreffernces", "Default: BVD20 mapping"
						else
							ValidationFailed "EMEAPreffernces", "Default: BVD20 mapping" 
						end if
					ElseIf mapping_choice="cc" Then
						if obj1.GetROProperty("isselected") then
							ValidationSucceeded "EMEAPreffernces", "Default: CC mapping"
						else
							ValidationFailed "EMEAPreffernces", "Default: CC mapping" 
						end if
					Else
						if obj2.GetROProperty("isselected") then
							ValidationSucceeded "EMEAPreffernces", "Default: APGI mapping"
						else
							ValidationFailed "EMEAPreffernces", "Default: APGI mapping" 
						end if
					End If 
				end if
			else
				ValidationFailed "EMEAPreffernces", "Mapping choices" 
				functionend "EMEAPreffernces"
				Exit function
			End If
		End If
		
		If mpchoice<>"" Then
			Select Case mpchoice
				Case "cc"
					MappingChoiceChange obj1, mpchoice
				Case "bvd4"
					MappingChoiceChange obj3, mpchoice
				Case "bvd20"
					MappingChoiceChange obj4a, mpchoice
				Case "apgi"
					MappingChoiceChange obj2, mpchoice
			End Select: mapping_choice=mpchoice
		End If
		
		If sensitivity Then
			If global_sensitivity="Count" Then
				global_sensitivity="Scoot/Mova"
				SensitivityGlobalChange obj5, global_sensitivity
			elseIf global_sensitivity="Scoot/Mova" Then
				global_sensitivity="Count"
				SensitivityGlobalChange obj4, global_sensitivity
			elseif 	global_sensitivity="Other" then
				if force_other_gs then
					global_sensitivity="Other"
					SensitivityGlobalChange obj5, global_sensitivity
					SensitivityGlobalChange obj4, global_sensitivity
					SensitivityGlobalChange obj6, global_sensitivity
					force_other_gs=false
				Else
					global_sensitivity="Scoot/Mova"
					SensitivityGlobalChange obj5, global_sensitivity
				end if
			End If
		End If
		If mapping_choice="bvd20" or mapping_choice="bvd4" Then
			ActivateTD2Button ("Apply"): wait_custom "fixed25": file_deleted=false 
			ActivateTD2Button ("OK"): wait_custom 5
			ActivateOKButton()
		else
			ActivateTD2Button ("Apply"): wait_custom "fixed10": file_deleted=false 
			'auto reboot
		End If
		if EMEAPreferencesWarning > 0 then
			EMEAPreffernces = 1
		End If 
	else
		ValidationFailed "EMEAPreffernces", "Preferences pop-up on" 
	End If
	functionend "EMEAPreffernces"
End function

Function EMEAPreffernces_14_2 (byval validations, byval mpchoice, byval sensitivity)
	functionstart "EMEAPreffernces" & " " & mpchoice
	EMEAPreffernces = 0
	Set obj = UIAWindow("TrafficDOT 2").UIAObject("Mapping Choice Mapping")

	If obj.Exist Then
		If validations Then
			ValidationSucceeded "EMEAPreffernces", "Preferences pop-up on"
			Set obj1 = UIAWindow("TrafficDOT 2").UIARadioButton("Mapping Choice  1 of 3")
			Set obj2 = UIAWindow("TrafficDOT 2").UIARadioButton("Mapping Choice  2 of 3")
			Set obj3 = UIAWindow("TrafficDOT 2").UIARadioButton("Mapping Choice  3 of 3")
			Set obj4 = UIAWindow("TrafficDOT 2").UIARadioButton("Sensitivity Choice  1")
			Set obj5 = UIAWindow("TrafficDOT 2").UIARadioButton("Sensitivity Choice  2")
			Set obj6 = UIAWindow("TrafficDOT 2").UIARadioButton("Sensitivity Choice  3")
		
			If obj1.Exist and obj2.Exist and obj3.Exist and obj4.Exist and obj5.Exist and obj6.Exist Then
				xc=obj1.GetROProperty("x")
				yc=obj1.GetROProperty("y")
				ValidationSucceeded "EMEAPreffernces", "Mapping choices"
				ValidationSucceeded "EMEAPreffernces", "Sensitivity"
				If mapping_choice="sts" Then
					if obj3.GetROProperty("isselected") then
						ValidationSucceeded "EMEAPreffernces", "Default: STS mapping"
					else
						ValidationFailed "EMEAPreffernces", "Default: STS mapping" 
					end if
				ElseIf mapping_choice="cc" Then
					if obj1.GetROProperty("isselected") then
						ValidationSucceeded "EMEAPreffernces", "Default: CC mapping"
					else
						ValidationFailed "EMEAPreffernces", "Default: CC mapping" 
					end if
				Else
					if obj2.GetROProperty("isselected") then
						ValidationSucceeded "EMEAPreffernces", "Default: APGI mapping"
					else
						ValidationFailed "EMEAPreffernces", "Default: APGI mapping" 
					end if
				End If 
			else
				ValidationFailed "EMEAPreffernces", "Mapping choices" 
				functionend "EMEAPreffernces"
				Exit function
			End If
		End If
		
		If mpchoice<>"" Then
			Select Case mpchoice
				Case "cc"
					MappingChoiceChange obj1, mpchoice
				Case "sts"
					MappingChoiceChange obj3, mpchoice
				Case "apgi"
					MappingChoiceChange obj2, mpchoice
			End Select: mapping_choice=mpchoice
		End If
		
		If sensitivity Then
			If global_sensitivity="Count" Then
				global_sensitivity="Scoot/Mova"
				SensitivityGlobalChange obj5, global_sensitivity
			elseIf global_sensitivity="Scoot/Mova" Then
				global_sensitivity="Count"
				SensitivityGlobalChange obj4, global_sensitivity
			elseif 	global_sensitivity="Other" then
				if force_other_gs then
					global_sensitivity="Other"
					SensitivityGlobalChange obj5, global_sensitivity
					SensitivityGlobalChange obj4, global_sensitivity
					SensitivityGlobalChange obj6, global_sensitivity
					force_other_gs=false
				Else
					global_sensitivity="Scoot/Mova"
					SensitivityGlobalChange obj5, global_sensitivity
				end if
			End If
		End If
	
		ActivateTD2Button ("Reboot"): wait_custom "fixed10": file_deleted=false 
		
		if EMEAPreferencesWarning > 0 then
			EMEAPreffernces = 1
		End If 
	else
		ValidationFailed "EMEAPreffernces", "Preferences pop-up on" 
	End If
	functionend "EMEAPreffernces"
End function


function MappingChoiceChange (byval obj, byval name)
	functionstart "MappingChoiceChange" & "->" & ucase(name)
	obj.Click: wait_custom 5
	functionend "MappingChoiceChange"
end function

function SensitivityGlobalChange (byval obj, byval name)
	functionstart "SensitivityGlobalChange" & "->" & ucase(name)
	obj.Click: wait_custom 5
	functionend "SensitivityGlobalChange"
end function

Function NoTopologyDefinedCheck
	Exit function
	If saved_map Then
		Exit function
	End If
	functionstart "NoTopologyDefinedCheck"
	If UIAWindow("Sensys Networks TrafficDOT").UIAObject("No topology defined").Exist then
		ActivateOKbutton: wait_custom 3
	End If
	functionend "NoTopologyDefinedCheck"
End Function

Function TestTitleOnMap(byval name, byval x, byval y, byref xtb, byref ytb, byval indexnum, byval scalex, byval scaley)
		functionstart "TestTitleOnMap"
		DragTextBox x, y: wait_custom 3
		If indexnum=0 Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Edit"): wait_custom 1
		ElseIf indexnum=1 Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Edit_2"): wait_custom 1
		End If
		SizeObjectPix "Text Box", obj, false, scalex, scaley, xtb, ytb, wtb, htb : wait_custom 1
		EditTextBox obj, name : wait_custom 3
		Set TestTitleOnMap = obj
		functionend "TestTitleOnMap"
End Function


Function Test_EMEA_Partial_Save_Config (byval name, byval microradarS, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Partial_Save_Config=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		Dim newsensors(): redim preserve newsensors(numnewsensors-1)
					
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Partial_Save_Config name, microradarS, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
		
		controllername = controller_emea: Sensors=SensorsSetup

		MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
		
		TestTitleOnMap name + " (" + global_sensitivity + ", " + mapping_choice + ")", x_d, y_d+150, xtb, ytb, 0, 90, 0

		x=ShowLogsGetX: y=ShowLogsGetY: xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_Partial_Save_Config name, microradarS, _
			   					numsensors, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_Partial_Save_Config = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, true: wait_custom 1
			ApplyEMEA 0: wait_custom 7: HideLog: wait_custom "fixed15": ys=ys+adjust
		Next 
	
		sensorN="000": 	x_new=xs+adjust: y_new=yy_orig

		if microradarS then 
			sensorN="00B"
			sensetivity="Bike Count"
		End if
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			if microradarS then
				ChangeSensitivity sensetivity, true, false: wait_custom 1: wait_custom "fixed7"
			else
				ChangeSensitivity sensetivity, false, false: wait_custom 1: TramNearByChange "On": wait_custom 1
			end if
			ApplyEMEANewSensor newsensorname: wait_custom 7: HideLog: wait_custom 5
			y_new=y_new+adjust
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 3
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next: wait_custom "fixed15"

		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllername, cx, cy, 2, ti), "", "")
		
		wait_custom 10: SizeAndRotateObject controllername, obj_controller, false, 25, 25, false, 0
		
		wait_custom "fixed15": clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
		
		printscreen name: wait_custom "fixed7": SystemSave "Save_2", true, true
		
		'SECOND PART'
		
		skip_start_email=true: TrafficDotLogin name, repeat, false	
		
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: wait_custom "fixed7"	
		
		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), "Gateway")
			GripAndDragObjects xx1+w1/2+2, yy1+(n-1)*adjust+w1/2+2, _
						apx, apy, sMessage, newsensors(n-1),"Gateway" : wait_custom 3
		Next
		
		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), "GW")
			GripAndDragObjects x1+w1/2+2, y1+(n-1)*adjust+w1/2+2, _
							apx, apy, sMessage, Sensors(n), "Gateway": sensorNameS=Sensors(n)
			sensor_x_s=x1+w1/2: sensor_y_s=y1+(n-1)*adjust+w1/2: wait_custom 3
		Next
		
		printscreen name: wait_custom "fixed7": SystemSave "Save_2", true, true
		
		' THIRD PART'
		
		skip_start_email=true: TrafficDotLogin name, repeat, false	
		
		RefreshMapAndConfigFile "", false: wait_custom "fixed25"

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_Partial_Save_ConfigutoConfig = 1	
		End If	
		
		TestFinished Err.Description, name
		
End Function

Function Test_EMEA_SizeSensors (byval name, byval microradarS, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_SizeSensors=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		Dim newsensors(): redim preserve newsensors(numnewsensors-1)
					
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_SizeSensors name, microradarS, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
		
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: wait_custom "fixed7"	
		
		controllername = controller_emea: Sensors=SensorsSetup

		MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2

		x=ShowLogsGetX: y=ShowLogsGetY: xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_SizeSensors name, microradarS, _
			   					numsensors, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_SizeSensors = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				SensorWidthGet: SensorAbsXGet: SensorAbsYGet
				Set sobj = UIObject("SensorID")
				SizeObjectPix Sensors(n), sobj, false, 15, -15, x1, y1, w1, h1: wait_custom 3
			End If
			ys=ys+adjust
		Next 
		
		UseSameSizeForAll Sensors(1), x1 + w1/2, y1 +w1/2, 3, 3
	
		sensorN="000": 	x_new=xs+adjust*2: y_new=yy_orig+adjust

		if microradarS then sensorN="00B"
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			ApplyEMEANewSensor newsensorname: wait_custom 5: dot_id="": newsensors(n-1)=newsensorname
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 3
			End If
			y_new=y_new+adjust
		Next: wait_custom "fixed15"

		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllername, cx, cy, 2, ti), "", "")
		
		wait_custom "fixed7"
		
		For n = 1 To numsensors Step 1
			GripAndDragObjects x1+w1/2+2, y1+(n-1)*adjust*1.5 +w1/2+2, _
						apx, apy, "", Sensors(n), "Gateway": sensorNameS=Sensors(n)
		Next
		
		For n = 1 To numnewsensors Step 1	
			GripAndDragObjects xx1+w1/2+2, yy1+(n-1)*adjust+w1/2+2, _
						apx, apy, "", newsensors(n-1),"Gateway" : wait_custom 3
		Next

		TrafficDotSaveAndCloseXY false, 25, 10, 3: wait_custom 3: wait_custom 3
		
		skip_start_email=true: TrafficDotLogin name, repeat, false	
		
		printscreen name: wait_custom "fixed7": 
		
		TrafficDotClose false, true: wait_custom "fixed7"
		
		skip_start_email=true: forget_emea=true: TrafficDotLogin name, repeat, false: forget_emea=false
		
		printscreen name: wait_custom "fixed7": 

		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"
		
		app_role_set="EMEA": skip_launch=true
		
		skip_start_email=true: TrafficDotLogin name, repeat, false: skip_launch=false
		
		RefreshMapAndConfigFile "", true: wait_custom "fixed25"
	
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_SizeSensors = 1	
		End If	
		
		TestFinished Err.Description, name
		
End Function


Function Test_EMEA_Sensors_Unconfigure (byval name, byval microradarS, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Sensors_Unconfigure=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		Dim newsensors(): redim preserve newsensors(numnewsensors-1)
					
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Sensors_Unconfigure name, microradarS, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
		
		Sensors=SensorsSetup

		x=ShowLogsGetX: y=ShowLogsGetY: xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_Sensors_Unconfigure name, microradarS, _
			   					numsensors, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_Sensors_Unconfigure = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				Set sobj = UIObject("SensorID")
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ys=ys+adjust
		Next 
	
		sensorN="000": 	x_new=xs+adjust*2: y_new=yy_orig+adjust

		if microradarS then sensorN="00B"
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			ApplyEMEANewSensor newsensorname: wait_custom 5: dot_id="": newsensors(n-1)=newsensorname
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 3
			End If
			y_new=y_new+adjust
		Next: wait_custom "fixed7"
		
		printscreen name: wait_custom 7
		
		dim sensor_y(): ReDim preserve sensor_y(numsensors)
		
		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next: sensor_x=x1+w1/2
		
		For n=1 To numsensors Step 1
			DeleteSensor Sensors(n), _
				null, _
				SensorUnconfigureConfirmMessage(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5

		For n=1 To numnewsensors Step 1	
			DeleteSensor sensorN & n+4, _
				null, _
				SensorUnconfigureConfirmMessage(sensorN & n+4), xx1+w1/2, yy1+w1/2+adjust*(n-1)
		Next: wait_custom 5
		
		printscreen name: wait_custom 7

		TrafficDotSaveAndCloseXY false, 25, 10, 3: wait_custom 3: wait_custom 3
	
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_Sensors_Unconfigure = 1	
		End If	
		
		TestFinished Err.Description, name
		
End Function



Function Test_EMEA_Size_Sensor (byval name, byval microradarS, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Size_Sensor=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		Dim newsensors(): redim preserve newsensors(numnewsensors-1)
					
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Size_Sensor name, microradarS, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
	
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: wait_custom "fixed7"	

		Sensors=SensorsSetup

		x=ShowLogsGetX: y=ShowLogsGetY: xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_SizeSensors name, microradarS, _
			   					numsensors, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_SizeSensors = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				SensorWidthGet: SensorAbsXGet: SensorAbsYGet
				Set sobj = UIObject("SensorID")
				SizeObjectPix Sensors(n), sobj, false, 25, -25, x1, y1, w1, h1: wait_custom 3
			End If
			If n=1 Then
				GripAndDragObjects x1+w1/2, y1+w1/2-2, _
						apx, apy, "", Sensors(n), "GW"
			End If
			GripAndDragObjects xs, ys+10, _
						apx, apy, "", Sensors(n), "GW"
			ys=ys+adjust: wait_custom "fixed7"
		Next 
			
		sensorN="000": 	x_new=xs+adjust*2: y_new=yy_orig+adjust

		if microradarS then sensorN="00B"
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			ApplyEMEANewSensor newsensorname: wait_custom 5: dot_id="": newsensors(n-1)=newsensorname
			If n=1 Then
				Set sobj = UIObject("Sensor null")
				SizeObjectPix newsensorname, sobj, false, 30, -35, xx1, yy1, ww1, hh1: wait_custom 3
			End If
			If n=1 Then
				GripAndDragObjects xx1+ww1/2, yy1+ww1/2-2, _
						apx, apy, "", newsensorname, "GW"
			End If
			GripAndDragObjects x_new, y_new+10, _
						apx, apy, "", newsensorname, "GW"
			y_new=y_new+adjust
		Next: wait_custom "fixed15"
		
		MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2

		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllername, cx, cy, 2, ti), "", "")
		
		wait_custom "fixed7"
		
		TrafficDotSaveAndCloseXY false, 25, 10, 3: wait_custom 3
		
		skip_start_email=true: TrafficDotLogin name, repeat, false	
		
		set obj = UIObject("TrafficDOT has automatically")
		
		If obj.Exist Then
			errorcode=obj.GetROProperty("name")
			ValidationFailed errorcode, "role: " & role_c
			Activatebutton ("OK"): wait_custom 5
			printscreen name: wait_custom 3
			RefreshMapAndConfigFile "", false: wait_custom "fixed25"
			TestFinished Err.Description, name: exit function
		End If
		
		printscreen name: wait_custom "fixed7"
		
		TrafficDotClose false, true: wait_custom "fixed7"
		
		skip_start_email=true: forget_emea=true: TrafficDotLogin name, repeat, false: forget_emea=false
		
		set obj = UIObject("TrafficDOT has automatically")
		
		If obj.Exist Then
			errorcode=obj.GetROProperty("name")
			ValidationFailed errorcode, "role: " & role_c
			Activatebutton ("OK"): wait_custom 5
		End If
			
		printscreen name: wait_custom "fixed7": 

		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"
		
		app_role_set="EMEA": skip_launch=true
		
		skip_start_email=true: TrafficDotLogin name, repeat, false: skip_launch=false
		
		RefreshMapAndConfigFile "", true: wait_custom "fixed25"
	
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_Size_Sensor = 1	
		End If	
		
		TestFinished Err.Description, name
		
End Function

Function AutoConfigCommands (byval cname, byval apply, byval reportit)
		if reportit then 
			functionstart "AutoConfigCommands" & " " & cname
		else
			Writetologfile "Waiting..."
		end if
		Set cobj = UIAWindow("Auto Configure RF/Sensors").UIAButton(cname)
		If cobj.Exist Then
			AutoConfigCommands=true
			If apply Then
				cobj.Click
			End If
		else
			AutoConfigCommands=false
		End If
		if reportit then functionend "AutoConfigCommands"
End Function


Function Test_EMEA_RunAutoconfigBASIC (byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_RunAutoconfigBASIC=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_RunAutoconfigBASIC name: exit function
		end if
		
		if AvoidGateway(APEG_1450) Then
			exit function
		end if
		
		ReadAndUpdateCFGfile "TDConfigABC", filepath, sensorname, repeatername, controllername : wait_custom "fixed7"
		
		WriteConfigFileToAP filepath, false: wait_custom "fixed7"
		
		TD2LaunchAfterEMEAbvdReboot name
		
		DeviceFoundValidation "controller", repeatername,  FindDevicesInTheList (repeatername, false, objD, tryid), true
		
		printscreen name: wait_custom "fixed7"

		Tools "Utilities...", "Auto Configure RF/Sensors", "": wait_custom "fixed7"

		AutoConfigCommands "Start", true, true: wait_custom "fixed7"
		
		notfinished = AutoConfigCommands ("Start", false, false)
		
		Do while notfinished
			wait_custom 5
			notfinished = AutoConfigCommands ("Start", false, false)
		loop
		
		wait_custom "fixed15"
		
		ValidateAutoconfigMessage: AutoConfigCommands "Close", true, true: wait_custom "fixed7"
		
		hide_log=true: hidelog(): wait_custom "fixed7"
				
' 		possible bug need to confirm 		
'		if FindDevicesInTheList (controllername, false, objD, tryid) Then	  
'			ValidationSucceeded "Device found", controllername
'		else
'			ValidationFailed "Device not found", controllername
'		end if
				
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"
	
		skip_start_email=true: forget_emea=true: skip_launch=true: TrafficDotLogin name, repeat, false: forget_emea=false
		
		ChangeSensorRFChanel sensorname, channel_0
		
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"
		
		skip_start_email=true: skip_launch=true: TrafficDotLogin name, repeat, false
		
		DeviceFoundValidation "controller", controllername, FindDevicesInTheList (controllername, false, objD, tryid), true: wait_custom 5
		
		printscreen name: wait_custom "fixed7"
		
		skip_launch=false: RefreshMapAndConfigFile "", false: wait_custom "fixed25"

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_RunAutoconfigBASIC = 1	
		End If	
		
		TestFinished Err.Description, name	
End Function


function ChangeRepeaterRFChanels (byval repeaterName, byval channel1,byval channel2)
		functionstart "ChangeRepeaterRFChanels" & " " & channel1 & "->" & channel2
		ui_sensor_test=true: 
		DragSensor  repeaterName, "","", "Repeater" 
		ConfigTabPress "Config": wait_custom 7
  		ChangeRepeaterChannels repeaterName, cint(channel1)+1, cint(channel2)+1
  		functionend "ChangeRepeaterRFChanels"
end function

function ChangeSensorRFChanel (byval sensorName, byval channel)
		functionstart "ChangeSensorRFChanel" & " " & channel
		ui_sensor_test=true
		DragSensor sensorName, "","", sensorName 
		ConfigTabPress "Cmds": wait_custom 7
  		ChangeRFChannelSen 1, cint(channel) + 1: wait_custom 3
  		functionend "ChangeSensorRFChanel"
end function

function ChangeGatewayRFchannel (byref channel, byval spp)
		functionstart "ChangeGatewayRFchannel" & "<-" & channel
		ActivateButton "Gateway Info": wait_custom 5
		APInfoTabsPress "Gateway Config": wait_custom 7 
		APConfigTabSelect "Radio": wait_custom 3
		ActivateObject UIRadioTab(spp): wait_custom 3
		ChangeRFChannelGW 2, cint(channel): wait_custom 3
		functionend "ChangeGatewayRFchannel" & "->" & channel
end function


function ChangeOrGetGatewayCOLORcode (byval colorcode, byref colore, byval getonly)
		functionstart "ChangeOrGetGatewayCOLORcode"
		ActivateButton "Gateway Info": wait_custom 5
 		APInfoTabsPress "Gateway Config": wait_custom 7 
		APConfigTabSelect "Advanced": wait_custom 3
		If getonly Then
			EditBoxEdit 1, false, "", colore, false, ""
			colorcode=colore
		else
			EditBoxEdit 1, false, ucase(colorcode), colore, true, ""
			Click_button "Apply", obj1, true, false: wait_custom 3
			ActivateButton "Yes": wait_custom "fixed25" 
		End If
		Click_button "Apply", obj1, true, false: wait_custom 3
		ActivateButton "Yes": wait_custom 3 
		functionend "ChangeOrGetGatewayCOLORcode " & colore &"->" & colorcode
end function

function ChangeSensorCOLORcode (byval sensorName, byval colorcode)
		functionstart "ChangeSensorCOLORcode" & " " & channel
		ui_sensor_test=true: DragSensor sensorName, "","", sensorName: ui_sensor_test=false
		SensorTabsPress "Position;Card Addresses;Adv;Cmds;Pairing", "Adv": wait_custom 3
		ValidateTabAndXY "Color Code", x, y: wait_custom 3
		mouseclick x+3, y+3, false: wait_custom "fixed7"
		EditBoxEdit 0, false, colorcode, colore, true, "Color": wait_custom 3
		Click_button "Apply", obj1, true, false: wait_custom "fixed15"
		hide_log=true:HideLog:hide_log=false
  		functionend "ChangeSensorCOLORcode"
end function

Function GetSPP1xyw(byref xsp, byref ysp, byref wsp)
	functionstart "GetSPP1xyw"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("SPP-1_2")
	If obj.Exist Then
		xsp = obj.GetROProperty("abs_x")
		ysp = obj.GetROProperty("abs_y")
		wsp = obj.GetROProperty("width")
	else
		Oops "", tryid
		if tryid<2 then
			GetSPP1xyw xsp, ysp, wsp: resetTryid:exit function
		end if
	End If
	functionend "GetSPP1xyw" & xsp & ysp & wsp
End Function


Function Test_EMEA_RunAutoconfigTwoRadios (byval name, byval microradarS, byval numrepeaters, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_RunAutoconfigTwoRadios=0	 
		
		apname = Environment("APname"): emea_messages=false	
		
		if 	TrafficDotLogin(name, repeat, false) < 0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_RunAutoconfigTwoRadios name, microradarS, numrepeaters, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
		
		if AvoidGateway(APEG_1450) Then
			exit function
		end if
		
		controllername = controller_emea: MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
		
		repeater_x1=x_d: repeater_y1=y_d: numberofrepeaters=2: btw=50
		
		Dim repeater_x(5): Dim repeaters(5): Dim newsensors(5): 
				
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			DragRepeater repeaterName, repeater_x1+btw*(n-1), repeater_y1, life: wait_custom 1
			If n=1 Then
				repeater_x_0=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
			End If
			repeaters(n-1)=repeaterName: repeater_x(n-1)=repeater_x_0+btw*(n-1)
		Next
		
		rep_base_x=repeater_x(0)+btw+w/2: rep_base_y=repeater_y+w/2
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d
		
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GetSPP1xyw apx_1, apy_1, apw_1
		
		dim apxc(1): dim apyc(1): apxc(0)=apx: apxc(1)=apx_1 + apw_1/2: apyc(0)=apy: apyc(1)=apy_1
		
		For n = 1 To numrepeaters Step 1
			GripAndDragObjects repeater_x(n-1)+w/2, repeater_y+w/2, apxc(n-1), apyc(n-1), "", repeaters(n-1), "SSP-" & cstr(n-1): wait_custom 3
		Next
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y 
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
	
		Sensors=SensorsSetup: mode="On"

		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_RunAutoconfigTwoRadios name, microradarS, numrepeaters, numsensors, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_RunAutoconfigTwoRadios = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, true: wait_custom 1: TramNearByChange mode: wait_custom 1
			ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
			wait_custom 15: ys=ys+adjust
		Next 
	
		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaters(0))
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
							repeater_x(n-1)+w/2, repeater_y+w/2, "", Sensors(n), repeaters(n-1): wait_custom 7
			sensorNameS=Sensors(n)
			sensor_x_s=x1+w1/2: sensor_y_s=y1+(n-1)*adjust+w1/2
			wait_custom 3
			If n=1 Then
				Do  while SensitivityCheck(sensor_x_s, sensor_y_s, sensorNameS, "Current sensitivity: " & senst, itry) = 0 
					If s>5 Then
						ChangeSensitivity senst, false, true: wait_custom 1
						ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
					elseif s>10 Then	
						ValidationFailed "SensitivityCheck", senst
						Exit do
					End If
					ActivateObjectOnMap "AP", apx, apy: wait_custom 5: s=s+1: wait_custom "fixed10": itry=s
				loop
			end if
		Next
	
		sensorN="000"
		
		if microradarS then 
				sensorN="00B"
				sensetivity="Bike Count"
		End if
		
		x_new=xs+adjust: y_new=yy_orig: wait_custom 10
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			if microradarS then
				ChangeSensitivity sensetivity, true, false: wait_custom "fixed7"
			else
				ChangeSensitivity sensetivity, false, false: wait_custom "fixed7"
			end if
			ApplyEMEANewSensor newsensorname: wait_custom 7
			HideLog: wait_custom 5
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 2
			y_new=y_new+adjust
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 3
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next: wait_custom "fixed10"	

		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), repeaters(1))
			GripAndDragObjects xx1+w1/2, yy1+(n-1)*adjust+w1/2, _
						repeater_x(1)+w/2, repeater_y+w/2, sMessage, newsensors(n-1),repeaters(1) : wait_custom 3
		Next: wait_custom "fixed10"
		
		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllername, cx, cy, 2, ti), "", "")
		
		wait_custom 10: SizeAndRotateObject controllername, obj_controller, false, 25, 25, false, 0
		
		wait_custom "fixed15": clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()	

		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfilename=ARCHIVED_FOLDER & "autoconfig" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, apx, apy: wait_custom 10
		
		Tools "Utilities...", "Auto Configure RF/Sensors", "": wait_custom "fixed7"

		AutoConfigCommands "Start", true, true: wait_custom "fixed7"
		
		notfinished = AutoConfigCommands ("Start", false, false)
		
		Do while notfinished
			wait_custom 5
			notfinished = AutoConfigCommands ("Start", false, false)
		loop
		
		wait_custom "fixed15"
		
		ValidateAutoconfigMessage: AutoConfigCommands "Close", true, true: wait_custom "fixed7"
		
		hide_log=true: hidelog(): wait_custom "fixed7"
		
		printscreen name: wait_custom "fixed7"
		
		UnmapController controllerName, ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10
		
		dim sensor_y(): ReDim preserve sensor_y(numsensors)
		
		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next: sensor_x=x1+w1/2
		
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5
		
		For n=1 To numnewsensors Step 1	
			DeleteSensorDragOff sensorN & n+4, _
				null, _
				SensorDeleteConfirmMessage3(sensorN & n+4), xx1+w1/2, yy1+w1/2+adjust*(n-1)
		Next: wait_custom 5
		
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "": wait_custom 3
		next: wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5				
	
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"

		skip_start_email=true: forget_emea=true: skip_launch=true: TrafficDotLogin name, repeat, false: forget_emea=false: skip_launch=false
	
		For n = 1 To numsensors Step 1
			ChangeSensorRFChanel Sensors(n), cint(channel_0): wait_custom "fixed7"
		Next

		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			ChangeRepeaterRFChanels repeaterName, cint(channel_0), cint(channel_0)-1: wait_custom "fixed7"
		next
		
		Dim channels(1): channels(0)=channel_0: channels(1)=channel_1
		For n = 0 To 1 Step 1
			ChangeGatewayRFChannel cint(channels(n)), "SPP-" & cstr(n): wait_custom "fixed7"
		Next
		
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"

		skip_start_email=true: skip_launch=true: TrafficDotLogin name, repeat, false: skip_launch=false
		
		channelsSetup spp1, spp0: wait_custom 5
		
		If lcase(channel_0)=lcase(spp0) and lcase(channel_1) = lcase(spp1) Then
			ValidationSucceeded "Channels setup", "01cs"
		else
			ValidationFailed "Channels setup", "01cs"
		End If
		
		printscreen name: wait_custom "fixed7"

		TrafficDotClose false, true: skip_start_email=false
	
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_RunAutoconfigTwoRadios = 1	
		End If	
		
		TestFinished Err.Description, name
		
End function



Function Test_EMEA_RunAutoconfig (byval name, byval microradarS, byval numrepeaters, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_RunAutoconfig=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_RunAutoconfig name, microradarS, numrepeaters, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
		
		if AvoidGateway(APEG_1450) Then
			exit function
		end if
		
		controllername = controller_emea: MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
		
		repeater_x1=x_d: repeater_y1=y_d: numberofrepeaters=2: btw=50
		
		Dim repeater_x(5): Dim repeaters(5): Dim newsensors(5): 
				
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			DragRepeater repeaterName, repeater_x1+btw*(n-1), repeater_y1, life: wait_custom 1
			If n=1 Then
				repeater_x_0=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
			End If
			repeaters(n-1)=repeaterName: repeater_x(n-1)=repeater_x_0+btw*(n-1)
		Next
		
		rep_base_x=repeater_x(0)+btw+w/2: rep_base_y=repeater_y+w/2
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d
		
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x(0)+w/2, repeater_y+w/2, apx, apy, "", repeaters(0), "AP": wait_custom 3
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y 
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
	
		Sensors=SensorsSetup: mode="On"

		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_AutoConfig name, microradarS, numrepeaters, numsensors, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_AutoConfig = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, true: wait_custom 1: TramNearByChange mode: wait_custom 1
			ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
			wait_custom 15: ys=ys+adjust
		Next 
	
		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaters(0))
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
							repeater_x(0)+w/2, repeater_y+w/2, "", Sensors(n), repeaters(0): wait_custom 7
			sensorNameS=Sensors(n)
			sensor_x_s=x1+w1/2: sensor_y_s=y1+(n-1)*adjust+w1/2
			wait_custom 3
			Do  while SensitivityCheck(sensor_x_s, sensor_y_s, sensorNameS, "Current sensitivity: " & senst, itry) = 0 
				If s>5 Then
					ChangeSensitivity senst, false, true: wait_custom 1
					ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
				elseif s>10 Then	
					ValidationFailed "SensitivityCheck", senst
					Exit do
				End If
				ActivateObjectOnMap "AP", apx, apy: wait_custom 5: s=s+1: wait_custom "fixed10": itry=s
			loop
		Next
	
		sensorN="000"
		
		if microradarS then 
				sensorN="00B"
				sensetivity="Bike Count"
		End if
		
		x_new=xs+adjust: y_new=yy_orig: wait_custom 10
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			if microradarS then
				ChangeSensitivity sensetivity, true, false: wait_custom "fixed7"
			else
				ChangeSensitivity sensetivity, false, false: wait_custom "fixed7"
			end if
			ApplyEMEANewSensor newsensorname: wait_custom 7
			HideLog: wait_custom 5
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 2
			y_new=y_new+adjust
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 3
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next: wait_custom "fixed10"	

		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), repeaters(1))
			GripAndDragObjects xx1+w1/2, yy1+(n-1)*adjust+w1/2, _
						repeater_x(1)+w/2, repeater_y+w/2, sMessage, newsensors(n-1),repeaters(1) : wait_custom 3
		Next: wait_custom "fixed10"
		
		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllername, cx, cy, 2, ti), "", "")
		
		wait_custom 10: SizeAndRotateObject controllername, obj_controller, false, 25, 25, false, 0: wait_custom "fixed15"

		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()	

		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name

		csvfilename=ARCHIVED_FOLDER & "autoconfig" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, apx, apy: wait_custom 10
		
		Tools "Utilities...", "Auto Configure RF/Sensors", "": wait_custom "fixed7"

		AutoConfigCommands "Start", true, true: wait_custom "fixed7"
		
		notfinished = AutoConfigCommands ("Start", false, false)
		
		Do while notfinished
			wait_custom 5
			notfinished = AutoConfigCommands ("Start", false, false)
		loop
		
		wait_custom "fixed15"
		
		ValidateAutoconfigMessage: AutoConfigCommands "Close", true, true: wait_custom "fixed7"
		
		hide_log=true: hidelog(): wait_custom "fixed7"
		
		printscreen name: wait_custom "fixed7"
		
		UnmapController controllerName, ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10
		
		dim sensor_y(): ReDim preserve sensor_y(numsensors)
		
		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next: sensor_x=x1+w1/2
		
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5
		
		For n=1 To numnewsensors Step 1	
			DeleteSensorDragOff sensorN & n+4, _
				null, _
				SensorDeleteConfirmMessage3(sensorN & n+4), xx1+w1/2, yy1+w1/2+adjust*(n-1)
		Next: wait_custom 5
		
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "": wait_custom 3
		next: wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
		
		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5				
	
		TD2LaunchAfterEMEAbvdReboot name
		
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"

		skip_start_email=true: forget_emea=true: skip_launch=true: TrafficDotLogin name, repeat, false: forget_emea=false: skip_launch=false
	
		ChangeSensorRFChanel Sensors(1), cint(channel_0): wait_custom "fixed7"
		
		ChangeRepeaterRFChanels repeaterName, cint(channel_0), cint(channel_0)-1: wait_custom "fixed7"
		
		ChangeGatewayRFChannel cint(channel_0), "SPP-0": wait_custom "fixed7"
		 		
		skip_start_email=true: skip_launch=true: TrafficDotLogin name, repeat, false: skip_launch=false
		
		channelsSetup spp1, spp0
		
		If lcase(channel_0)=lcase(spp0) and lcase(channel_1) = lcase(spp1) Then
			ValidationSucceeded "Channels setup", "01cs"
		else
			ValidationFailed "Channels setup", "01cs"
		End If

		TrafficDotClose false, true: skip_start_email=false

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_RunAutoconfig = 1	
		End If	
		
		TestFinished Err.Description, name
		
End function

Function Test_EMEA_IncompleteTopology (byval name, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_IncompleteTopology=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_IncompleteTopology name, x_d, y_d, adjust: exit function
		end if
		
		cname1 = controller_emea: MappingCONTROLLERSetUp controllercode, controllercode1, cname1, cname2

		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d
		
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true

		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
	
		Sensors=SensorsSetup: mode="On": n=1

		if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_EMEA_IncompleteTopology name, x_d, y_d, adjust
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true
		   		Test_EMEA_IncompleteTopology = 1
		   		Exit function
			End If
		end if
		
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		
		cx1=x_d+250: cy1=y_d+200: ti=0
		
		DragControllerNew cname1, cx1, cy1, 2, ti: wait_custom 10
		
		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()	
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5	
		
		printscreen name: wait_custom "fixed7"
		
		csvfilename=ARCHIVED_FOLDER & "autoconfig" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, apx, apy: wait_custom "fixed7"
	
		WriteConfigFileToAP csvfilename, true: wait_custom "fixed7"
		
		TD2LaunchAfterEMEAbvdReboot name

		GripAndDragObjects x1+w1/2, y1+w1/3, _
							apx, apy, "", Sensors(n), "GW": wait_custom "fixed7"

		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()	

		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfilename=ARCHIVED_FOLDER & "autoconfig" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, apx, apy: wait_custom "fixed7"
	
		WriteConfigFileToAP csvfilename, false: wait_custom "fixed7"
		
		TD2LaunchAfterEMEAbvdReboot name
		
		printscreen name: wait_custom "fixed7"
		
		RefreshMapAndConfigFile "", false: wait_custom "fixed25"

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_IncompleteTopology = 1	
		End If	
		
		TestFinished Err.Description, name
		
end function


Function Test_System_Color (byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_System_Color=0	 
				
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_System_Color name: exit function
		end if
		
		if AvoidGateway(APEG_1450) Then
			exit function
		end if
		
		discoverModeOnOff "off": wait_custom 3
		
		newcolorcode="AB"
		originalcolorcode = "CD"
		
		Sensors=SensorsSetup
		
		for n=1 to ubound(Sensors)-1
			DeviceFoundValidation "sensor", Sensors(n), FindDevicesInTheList (Sensors(n), false, objD, tryid), true: wait_custom 5
		next
		
		printscreen name: wait_custom 3
		
		ChangeSensorCOLORcode Sensors(1), newcolorcode: wait_custom "fixed15"
		
		TD2CloseX(): wait_custom 3
		
		skip_start_email=true: TrafficDotLogin name, repeat, false: wait_custom 3
		
		DeviceFoundValidation "sensor", Sensors(1), FindDevicesInTheList (Sensors(1), false, objD, tryid), false: wait_custom "fixed7"
		
		ChangeOrGetGatewayCOLORcode newcolorcode, colore, false: wait_custom 3
		
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"
		
		skip_start_email=true: skip_launch=true: TrafficDotLogin name, repeat, false: wait_custom 3
		
		if colore="" Then colore=originalcolorcode

		ChangeSensorCOLORcode Sensors(1), colore: wait_custom "fixed15"
		
		TD2CloseX(): wait_custom 3
		
		skip_start_email=true: TrafficDotLogin name, repeat, false: wait_custom 3
		
		for n=1 to ubound(Sensors)-1
			DeviceFoundValidation "sensor", Sensors(n), FindDevicesInTheList (Sensors(n), false, objD, tryid), false: wait_custom 5
		next
		
		printscreen name: wait_custom 7
		
		ChangeOrGetGatewayCOLORcode colore, colore, false: wait_custom "fixed25"
		
		ActivateTopMenueBar "Connect", "Connect", "": wait_custom "fixed15"
		
		skip_start_email=true: skip_launch=true: TrafficDotLogin name, repeat, false: wait_custom 3
		
		for n=1 to ubound(Sensors)-1
			DeviceFoundValidation "sensor", Sensors(n), FindDevicesInTheList (Sensors(n), false, objD, tryid), true: wait_custom 5
		next
		
		GatewayReboot: skip_start_email=false
		
		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_System_Color = 1	
		End If	
		
		TestFinished Err.Description, name
		
End Function


Function ValidateAutoconfigMessage()
		functionstart "ValidateAutoconfigMessage"
		smessage=UIAWindow("Auto Configure RF/Sensors").UIAObject("AutoconfigMessage").GetROProperty("name")
		If instr(1, lcase(smessage), "err")>0 or _
		 instr(1, lcase(smessage), "fail")>0 or _
		 instr(1, lcase(smessage), "unable")>0 Then
			ValidationFailed "Autoconfig", smessage
		else
			ValidationSucceeded "Autoconfig", smessage
		End If
		functionend "ValidateAutoconfigMessage"
End Function


Function Test_EMEA_AutoConfig (byval name, byval microradarS, byval numrepeaters, byval numsensors, byval numnewsensors, byval x_d, byval y_d, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_AutoConfig=0	 
		
		apname = Environment("APname"): emea_messages=false
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_AutoConfig name, microradarS, numrepeaters, numsensors, numnewsensors, x_d, y_d, adjust: exit function
		end if
		
		If (numsensors + numnewsensors)>4 Then
			numsensors=1: numnewsensord=3
		End If
		
		controllername = controller_emea: MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
		
		ValidateButtons "EMEA", "Map:", true, false, "Messages_0048": wait_custom 5
		ValidateButtons "EMEA", "Gateway:", true, false, "Messages_0047"
		
		TestTitleOnMap name + " (" + global_sensitivity + ", " + mapping_choice + ")", x_d, y_d+150, xtb, ytb, 0, 90, 0
		
		DragCompass x_d-50,y_d-10: wait_custom 3
		
		repeater_x1=x_d: repeater_y1=y_d: numberofrepeaters=2: btw=50
		
		Dim repeater_x(5): Dim repeaters(5): Dim newsensors(5): 
				
		For n = 1 To numrepeaters Step 1
			RepeaterSet repeaterName, life, n-1
			DragRepeater repeaterName, repeater_x1+btw*(n-1), repeater_y1, life: wait_custom 1
			If n=1 Then
				repeater_x_0=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
			End If
			repeaters(n-1)=repeaterName: repeater_x(n-1)=repeater_x_0+btw*(n-1)
		Next
		
		sMessage=ConfigureRepeaterMessage(repeaters(0), repeaters(1))
		
		rep_base_x=repeater_x(0)+btw+w/2: rep_base_y=repeater_y+w/2
		
		If numrepeaters>1 Then
			GripAndDragObjects rep_base_x, rep_base_y, repeater_x(0)+w/2, repeater_y+w/2, sMessage, repeaters(1), repeaters(0)
		End If

		ActivateObjectOnMap "Repeater",  rep_base_x, rep_base_y: x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d
		
		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x(0)+w/2, repeater_y+w/2, apx, apy, sMessage, repeaters(0), "AP": wait_custom 3
		
		ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y 
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
	
		Sensors=SensorsSetup: mode="On"
		
		For n=1 To numsensors Step 1	
			if DragSensor (Sensors(n), xs,ys,Sensors(n) )<0 then
				If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
					number_of_tries=number_of_tries+1
					KillTrafficDOT2
			   		Test_EMEA_AutoConfig name, microradarS, numrepeaters, numsensors, numnewsensors, x_d, y_d, adjust
			   		Exit function
			   	else
			   		KillTrafficDOT2
			   		SystemSave "Don't Save", false, true
			   		Test_EMEA_AutoConfig = 1
			   		Exit function
				End If
			end if
			If n=1 Then
				w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
			End If
			ChangeSensitivity senst, false, true: wait_custom 1: TramNearByChange mode: wait_custom 1
			ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y
			wait_custom 15: ys=ys+adjust
		Next 
		
		If mapping_choice="bvd4" or mapping_choice="bvd20" Then
			newbvdip="123.56.3.6": click_button "Gateway Info", objgwi, true, false: wait_custom  5
			set objbvdip= EditBOX ("BVD IP Address BVD IP Address", false, vlu, "bvd ip address", false)
			Select Case mapping_choice
				Case "bvd4"
					ipbvd=bvd4_ipaddress
					bvd4option=true
				Case "bvd20"
					ipbvd=bvd20_ipaddress
			End Select
			If vlu=ipbvd Then
				Validationsucceeded "Gateway>BVD IP Address", vlu
				objbvdip.Click: wait_custom 3: bvd20_ipaddress=newbvdip
				If bvd4option Then
					bvd4_ipaddress=newbvdip
				End If
				ClearTextBoxAll: wait_custom 2: SendKeysShell newbvdip, 2: wait_custom 5
				click_button "Revert", objsv, false, false: wait_custom  5
				xb1=objsv.getroproperty("abs_x"): yb1=objsv.getroproperty("abs_y")
				mouseclick xb1+110, yb1+5, false: wait_custom 5
				Validationsucceeded "Gateway>BVD IP Address changed", newbvdip
				MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
			else
				Validationfailed "Gateway>BVD IP Address", vlu & "<>" & ipbvd
			End If
		End If
	
		For n = 1 To numsensors Step 1
			sMessage=ConfigureSensorMessage(Sensors(n), repeaters(0))
			GripAndDragObjects x1+w1/2, y1+(n-1)*adjust+w1/2, _
							repeater_x(0)+w/2, repeater_y+w/2, sMessage, Sensors(n), repeaters(0): wait_custom 7
			sensorNameS=Sensors(n)
			sensor_x_s=x1+w1/2: sensor_y_s=y1+(n-1)*adjust+w1/2
			wait_custom 3
			Do  while SensitivityCheck(sensor_x_s, sensor_y_s, sensorNameS, "Current sensitivity: " & senst, itry) = 0 
				If s>5 Then
					ChangeSensitivity senst, false, true: wait_custom 1
					ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 1
				elseif s>10 Then	
					ValidationFailed "SensitivityCheck", senst
					Exit do
				End If
				ActivateObjectOnMap "AP", apx, apy: wait_custom 5: s=s+1: wait_custom "fixed10": itry=s
			loop
	
		Next
	
		sensorN="000"
		
		if microradarS then 
				sensorN="00B"
				sensetivity="Bike Count"
		End if
		
		x_new=xs+adjust: y_new=yy_orig: wait_custom 10
		
		For n = 1 To numnewsensors Step 1
			newsensorname=sensorN & n+4 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			if microradarS then
				ChangeSensitivity sensetivity, true, false: wait_custom "fixed7"
			else
				ChangeSensitivity sensetivity, false, false: wait_custom "fixed7"
			end if
			ApplyEMEANewSensor newsensorname: wait_custom 7
			HideLog: wait_custom 5
			ActivateObjectOnMap "Repeater", rep_base_x, rep_base_y: wait_custom 2
			y_new=y_new+adjust
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 3
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next: wait_custom "fixed10"	

		repnum=0: If numrepeaters>1 Then repnum=1

		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), repeaters(1))
			GripAndDragObjects xx1+w1/2, yy1+(n-1)*adjust+w1/2, _
						repeater_x(repnum)+w/2, repeater_y+w/2, sMessage, newsensors(n-1),repeaters(repnum) : wait_custom 3
		Next: wait_custom "fixed10"
		
		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllername, cx, cy, 2, ti), "", ""): 
		
		wait_custom 10: SizeAndRotateObject controllername, obj_controller, false, 25, 25, false, 0
		
		wait_custom "fixed15": clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
			
		MapLayersRadioConnectionsAPSwitch true: wait_custom 3
		
		printscreen name: wait_custom "fixed7"

		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		rplus=1: dim APRS(): Redim preserve APRS(0): APRS(0)=APRadio_0
		
		if APRadio_1<>"" Then
			rplus= rplus+1: Redim preserve APRS(1): APRS(1)=APRadio_1
		end if
		
		Dim validations(): ReDim preserve validations(4+numnewsensors*2+rplus): code=SensitivityCode(senst)
		
		If numrepeaters>1 Then
			validations(0) = repeaters(1) & ", " & repeaters(0) & ", true"
		else
			validations(0) = ""
		End If
		
		validations(1)= Sensors(1) & ", " & repeaters(0) & ", false"
		validations(2)= newsensors(0) & ", " & repeaters(repnum) & ", false, 0"
		validations(3)= newsensors(1) & ", " & repeaters(repnum) & ", false, 0"
		validations(4)= newsensors(2) & ", " & repeaters(repnum) & ", false, 0"
		
		validations(5)= Sensors(1) & "," & controllercode & "1," & code
		
		For n = 1 To numnewsensors Step 1
		 	validations(n+5) = newsensors(n-1) & "," & controllercode & cstr(n+1)
		Next
		
		validations(5+numnewsensors+1)=repeaters(0) & ", " & APRadio_0 & ", true"
		
		For n = 1 To rplus Step 1
			validations(6+numnewsensors+n)=APRS(n-1) & ", "
		next 
		
		csvfilename=ARCHIVED_FOLDER & "mappings" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, apx, apy: wait_custom 10
		
		For n = 0 To ubound(validations) Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, false: wait_custom 1
		Next: wait_custom 10
	
		MapLayersRadioConnectionsAPSwitch false: wait_custom 3
	
		MapLayersControllerCardConnectionsAPSwitch false: wait_custom 3

		printscreen name: wait_custom "fixed7"
		
		UnmapController controllerName, ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10
		
		dim sensor_y(): ReDim preserve sensor_y(numsensors)
		
		For n = 0 To numsensors Step 1
			sensor_y(n)=y1+w1/2+(adjust*n)
		Next: sensor_x=x1+w1/2
		
		For n=1 To numsensors Step 1	
			DeleteSensorDragOff Sensors(n), _
				null, _
				SensorDeleteConfirmMessage3(Sensors(n)), sensor_x, sensor_y(n-1)
		Next: wait_custom 5

		For n=1 To numnewsensors Step 1	
			DeleteSensorDragOff sensorN & n+4, _
				null, _
				SensorDeleteConfirmMessage3(sensorN & n+4), xx1+w1/2, yy1+w1/2+adjust*(n-1)
		Next: wait_custom 5
		
		If numrepeaters>1 Then
		
			For n = 1 To numrepeaters Step 1
				RepeaterSet repeaterName, life, n-1
				UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), true, "Unconfigure": wait_custom 3
				if n=1 then exit for
			next: wait_custom 5
			
			For n = numrepeaters To 1 Step -1
				RepeaterSet repeaterName, life, n-1
				UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "Unconfigure": wait_custom 1
			next: wait_custom 5
		
		else
			For n = 1 To numrepeaters Step 1
				RepeaterSet repeaterName, life, n-1
				UnmapRepeater repeaterName, repeater_x(0)+btw*(n-1)+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "Unconfigure": wait_custom 3
				if n=1 then exit for
			next: wait_custom 5
		end if
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 10
	
		For n = 1 To numnewsensors Step 1
			VerifyList "Sensor", sensorN & n+4, false
		Next
		
		For n=1 To numsensors Step 1
			VerifyList "Sensor",Sensors(n), false
		Next
		
		For n = 1 To numrepeaters 	
			RepeaterSet repeaterName, life, n-1
			VerifyList "Repeater", repeaterName, false
		Next
		
		VerifyList "Controller", controllerName, skip_controller: wait_custom 3
		
		UnmapCompass CompassRemoveMessage(), x_compass+5, y_compass+5: wait_custom 3
		
		UnmapTextBOX TextBoxDeleteConfirmMessage, xtb+5, ytb+5: wait_custom 3

		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		csvfilename=ARCHIVED_FOLDER & "mappings_cleared" & GetDateTimeStamp & ".csv"
		
		DownloadConfigFromAP csvfilename, "", "": wait_custom 10
		
		if APRadio_1="" Then
			rplus=1
			ReDim preserve validations(4+numnewsensors*2+rplus): code=SensitivityCode(senst)
		else
			ReDim preserve validations(4+numnewsensors*2): code=SensitivityCode(senst)
		end if
		
		If numrepeaters>1 Then
			validations(0) = repeaters(1) & ", " & repeaters(0) & ", true"
		else
			validations(0) = ""
		End If
		
		validations(0) = repeaters(1) & ", " & repeaters(0) & ", true"
		validations(1)= Sensors(1) & ", " & repeaters(0) & ", false"
		validations(2)= newsensors(0) & ", " & repeaters(1) & ", false, 0"
		validations(3)= newsensors(1) & ", " & repeaters(1) & ", false, 0"
		validations(4)= newsensors(2) & ", " & repeaters(1) & ", false, 0"
		
		validations(5)= Sensors(1) & "," & controllercode & "1," & code
		
		For n = 1 To numnewsensors Step 1
		 	validations(n+5) = newsensors(n-1) & "," & controllercode & cstr(n+1)
		Next
		
		validations(5+numnewsensors+1)=repeaters(0) & ", " & APRadio_0 & ", true"
	
		'new new new new'
		if APRadio_1="" Then
			validations(6+numnewsensors+1)="SPP1" & ", " ' validate that SPP1 not in the file'
		end if
		
		For n = 0 To ubound(validations)-1 Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, true: wait_custom 1
		Next
		
		wait_custom "fixed7": TrafficDotClose false, false 

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_AutoConfig = 1	
		End If	
		TestFinished Err.Description, name
End Function

function RepeaterSet(byref name, byref life, byval num)
		functionstart "RepeaterSet"
		if name="" or reset_name then name="000"
		RepeatersL = RepeatersSetup
		If RepeatersL(0)="" Then
				life=false
				name=name & num+1
				reset_name=true
		else
				name=RepeatersL(num)
				life=true
		End If
		functionend "RepeaterSet" & " " & name
end function

Function Test_EMEA_ClearMap_Generate_TemplateCfg(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_ClearMapGenerate_TemplateCfg=0	 
		
		apname = Environment("APname"): emea_messages=false
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_ClearMap_Generate_TemplateCfg name, numsensors, x_d, y_d: exit function
		end if
		
		controllername = controller_emea: MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
		
		sensorName = SetSensorName (number_of_tries, MicroradarsSetup, "MicroRadar")
		
		TestTitleOnMap name, x_d, y_d+150, xtb, ytb, 0, 90, 0
		
		RepeaterSet repeaterName, life, 0
		DragRepeater repeaterName, x_d, y_d, life: wait_custom 1
		
		repeater_x=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d

		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x+w/2, repeater_y+w/2, apx, apy, sMessage, repeaterName, "AP": wait_custom 3
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		if DragSensor (sensorName, xs,ys,sensorName )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_EMEA_ClearMap_Generate_TemplateCfg name, x_d, y_d
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true
		   		Test_EMEA_ClearMap_Generate_TemplateCfg = 1
		   		Exit function
			End If
		end if
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet: senst="Bike Count"
		
		sMessage=ConfigureSensorMessage(sensorName, repeaterName)
		
		GripAndDragObjects x1+w1/2, y1+w1/2, _
							repeater_x+w/2, repeater_y+w/2, sMessage, sensorName, repeaterName : wait_custom 3
		
		sensor_y=y1+w1/3: sensor_x=x1+w1/3
				
		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllerName, cx, cy, 2, ti), "", "")
		
		
		wait_custom 5: TrafficDotSave  SavingToAPMessage0_1() , SavingToAPMessage1(), "OK", false, true, false: wait_custom 5	

		TD2LaunchAfterEMEAbvdReboot name
	
		dim validations(3)
		
		validations(0)= sensorName & ", " & repeaterName & ", false, "
		validations(1)= sensorName & "," & controllercode & "1," 
		validations(2)=repeaterName & ", " & APRadio_0 & ", true, "
			
		csvfilename=ARCHIVED_FOLDER & "mappings" & GetDateTimeStamp & ".csv"

		DownloadConfigFromAP csvfilename, apx, apy : wait_custom 7
		
		For n = 0 To ubound(validations)-1 Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, false: wait_custom 1
		Next: wait_custom 5
		
		printscreen name: wait_custom 3
		
		RefreshMapAndConfigFile "", true: wait_custom "fixed25"
		
		skip_start_email=true: TrafficDotLogin name, repeat, true: wait_custom 10:skip_start_email=false
		
		printscreen name: wait_custom 3
		
		csvfilename=ARCHIVED_FOLDER & "mappings_after_refresh" & GetDateTimeStamp & ".csv"

		DownloadConfigFromAP csvfilename, "", "" : wait_custom 7
		
		For n = 0 To ubound(validations)-1 Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, true: wait_custom 1
		Next: wait_custom 5
	
		VerifyList "Sensor",sensorName, false: wait_custom 5
		
		TrafficDotClose false, false

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_ClearMap_Generate_TemplateCfg = 1	
		End If	
		
		TestFinished Err.Description, name

End Function


function Test_EMEA_Generics(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Generics=0	 
		
		apname = Environment("APname"): emea_messages=false
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Generics name, x_d, y_d: exit function
		end if
		
		controllername = ControllerSetup(controller_emea,  2)
		
		MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
		
		RepeaterSet repeaterName, life, 0: DragRepeater repeaterName, x_d, y_d, life: wait_custom 1
		
		repeater_x=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d

		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x+w/2, repeater_y+w/2, apx, apy, sMessage, repeaterName, "AP": wait_custom "fixed10"
		
		mouseclick repeater_x+w+50, repeater_y+w+50, false
		
		x_new=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		dim newsensors(2): numnewsensors=3: adjust = 50: x_new=x+x_d+50: ys=y+y_d+100

		For n = 1 To numnewsensors Step 1
			x_new= x_new +adjust
			y_new=yy_orig: wait_custom 5: sensorN="030"
			if n=2 then 
				sensorN="00B"
				sensetivity="Bike Count"
			End if
			newsensorname=sensorN & n+1 
			DragNewSensor newsensorname, x_new, y_new, newsensorname: wait_custom 1
			if n=2 then
				ChangeSensitivity sensetivity, true, false: wait_custom "fixed7"
			else
				ChangeSensitivity sensetivity, false, false: wait_custom "fixed7"
			end if
			ApplyEMEANewSensor newsensorname: wait_custom 7: HideLog: wait_custom 5
			ActivateObjectOnMap "Repeater", repeater_x+w/2, repeater_y+w/2: wait_custom 2
			If n=1 Then
				xx1= SensorNewAbsXGet: yy1= SensorNewAbsYGet: ww1= SensorNewWidthGet: wait_custom 3
			End If
			dot_id="": newsensors(n-1)=newsensorname
		Next: wait_custom "fixed10"	

		For n = 1 To numnewsensors Step 1	
			sMessage=ConfigureSensorMessage(newsensors(n-1), repeaterName)
			GripAndDragObjects xx1+(n-1)*adjust+ww1/2, yy1+ww1/2, _
						repeater_x+w/2, repeater_y+w/2, sMessage, newsensors(n-1),repeaterName : wait_custom 3
		Next
		
		wait_custom 5
		
		cx=x_d+250: cy=y_d+200
		If controllerName<>"" Then
			skip_controller=false: ti=0
			wait_custom 10: DragControllerNew controllerName, cx, cy, 2, ti
		End If
	
		Set obj = ActivateController (controllerName, "", ""): wait_custom 10
		
		SizeAndRotateObject controllerName,  obj, false, 25, 25, false, 0: wait_custom 10
		
		printscreen name: wait_custom 3
		
		TrafficDotSave  SavingToAPMessage0_1() , SavingToAPMessage1(), "OK", false, true, false: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		UnmapController controllername, ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10

		For n=1 To numnewsensors
			DeleteSensorDeleteButton newsensors(n-1), _
				null, _
				SensorDeleteConfirmMessage2(newsensors(n-1)), xx1+adjust*(n-1)+ww1/2, yy1+ww1/2
		Next: wait_custom 5
		
		UnmapRepeater repeaterName, repeater_x+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "": wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
	
		ignore_role_save=true: TrafficDotSave  SavingToAPMessage0_1() , SavingToAPMessage1(), "OK", false, true, false
		
		TrafficDotCloseBVD

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_Generics = 1	
		End If	
		
		TestFinished Err.Description, name

End Function


Function Test_EMEA_Microradar(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Microradar=0	 
		
		apname = Environment("APname"): emea_messages=false
	
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Microradar name, x_d, y_d: exit function
		end if
		
		controllername = controller_emea: MappingCONTROLLERSetUp controllercode, controllercode1, controllername, cname2
		
		sensorName = SetSensorName (number_of_tries, MicroradarsSetup, "MicroRadar")
		
		TestTitleOnMap name + " (" + global_sensitivity + ", " + mapping_choice + ")", x_d, y_d+150, xtb, ytb, 0, 90, 0
		
		RepeaterSet repeaterName, life, 0
		DragRepeater repeaterName, x_d, y_d, life: wait_custom 1
		
		repeater_x=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d

		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x+w/2, repeater_y+w/2, apx, apy, sMessage, repeaterName, "AP": wait_custom 3
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		if DragSensor (sensorName, xs,ys,sensorName )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_EMEA_Microradar name, x_d, y_d
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true
		   		Test_EMEA_Microradar = 1
		   		Exit function
			End If
		end if
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet: senst="Bike Count"
		
		ChangeSensitivity senst, true, true: wait_custom "fixed10": ApplyEMEA_Micro: wait_custom "fixed7": HideLog: wait_custom 10
	
		sMessage=ConfigureSensorMessage(sensorName, repeaterName)
			GripAndDragObjects x1+w1/2, y1+w1/2, _
							repeater_x+w/2, repeater_y+w/2, sMessage, sensorName, repeaterName : wait_custom 3
		
		sensor_y=y1+w1/3: sensor_x=x1+w1/3
		
		Do  while SensitivityCheck(sensor_x, sensor_y, sensorName, "Microradar setting: " & senst, itry) = 0 
			If n>5 Then
				ChangeSensitivity senst, true, true: wait_custom 5
				ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 5
			elseif n>10 then
				ValidationFailed "SensitivityCheck", senst
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom "fixed10": n=n+1: itry=n
		loop			

		cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllerName, cx, cy, 2, ti), "", "")
		
		wait_custom 10: SizeAndRotateObject controllername, obj_controller, false, 25, 25, false, 0: wait_custom 15
		
		TrafficDotSave  SavingToAPMessage0_1() , SavingToAPMessage1(), "OK", false, true, false: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name
		
		dim validations(3): code=SensitivityCode(senst)

		validations(0)= sensorName & ", " & repeaterName & ", false"
		validations(1)= sensorName & "," & controllercode & "1," & code 
		validations(2)=repeaterName & ", " & APRadio_0 & ", true"
			
		csvfilename=ARCHIVED_FOLDER & "mappings" & GetDateTimeStamp & ".csv"

		DownloadConfigFromAP csvfilename, apx, apy : wait_custom 7
		
		For n = 0 To ubound(validations) Step 1
			 FileReadAndValidate csvfilename, validations(n), true, n, false: wait_custom 1
		Next: wait_custom 5
		
		MapLayersRadioConnectionsAPSwitch true: wait_custom 3
		
		printscreen name: wait_custom 3
		
		UnmapController controllername, ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10

		DeleteSensorDragOff sensorName, _
				null, _
				SensorDeleteConfirmMessage3(sensorName), sensor_x, sensor_y: wait_custom 5
		
		UnmapTextBox TextBoxDeleteConfirmMessage(), xtb+5, ytb+5
		
		UnmapRepeater repeaterName, repeater_x+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "Unconfigure": wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
	
		VerifyList "Sensor",sensorName, false: wait_custom 3
		
		VerifyList "Repeater", repeaterName, false: wait_custom 3

		VerifyList "Controller", controllerName, skip_controller: wait_custom 3
	
		ignore_role_save=true: TrafficDotSave  SavingToAPMessage0_1() , SavingToAPMessage1(), "OK", false, true, false
		
		TrafficDotCloseBVD
		
		TD2LaunchAfterEMEAbvdReboot name
		
		TrafficDotLoginBVD name, repeat
		
		DeviceFoundValidation "controller", controllername,  FindDevicesInTheList (controllername, false, objD, tryid), false
		
		printscreen name: wait_custom "fixed7"

		TD2CloseX(): wait_custom "fixed7"

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_Microradar = 1	
		End If	
		
		TestFinished Err.Description, name

End Function


Function Test_EMEA_DiscoverMode(byval name)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_DiscoverMode=0	 

		forget_emea=true
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			forget_emea=false
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_DiscoverMode name: exit function
		end if
		
		forget_emea=false: discoverModeOnOff "off": TD2CloseX: wait_custom 5
		
		discover_mode_found=false: skip_start_email=true: TrafficDotLogin name, repeat, false
		
		TD2CloseX: wait_custom 5

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_DiscoverMode = 1	
		End If	
		
		TestFinished Err.Description, name
		
End Function

Function Test_EMEA_TemplateConfig(byval name, byval x_d, byval y_d)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_TemplateConfig=0	 

		forget_emea=true
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			forget_emea=false
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_TemplateConfig name, x_d, y_d: exit function
		end if: forget_emea=false
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")

		zoneName = DragSensorZone ("Sensor Zone EB", x_d, y_d, xx, yy, ww, hh,tryid): wait_custom 3
		SensorZoneTypeChange "Count", true: wait_custom 3
  	
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y")
		ww=GetSensorZoneProperty("width"): hh=GetSensorZoneProperty("height")
	
		xx=15+xx+ww/2
		
		if DragSensor (sensorName, xx,yy, sensorName)<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_EMEA_TemplateConfig name, x_d, y_d
		   		Exit function
			else
		   		KillTrafficDOT2
		   		ValidationFailed name, "Could not find sensor: " & sensorName
				Test_EMEA_TemplateConfig = 1 
		   		Exit Function
			End If
		end if
		wait_custom 5: SensorVerticalPositionChange 1, true: wait_custom 7
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet
		
		sensor_x=x1+w1/2: sensor_y=y1+w1/2
		
		noYes=false: bName="Yes": clickOK=true: partialvalid=false: validation=SavingToAPMessage0()	
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 3
		
		if not TD2LaunchAfterEMEAbvdReboot (name) Then
			TrafficDotClose false, false
		end if
	
rem second part of the test second part of the test second part of the test
		
		upload_no=false: template_yes=true: file_to_upload=""
		
		skip_start_email=true: TrafficDotLogin name, repeat, true: upload_no=true
		
		wait_custom "fixed15"
		
		skip_launch=false: TrafficDotLogin name, repeat, true: skip_start_email=false 
		
		VerifyList "Sensor", sensorName, false: wait_custom 5

		ignore_role_save=true: upload_no=true: TrafficDotSave  SaveNoDotsMessage , "", "OK", false, true, false: wait_custom 3
		
		TrafficDotCloseBVD 

		If(Err.Number<>0) or test_failed  Then
			ValidationFailed name, Err.Description
			Test_EMEA_TemplateConfig = 1	
		End If	
		
		TestFinished Err.Description, name
		
End Function

Sub SensorNotConfigured (byval name)
	functionstart "SensorNotConfigured" & " " & name
	set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("This sensor is not configured")
	If obj.Exist Then
		ActivateOKbutton: wait_custom 3
	End If
	functionend "SensorNotConfigured"
End Sub

Function TestAbsolete(byval name)
		WriteToLogFile name + " " & "absolete"
End Function

Function Test_EMEA_Auto_Sensor_Config(byval name, byval x_d, byval y_d)

		TestAbsolete name: Exit Function 
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Auto_Sensor_Config=0	 
		
		emea_messages=false
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Auto_Sensor_Config name, numsensors, x_d, y_d: exit function
		end if
		
		apname = Environment("APname")
		
		sensorName= SetSensorName (number_of_tries, SensorsSetup, "Sensor")
		
		MapLayersPendingConnectionsAPSwitch true: wait_custom 3
		
		repeaterName="0001": life=False
		
		DragRepeater repeaterName, x_d, y_d, life:  wait_custom 1
		
		repeater_x=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d

		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x+w/2, repeater_y+w/2, apx, apy, sMessage, repeaterName, "AP": wait_custom 3
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		if DragSensor (sensorName, xs,ys,sensorName )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_EMEA_Auto_Sensor_Config name, x_d, y_d
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true
		   		Test_EMEA_Auto_Sensor_Config = 1
		   		Exit function
			End If
		end if
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet: senst="Count"
		mode="On": ChangeSensitivity senst, false, true: wait_custom 1: TramNearByChange mode: wait_custom 1
		ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 10
	
		sMessage=ConfigureSensorMessage(sensorName, repeaterName)
		
		GripAndDragObjects x1+w1/2, y1+w1/2, _
							repeater_x+w/2, repeater_y+w/2, sMessage, sensorName, repeaterName : wait_custom 3
		
		sensor_y=y1+w1/3: sensor_x=x1+w1/3
		
		n=0: Do  while SensitivityCheck(sensor_x, sensor_y, sensorName, "Current sensitivity: " & senst, itry) = 0 
			If n>10 Then
				ValidationFailed "SensitivityCheck", senst
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom "fixed10": n=n+1
		loop	
		
		n=0: Do  while TramNearbyCheck(sensor_x, sensor_y, sensorName, mode) = 0 
			If n>10 Then
				ValidationFailed "TramNearbyCheck", mode
				Exit do
			End If
			wait_custom 5: ActivateObjectOnMap "AP", apx, apy: wait_custom 5: n=n+1
		loop

		controllername = controller_emea: cx=x_d+250: cy=y_d+200: ti
		
		Set obj_controller = ActivateController(DragControllerNew (controllerName, cx, cy, 2, ti), "", "")
		
		wait_custom 10: SizeAndRotateObject controllername, obj_controller, false, 25, 25, false, 0: wait_custom 15
		
		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name 
		
		If mapping_choice="bvd4" or mapping_choice="bvd20" Then
			skip_start_email=true: TrafficDotLogin name, repeat, false : skip_start_email=false
		End If
		
		ActivateObjectOnMap "Sensor", sensor_x, sensor_y: wait_custom 3
		
		senst1="Count"
		If senst="Count" Then
			senst1 = "Scoot/Mova"
		End If

		mode1="On"
		If mode="On" Then
			mode1 = "Off"
		End If
		
		ChangeSensitivity senst1, false, true: wait_custom 1: TramNearByChange mode1: wait_custom 1
		ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 10
		
		n=0: Do  while SensitivityCheck(sensor_x, sensor_y, sensorName, "Current sensitivity: " & senst1, itry) = 0 
			If n>10 Then
				ValidationFailed "SensitivityCheck", senst1
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom "fixed10": n=n+1
		loop
		
		n=0: Do  while TramNearbyCheck (sensor_x, sensor_y, sensorName, mode) = 0 
			If n>10 Then
				ValidationFailed "TramNearbyCheck", mode
				Exit do
			End If
			wait_custom 5: ActivateObjectOnMap "AP", apx, apy: wait_custom 5: n=n+1
		loop
		
		wait_custom 10: Tools "Utilities...", "Auto Sensor Config", "": wait_custom 5
		
		AutoSensorConfigValidation sensorName: wait_custom 5
		
		n=0: Do  while SensitivityCheck(sensor_x, sensor_y, sensorName, "Current sensitivity: " & senst, itry) = 0 
			If n>10 Then
				ValidationFailed "SensitivityCheck", senst
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom "fixed10": n=n+1
		loop
		
		n=0: Do  while TramNearbyCheck(sensor_x, sensor_y, sensorName, mode) = 0 
			If n>10 Then
				ValidationFailed "TramNearbyCheck", mode
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom 5: n=n+1
		loop
		
		UnmapController controllername, ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10

		DeleteSensorDragOff sensorName, _
				null, _
				SensorDeleteConfirmMessage3(sensorName), sensor_x, sensor_y: wait_custom 5
		
		UnmapRepeater repeaterName, repeater_x+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "Unconfigure": wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
	
		VerifyList "Sensor",sensorName, false: wait_custom 3
		
		VerifyList "Repeater", repeaterName, false: wait_custom 3

		VerifyList "Controller", controllerName, skip_controller: wait_custom 3
		
		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom "fixed7"
	
		TrafficDotCloseBVD  

		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_EMEA_Auto_Sensor_Config = 1	
		End If	
		TestFinished Err.Description, name
End Function

Function Test_EMEA_Microradar_Auto_Sensor_Config(byval name, byval x_d, byval y_d)
		
		TestAbsolete name: Exit Function 
		
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_EMEA_Microradar_Auto_Sensor_Config=0	:  emea_messages=false
		
		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_EMEA_Microradar_Auto_Sensor_Config name, numsensors, x_d, y_d: exit function
		end if
		
		apname = Environment("APname")
		
		sensorName = SetSensorName (number_of_tries, MicroradarsSetup, "MicroRadar")
		
		MapLayersPendingConnectionsAPSwitch true: wait_custom 3
		
		repeaterName="0001": life=false
		DragRepeater repeaterName, x_d, y_d, life: wait_custom 1
		
		repeater_x=RepeaterAbsXGet: repeater_y=RepeaterAbsYGet: w=RepeaterWidthGet
		
		x=ShowLogsGetX: y=ShowLogsGetY: x1=x+x_d: y1=y+y_d

		apx=x_d: apy=y_d+200: DragAP apx, apy, oap, 0: skip_controller=true
		
		GripAndDragObjects repeater_x+w/2, repeater_y+w/2, apx, apy, sMessage, repeaterName, "AP": wait_custom 3
		
		xs=x+x_d+50: ys=y+y_d+100: yy_orig=ys
		
		if DragSensor (sensorName, xs,ys,sensorName )<0 then
			If number_of_tries< CInt(Environment("TestCaseTryNumber")) Then
				number_of_tries=number_of_tries+1
				KillTrafficDOT2
		   		Test_EMEA_Microradar_Auto_Sensor_Config name, x_d, y_d
		   		Exit function
		   	else
		   		KillTrafficDOT2
		   		SystemSave "Don't Save", false, true
		   		Test_EMEA_Microradar_Auto_Sensor_Config = 1
		   		Exit function
			End If
		end if
		w1= SensorWidthGet: x1= SensorAbsXGet: y1= SensorAbsYGet: senst="Bike Count"
		
		ChangeSensitivity senst, true, true: wait_custom 3: ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 10
	
		sMessage=ConfigureSensorMessage(sensorName, repeaterName)
		
		GripAndDragObjects x1+w1/2, y1+w1/2, _
							repeater_x+w/2, repeater_y+w/2, sMessage, sensorName, repeaterName : wait_custom 3
		
		sensor_y=y1+w1/3: sensor_x=x1+w1/3
		n=0
		Do  while SensitivityCheck(sensor_x, sensor_y, sensorName, "Microradar setting: " & senst, itry) = 0 
			If n>10 Then
				ValidationFailed "SensitivityCheck", senst
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom "fixed10": n=n+1
		loop			

		controllername = controller_emea: cx=x_d+250: cy=y_d+200: ti=0
		
		Set obj_controller = ActivateController(DragControllerNew (controllerName, cx, cy, 2, ti), "", "")
		
		wait_custom 10: SizeAndRotateObject controllername, obj_controller, false, 25, 25, false, 0: wait_custom 15
		
		clickOK=false: bName="OK": partialvalid=true: validation=SavingToAPMessage0_1()
		
		TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom 5
		
		TD2LaunchAfterEMEAbvdReboot name

		ActivateObjectOnMap "Sensor", sensor_x, sensor_y: wait_custom 3
		
		senst1="Bike Count"
		If senst="Bike Count" Then
			senst1 = "Sm Bike Zone"
		End If

		ChangeSensitivity senst1, true, true: wait_custom 3: ApplyEMEA 0: wait_custom 7: HideLog: wait_custom 10
		
		Do  while SensitivityCheck(sensor_x, sensor_y, sensorName, "Microradar setting: " & senst1, itry) = 0 
			If n>10 Then
				ValidationFailed "SensitivityCheck", senst1
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom 5: n=n+1
		loop
		
		wait_custom 5: Tools "Utilities...", "Auto Sensor Config", "": wait_custom 10
		
		AutoSensorConfigValidation sensorName: wait_custom 5
		
		Do  while SensitivityCheck(sensor_x, sensor_y, sensorName, "Microradar setting: " & senst, itry) = 0 
			If n>10 Then
				ValidationFailed "SensitivityCheck", senst
				Exit do
			End If
			ActivateObjectOnMap "AP", apx, apy: wait_custom 5: n=n+1
		loop
		
		UnmapController controllername, ControllerUnmapMessage(controllerName), false, false, cx, cy: wait_custom 10

		DeleteSensorDragOff sensorName, _
				null, _
				SensorDeleteConfirmMessage3(sensorName), sensor_x, sensor_y: wait_custom 5
		
		UnmapRepeater repeaterName, repeater_x+w/2,repeater_y+w/2, RepeaterUnmapMessage(repeaterName), false, "Unconfigure": wait_custom 5
		
		UnmapAP apx, apy, false, APDeleteConfirmMessage1() :  wait_custom 5
	
		VerifyList "Sensor",sensorName, false: wait_custom 3
		
		VerifyList "Repeater", repeaterName, false: wait_custom 3

		VerifyList "Controller", controllerName, skip_controller: wait_custom 3
		
		ignore_role_save=true: TrafficDotSave  validation , SavingToAPMessage1(), bName, false, partialvalid, clickOK: wait_custom "fixed7"
	
		TrafficDotCloseBVD

		If(Err.Number<>0) or test_failed Then
			ValidationFailed name, Err.Description
			Test_EMEA_Microradar_Auto_Sensor_Config = 1	
		End If	
		TestFinished Err.Description, name
End Function

Function AutoSensorConfigValidation (byval sensorname)
	functionstart "AutoSensorConfigValidation" & " " & sensorname
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sending commands for sensor")
	Set objok = UIAWindow("Sensys Networks TrafficDOT").UIAButton("OK")
	If not obj.Exist Then
		ValidationFailed "Auto sensor config", ""
		functionend "AutoSensorConfigValidation"
		Exit function
	End If
	finished=false
	do while not finished 
		wait_custom 5: finished= objok.Exist
		If finished Then
			runtimet = obj.GetROProperty("name")
			If instr(1, runtimet, "did not get")>0 Then
				ValidationFailed "Auto sensor config", runtimet
			else
				ValidationSucceeded "Auto sensor config", sensorname
			End If
			ActivateOKbutton: wait_custom 5
		End If
		WriteToLogFile "AutoSensorConfigValidation" & "..."
	loop
	functionend "AutoSensorConfigValidation"
End Function

Function SensitivityCode (byval sens)
	functionstart "SensitivityCode" & " " & sens
	Select Case sens
		Case "Sm Bike Zone"
			senscode="SZ"
		Case "Bike Count"
			senscode="BC"
		Case "Radar SB"
			senscode="RSB"
		Case "Lg Bike Zone"
			senscode="LZ"
		Case "Count"
			senscode="C"
		Case "Normal SB"
			senscode ="SB"
		Case "Narrow SB"
			senscode="SBN"
		Case "Wide SB"
			senscode="SBW"
		Case "Scoot/Mova"
			senscode="SM"		
	End Select
	SensitivityCode=senscode
	functionend "SensitivityCode" & " " & senscode
End Function

Sub SensitivitySet(byval sensitivitytype)
	functionstart "SensitivitySet" & " " & sensitivitytype
	Repository.Value("sensetivity_type") = sensitivitytype
	functionend "SensitivitySet"
End Sub

Function SensitivityCheck (byval sensor_x, byval sensor_y, byval sensorName, byval sensetivitytype, byref itry)
	functionstart "SensitivityCheck" & " " & sensorName & " " & sensetivitytype & " " & itry
	SensitivityCheck=0: ActivateObjectOnMap "Sensor: " & sensorName, sensor_x, sensor_y: wait 7
	Select Case lcase(sensetivitytype)
		Case lcase("Current sensitivity: Count")
			Set obj = UIObject("Current Sensitivity_Count")
		Case lcase("Current sensitivity: Scoot/Mova")
			set obj = UIObject("Current Sensitivity: Scoot/Mov")
		Case lcase("Microradar setting: Bike Count") 
			set obj = UIObject("Microradar setting_Bike")
		Case lcase("Microradar setting: Sm Bike Zone")
			set obj = UIObject("Microradar setting_Sm")
		Case lcase("Current sensitivity: Wide SB")
			set obj = UIObject("Current Sensitivity: Wide")
		Case lcase("Current sensitivity: Narrow SB")
			Set obj = UIObject("Current Sensitivity: Narrow")
	End Select
	If obj.Exist then
		ValidationSucceeded "SensitivityCheck", sensetivitytype
		SensitivityCheck=1
		sensi= obj.GetROProperty("name"): WriteToLogFile sensi
	else

	End If
	functionend "SensitivityCheck" 
End Function

Sub ExitTestQ
	no_db_step_update=true
	db_ControlsSearch stopid, idleid
	Set fso = CreateObject("Scripting.FileSystemObject")
	If (fso.FileExists(STOP_TEST_PATH)) or cstr(stopid)="1" Then
		functionstart "ExitTestQ"
		If cstr(stopid)="1" Then
		  db_ResetControls "101"
		else	
			fso.CopyFile STOP_TEST_PATH, STOP_TEST_BACKUP, true
			fso.DeleteFile STOP_TEST_PATH: 
		End If
		functionend "ExitTestQ": ExitRun
	elseif (fso.FileExists(IDLE_TEST_PATH)) or cstr(idleid)="1" Then
		functionstart "ExitTestQ" & " " & "idle"
		do While fso.FileExists(IDLE_TEST_PATH) or cstr(idleid)="1"
			wait 2: db_ControlsSearch stopid, idleid
		loop
		functionend "ExitTestQ"
	End If
	no_db_step_update=false
End Sub

Sub wait_custom (byval sec)
	If instr(Cstr(sec), "fixed")>0 Then
		strnew= replace(cstr(sec), "fixed", "")
		strnew=trim(replace(strnew, "_", ""))
		sec=cint(strnew)
	else
		If sec>10 Then
			environment.LoadFromFile env_path_changed
			add = environment("SpeedFactor")
			If add>5 Then
				add=5
			End If
			WriteToLogFile "test prf factor applied " & add & " " & "seconds"
			sec=sec-add
		End If
	End If

	if sec> 1 then ExitTestQ
	if sec > 5 Then
		WriteToLogFile "... idle for " & sec & " " & "seconds"
	End If
	wait sec
End Sub

Function TramNearbyCheck (byval sensor_x, byval sensor_y, byval sensorName, byval mode)
	functionstart "TramNearbyCheck" & " " & sensorName & " " & mode
	TramNearbyCheck=0: ActivateObjectOnMap "Sensor: " & sensorName, sensor_x, sensor_y: wait_custom 5
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Tram Nearby: Off")
	mode= "Tram Nearby: " & mode
	wait_custom 1: If obj.Exist then
		if obj.GetROProperty("name")=mode Then
			ValidationSucceeded "TramNearbyCheck", mode
			TramNearbyCheck=1
		End If 
	End If
	functionend "TramNearbyCheck"
End Function

Function WinSCPLogin (byval ip, byval login, byval pass)
	functionstart "WinSCPLogin" & " " & ip & " " & login & " " & "****" 
	UIAWindow("WinSCP").UIAWindow("Login").UIAObject("New Site").Click: wait_custom 5
	Set cb = UIAWindow("WinSCP").UIAWindow("Login").UIAComboBox("FileProtocol")
	for iw=0 to 2
		if cb.Exist then
			cb.Select "SCP" : wait_custom 1: exit for
		end if
	next 
	UIAWindow("WinSCP").UIAWindow("Login").UIAEdit("HostName").type ip: wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIAEdit("UserName").type login: wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIAEdit("Password").type pass : wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIASplitButton("Login").Click: wait_custom 10
	functionend "WinSCPLogin"
End Function

Function WinSCPFindFiles ()
	functionstart "WinSCPFindFiles"
	SendKeysShell "%{F7}", 2
	functionend "WinSCPFindFiles"
	Exit function
	Set obj1 = UIAWindow("Documents"): Set obj2 = UIAWindow("Documents_root")	
	If not obj1.Exist Then 
		Set obj3 = obj2
	else
		Set obj3 = obj1
	end if
	obj3.UIAMenu("Menu").UIAObject("Commands").Click: wait_custom 3
	obj3.UIAMenu("Menu").UIAObject("Find Files").Click: wait_custom 3
	functionend "WinSCPFindFiles"
End Function

Function WinSCPSearchFile (byval filename, byval location)
	functionstart "WinSCPSearchFile" & " " & filename & " " & location
	UIAWindow("FindWincp").UIAComboBox("mask hints").UIAEdit("mask hints").type filename: wait_custom 5
	UIAWindow("FindWincp").UIAEdit("SearchIn").type location: wait_custom 3
	UIAWindow("FindWincp").UIAButton("Start").Click: wait_custom 3
	functionend "WinSCPSearchFile"
End Function

Sub WinSCPDelete (byval sourcefile, byval searchin)
	functionstart "WinSCPDelete"
	WinSCPRun: WinSCPLogin Environment("IPaddress"), "root", "Apcc@!2"
	WinSCPFindFiles: WinSCPSearchFile sourcefile, searchin: wait_custom 3
	Repository.Value("APFileName")=sourcefile
	UIAWindow("FindWincp").UIAObject("TDConfig").Click: wait_custom 3
	UIAWindow("FindWincp").UIAButton("Delete").Click: wait_custom 3
	UIAWindow("FindWincp").UIAWindow("Confirm").UIAButton("OK").Click: wait_custom 3
	WinSCPkill: wait_custom 3
	functionend "WinSCPDelete"
End Sub

Sub WinSCPRun
	functionstart "WinSCPRun"
	WinSCPkill: wait_custom 3
	RunProgram (winscp_path): wait_custom 10
	functionend "WinSCPRun"
end sub

Sub WinSCPDownload (byval sourcefile, byval searchin, byval destinationfile)
	functionstart "WinSCPDownload": RunProgram (winscp_path): wait_custom 10
	WinSCPLogin Environment("IPaddress"), "root", "Apcc@!2"
	WinSCPFindFiles: WinSCPSearchFile sourcefile, searchin: wait_custom 3
	Repository.Value("APFileName")=sourcefile
	UIAWindow("FindWincp").UIAObject("TDConfig").Click: wait_custom 3
	UIAWindow("FindWincp").UIAButton("Download...").Click: wait_custom 7
	If True Then
		SendKeysShell destinationfile, 2
	End If
	UIAWindow("FindWincp").UIAWindow("Download").UIAButton("OK").Click
	WinSCPkill: wait_custom 3
	functionend "WinSCPDownload"
End Sub

Sub RunProgram(byval programpath)
	functionstart "RunProgram" & " " & programpath
	If instr(1, programpath, "DOT2")>0 Then
		ForceCloseActiveTD2: wait_custom 3
	End If
	SystemUtil.Run (programpath)
	functionend "RunProgram"
End Sub

Sub WinSCPDownload_Absolete (byval sourcefile, byval searchin, byval targetfilename, byref filenameandpath)
	functionstart "WinSCPDownload"
	RunProgram (winscp_path): wait_custom 10
	
	UIAWindow("WinSCP").UIAWindow("Login").UIAObject("New Site").Click: wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIAComboBox("FileProtocol").Select "SCP" : wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIAEdit("HostName").type Environment("IPaddress"): wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIAEdit("UserName").type "root": wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIAEdit("Password").type "Apcc@!2" : wait_custom 1
	UIAWindow("WinSCP").UIAWindow("Login").UIASplitButton("Login").Click: wait_custom 5

	Set obj1 = UIAWindow("Documents"): Set obj2 = UIAWindow("Documents_root")
	Set obj3 = obj1: If not obj1.Exist Then Set obj3 = obj2

	x_d=obj3.GetROProperty("abs_x"): y_d=obj3.GetROProperty("abs_y")
	
	mouseclick x_d+935, y_d+116, false: wait_custom 3
	
	UIAWindow("FindWincp").UIAComboBox("mask hints").UIAEdit("mask hints").type sourcefile: wait_custom 5
	UIAWindow("FindWincp").UIAEdit("SearchIn").type searchin: wait_custom 3
	UIAWindow("FindWincp").UIAButton("Start").Click: wait_custom 3
	Repository.Value("APFileName")=sourcefile
	UIAWindow("FindWincp").UIAObject("TDConfig").Click: wait_custom 3
	UIAWindow("FindWincp").UIAButton("Download...").Click: wait_custom 1
	filenameandpath="U:\" & targetfilename &_
			GetDateTimeStamp & ".csv"
	
	UIAWindow("FindWincp").UIAWindow("Download").UIAEdit("DownloadTo").type filenameandpath		
	UIAWindow("FindWincp").UIAWindow("Download").UIAButton("OK").Click
	wait_custom 10: WinSCPkill
	functionend "WinSCPDownload"
End Sub

Sub WinSCPkill()
	functionstart "WinSCPkill"
	Dim oShell : Set oShell = CreateObject("WScript.Shell")
	For Iterator = 1 To 2 Step 1
		oShell.Run "taskkill /im WinSCP.exe", , True: wait_custom 1
	Next
	functionend "WinSCPkill"
End Sub

Sub puttyOps
	UserName="root"
	Passwrd="Apcc@!2"

	Set shell = CreateObject ("WScript.Shell")
	pcmd = "C:\Program Files\PuTTY\putty.exe -ssh" & " " & UserName & "@192.168.3.157 -pw" & " " & Passwrd

	Set exec = shell.Exec(pcmd)
	Set pout = exec.StdOut  	
End Sub

Sub ApplyReboot ()
	RebootSTD_AP(): exit sub
	functionstart "ApplyReboot"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Reboot").Click: wait_custom 3
	If UIAWindow("Sensys Networks TrafficDOT").UIAObject("RebootPopUp").Exist Then
		ActivateYesButton: wait_custom 3
	End If
	functionend "ApplyReboot"
End Sub

Function ActivateSTD2_button(byval buttonName)
	functionstart "ActivateSTD2_button" & " " & buttonName
	Set chld=Description.Create
	chld("micclass").value = "UIAButton"
	Set chldcln = UIAWindow("STD2").ChildObjects(chld)
	For num = 0 to chldcln.count-1
		'chldcln(num).highlight
		print chldcln(num).GetRoProperty("name")
		print buttonName
		If chldcln(num).GetRoProperty("name") = "Choose file (.csv) Start new config" Then
			print "Yes"
		End If
	    If chldcln(num).GetRoProperty("name") = buttonName Then
	    	wait_custom 3: chldcln(num).Click: wait_custom 3: functionend "ActivateSTD2_button": exit function
	    End If
	Next
	functionend "ActivateSTD2_button"
End Function

Function TextBoxEdit(byval deltax, byval deltay, byref etext, byval label)
	functionstart "TextBoxEdit" &  " " & label & " " & etext
	If x_config ="" Then
		x_config=ConfigAbsXGet
		y_config=ConfigAbsYGet
	End If
	Set chld=Description.Create
	chld("micclass").value = "UIAEdit"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld)
	For num = 0 to chldcln.count-1
		'chldcln(num).highlight
		print chldcln(num).GetRoProperty("x")
		print chldcln(num).GetRoProperty("y")
		xe=chldcln(num).GetRoProperty("x")
		ye=chldcln(num).GetRoProperty("y")
		rundeltax = x_config-xe
		rundeltay = ye-y_config
		print rundeltax: print rundeltay 
		print deltax-rundeltax: print deltay-rundeltay
	    If abs(deltax-rundeltax)<10 and abs(deltay-rundeltay)<10 Then
	    	wait_custom 3
	    	If etext="" Then
				chldcln(num).type "delete": ClearTextBoxAll
	    	else
	    		chldcln(num).type etext: wait_custom 3
	    	End If
	    	functionend "TextBoxEdit": exit function
	    End If
	Next
	functionend "TextBoxEdit"
End Function


Function Apply_button()
	Click_button "Apply", obj, true, false: exit function
	functionstart "Apply_button"
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAButton" Then
			bname = collections(iii).GetROProperty("name")
			if bname ="Apply" Then
				collections(iii).Click: functionend "Apply_button": exit function 
			end if	
		End If
	Next
	ValidationFailed "Apply_button", "No Apply button found"
	functionend "Apply_button"
End Function

Function UnPairDots(byval buttonname, byval confirmbuttonName)
	functionstart "UnPairDots" & " " & confirmbuttonName
	click_BUTTON buttonname, objU, false, true
	clickfromconfig 167,622: wait_custom 5
	click_button confirmbuttonName, objY,true, true
	functionend "UnPairDots"
End Function

Function UIAObjectFind(byref name, byref obj, byval clickit, byval validate, byval exactmatch, byref tryid)
	functionstart "UIAObjectFind" & " " & name
	UIAObjectFind=true
	Set objRegExp = New RegExp
	objRegExp.Pattern = "[^a-z0-9]"
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAObject" Then
			oname = collections(iii).GetROProperty("name")
			If exactmatch Then
				if oname=name Then
					Set obj = collections(iii)
					GetObjectABSXYWH name, obj, xo, yo, ho, wo
					if clickit then
						mouseclick xo+15, yo+10, false
					end if
					set UIAObjectFind = obj: name=oname
					functionend "UIAObjectFind": exit function 
				end if	
			else
				oname = objRegExp.Replace(collections(iii).GetROProperty("name"), "")
				name  =	objRegExp.Replace(name, "")
				if instr(1, lcase(oname), lcase(name))>0 or lcase(oname)=lcase(name) Then
					Set obj = collections(iii)
					GetObjectABSXYWH name, obj, xo, yo, ho, wo
					if clickit then
						mouseclick xo+15, yo+10, false
					end if
					set UIAObjectFind = obj: name=oname
					functionend "UIAObjectFind": exit function 
				end if
			End If
		End If
	Next
	If validate Then
		if tryid<2 then
			tryid=tryid+1
			oops "", trid
			UIAObjectFind name, obj, clickit, exactmatch, tryid, validate:  resetTryid:exit function
		end if
	else
		UIAObjectFind=false
	End If
	functionend "UIAObjectFind"
End Function

function RevertChanges()
	functionstart "RevertChanges"
	Click_button "Revert", obj, true, true: wait_custom 3
	functionend "RevertChanges"
end function

Function Click_button(byval buttonanme, byref obj, byval clickit, byval validate)
	functionstart "Click_button" & " " & buttonanme
	Click_button=false
	set objw=UIAWindow("Sensys Networks TrafficDOT")
	if not objw.Exist then
	 	WriteTologfile "TD2 not properly loaded...."
	 	if clickit then
	 		WriteTologfile "Trying something else...."
	 		ActivateTD2Button buttonanme
	 	end if
	 	functionend "Click_button": exit function
	end if
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAButton" Then
			bname = collections(iii).GetROProperty("name")
			xb=collections(iii).GetROProperty("abs_x")
			yb=collections(iii).GetROProperty("abs_y")
			if lcase(bname) =lcase(buttonanme) Then
				Set obj = collections(iii)
				If obj.Exist Then
					Click_button=true
					if clickit then
						mouseclick xb+15, yb+10, false
					end if
					functionend "Click_button": set collections=nothing: exit function 
				else
					oops "", tryid
					if tryid<2 then
						Click_button buttonanme, obj, clickit, false:  resetTryid:exit function
					end if
				end if
			end if	
		End If
	Next
	If validate Then
		oops "", tryid
		if tryid<2 then
			Click_button buttonanme, obj, clickit, false:  resetTryid:exit function
		else
			Click_button=false: ValidationFailed "Click_button", buttonanme & " button not found": exit function
		end if

	End If
	oops "", tryid
	if tryid<2 then
		Click_button buttonanme, obj, clickit, validate:  resetTryid: exit function
	end if
	functionend "Click_button"
End Function


Function Apply_button_osolete()
	functionstart "Apply_button"
	Set chld=Description.Create
	chld("micclass").value = "UIAButton"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld)
	For num = 0 to chldcln.count-1
	    If chldcln(num).GetRoProperty("name") = "Apply" Then
	    	wait_custom 3: chldcln(num).Click: wait_custom 3: functionend "Apply_button": exit function
	    End If
	Next
	functionend "Apply_button"
End Function

Function SensorsList(byval highlight)
	functionstart "SensorsList"
	Set chld=Description.Create
	chld("micclass").value = "UIAObject"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").UIAList("List").ChildObjects(chld)
	For num = 0 to chldcln.count-1
		oname = chldcln(num).GetRoProperty("name")
		If highlight Then
			chldcln(num).highlight
		End If
		chldcln(num).Click
		onames=onames & ";" & oname 
	Next
	Set objRegExp = New RegExp
	objRegExp.Pattern = "[^a-z0-9]"
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	onames = objRegExp.Replace(onames, "")
	WriteTologfile onames: SensorsList=onames
	functionend "SensorsList"
End Function

Function GenericTabsSubTabs(byval tabname, byval allitems, byval itemselection)
	functionstart "GenericTabsSubTabs" & " " & tabname & " " & itemselection
	UITabGroupItem tabname,  true, false, 2: wait_custom 2
	If allitems<>"" Then
		GenericTabItems  allitems, itemselection, false,  true
	End If
	functionend "GenericTabsSubTabs"
End Function

Function GenericTabItems(byval tabitems, byval itemname, byval highlight, byval clickit)
	functionstart "GenericTabItems"
	Repository.Value("name")=tabitems
	Set tabobject= UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_Generic")
	set collections = tabobject.ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("name")=itemname Then
			If highlight Then
	   			collections(iii).highlight
			End If
			If clickit Then
				collections(iii).Click
			End If	
			Exit function
		End If
	Next
	functionend "GenericTabItems"
End Function

Function ButtonsList(byval viewname, byval highlight)
	functionstart "ButtonsList" & " " & viewname 
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAButton" Then
			If highlight Then
	   			collections(iii).highlight
			End If
			bname = collections(iii).GetROProperty("name")
			names=names & ";" & bname	
		End If
	Next
	Set objRegExp = New RegExp
	objRegExp.Pattern = "[^a-z0-9]"
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	names = objRegExp.Replace(names, "")
	WriteTologfile names: ButtonsList=names
	functionend "ButtonsList"
End Function


Function CommandLogCommandComplete (byref tryit, byval howmany)
		functionstart "CommandLogCommandComplete" & " " & tableNameOrView
		Set lobj= UIAWindow("Sensys Networks TrafficDOT").UIAList("List")
		lobj.RefreshObject
		Set itms=lobj.GetItems
		maxnum=itms.Count
		For rowCount = 1 To itms.Count
			itmname=(itms.item(rowCount))
			If instr(1, itmname, "command ended")>0 and rowCount = maxnum Then
				cdescription=(itms.item(rowCount-1))
				functionend "CommandLogCommandComplete" & " " &  cdescription
				Exit function
			End If
		Next
		If tryit<howmany Then
			tryit=tryit+1
			wait_custom 3: CommandLogCommandComplete tryit, howmany
		End If

		functionstart "CommandLogCommandComplete"
End Function


function DevicesActiveInTheTray(byval highlight, byval searchname, byref searchedobj, byval clickit)
	functionstart "DevicesActiveInTheTray" & " " & searchname
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAList("List")
	Set collections = obj.ChildObjects
	dim sensors()
	For i=0 to collections.count-1
		If collections(i).GetROProperty("Class Name")="UIAObject" Then
			If highlight Then
	   			collections(i).highlight
			End If
			sensorname = collections(i).GetROProperty("name")
			if searchname<>"" Then
				if searchname=sensorname Then
					set searchedobj=collections(i)
					if clickit Then
						collections(i).Click
					end if
				end if
			end if
			redim preserve sensors(i)
			sensors(i)=sensorname
		end if
	Next
	SensorsActiveInTheTray=sensors
	functionend "DevicesActiveInTheTray"
end function

Function CheckBoxByNum(byval viewname, byval num, byval turnitonoff, byval highlight, byval descript)
	functionstart "CheckBoxByNum" & " " & viewname  & " " & descript
	CheckBoxByNum=false
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=1 to collections.count-1
		If collections(iii).GetROProperty("Class Name")="UIACheckBox" Then
			chiii=chiii+1
			If highlight Then
	   			collections(iii).highlight
			End If
			chknamerun = collections(iii).GetROProperty("name")
			If chiii=cint(num) Then
					Set objCHK = collections(iii)
					gvalue=objCHK.GetROProperty("togglestate")
					If turnitonoff="on" and cstr(gvalue)="1" Then
						functionend "CheckBoxByNum": exit function
					ElseIf turnitonoff="off" and cstr(gvalue)="0" Then
						functionend "CheckBoxByNum": exit function
					ElseIf turnitonoff="off" and cstr(gvalue)="1" Then
						GetObjectABSXYWH descript, objCHK, x, y, h, w
						'objCHK.Click
						mouseclick x+3, y+3, false: CheckBoxByNum=true
						functionend "CheckBoxByNum->Off": exit function
					ElseIf turnitonoff="on" and cstr(gvalue)="0" Then
						GetObjectABSXYWH descript, objCHK, x, y, h, w
						'objCHK.Click
						mouseclick x+3, y+3, false: CheckBoxByNum=true
						functionend "CheckBoxByNum->On": exit function
					End If
			End If
		end if
	Next
	functionend "CheckBoxByNum"
End Function

Function RadioButtonByNum (byval num, byval selectit, byval highlight, byval descript, byval apply)
	functionstart "RadioButtonByNum" & " " & viewname  & " " & descript
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=1 to collections.count-1
		If collections(iii).GetROProperty("Class Name")="UIARadioButton" Then
			chiii=chiii+1
			If highlight Then
	   			collections(iii).highlight
			End If
			rdname = collections(iii).GetROProperty("name")
			If chiii=cint(num) Then
					Set objCB = collections(iii)
					GetObjectABSXYWH descript, objCB, x, y, h, w
					currentvalue=objCB.GetROProperty("isselected")
					If currentvalue Then
						alreadyselected=true
					End If
					If selectit Then
						If alreadyselected Then
						else
							mouseclick x+3, y+3, false
						End If
						If apply Then
							click_button "Apply", objb, true, false
						End If
						functionend "RadioButtonByNum"
						Exit function
					End If
			End If
		End if
	Next
	functionend "RadioButtonByNum" & " " & rdname
End Function


Function ComboBoxByNum(byval viewname, byval num, byval clickit, byval selectitem, byval highlight, byval descript, byval adjust, byval apply)
	functionstart "ComboBoxByNum" & " " & viewname  & " " & descript
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=1 to collections.count-1
		If collections(iii).GetROProperty("Class Name")="UIAComboBox" Then
			chiii=chiii+1
			If highlight Then
	   			collections(iii).highlight
			End If
			chknamerun = collections(iii).GetROProperty("name")
			If chiii=cint(num) Then
					Set objCB = collections(iii)
					GetObjectABSXYWH descript, objCB, x, y, h, w
					currentvalue=objCB.GetROProperty("text")
					If currentvalue=descript Then
						addv=true
					End If
					If clickit Then
						mouseclick x+5, y+5, false
						If selectitem Then
							Set itms=objCB.GetItems
							For rowCount = 1 To itms.Count
							iname=(itms.item(rowCount))
							If iname=descript Then
								xnum = rowCount
								Exit for
							End If
						Next
						If addv Then
							xnum=xnum+adjust
						End If
						mouseclick x +10, y +10 + 20*xnum, false
						End If
					End If
					If apply Then
						click_button "Apply", objb, true, false
					End If
					functionend "ComboBoxByNum"
					Exit function
			End If
		end if
	Next
	functionend "ComboBoxByNum"
End Function

Function CheckBox(byval viewname, byval chkname, byval turnitonoff, byval highlight)
	functionstart "CheckBox" & " " & viewname  & " " & chbname
	set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIACheckBox" Then
			If highlight Then
	   			collections(iii).highlight
			End If
			chknamerun = collections(iii).GetROProperty("name")
			If chknamerun=chkname Then
					Set objCHK = collections(iii)
					gvalue=objCHK.GetROProperty("togglestate")
					If turnitonoff="on" and cstr(gvalue)="1" Then
						functionend "CheckBox": exit function
					ElseIf turnitonoff="off" and cstr(gvalue)="0" Then
						functionend "CheckBox": exit function
					ElseIf turnitonoff="off" and cstr(gvalue)="1" Then
						GetObjectXYWH chkname, objCHK, x, y, h, w
						'objCHK.Click
						mouseclick x+3, y+3, false
						functionend "CheckBox->Off": exit function
					ElseIf turnitonoff="on" and cstr(gvalue)="0" Then
						GetObjectXYWH chkname, objCHK, x, y, h, w
						'objCHK.Click
						mouseclick x+3, y+3, false
						functionend "CheckBox->On": exit function
					End If
			End If
		end if
	Next
	functionend "CheckBox"
End Function


Function ButtonsSearch(byval btnname, byval clickit)
	functionstart "ButtonsSearch" & " " & btnname 
	set collections = UIAWindow("STD2").ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAButton" Then
			bname = collections(iii).GetROProperty("name")
			collections(iii).highlight
			If bname=btnname Then
				Set ButtonsSearch=collections(iii)
				If clickit Then	
					collections(iii).Click
				End If
				functionend "ButtonsSearch"
				Exit function 
			End If
		End If
	Next
	functionend "ButtonsSearch"
End Function

Function ButtonsList_Obsolete(byval viewname, byval highlight)
	functionstart "ButtonsList" & " " & viewname 
	Set chld=Description.Create
	chld("micclass").value = "UIAButton"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld)
	WriteToLogFile  "buttons num: " & chldcln.count
	For num = 0 to chldcln.count-1
		bname = chldcln(num).GetRoProperty("name")
		If highlight Then
			chldcln(num).highlight
		End If
		names=names & ";" & bname
	Next
	Set objRegExp = New RegExp
	objRegExp.Pattern = "[^a-z0-9]"
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	names = objRegExp.Replace(names, "")
	WriteTologfile names: ButtonsList=names
	functionend "ButtonsList"
End Function

Function EditBOX_o (byval name, byval highlight, byref vlu, byval details, byval validate)
	highlight=true
	functionstart "EditBOX" & " " & name  & " " & details
	vluexpected = vlu
	Set chld=Description.Create
	chld("micclass").value = "UIAEdit"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld): wait_custom "fixed10"
	For num = 0 to chldcln.count-1
		bname= chldcln(num).GetRoProperty("name")
		If highlight Then
				chldcln(num).highlight
		end if
		If IsNumeric(name) Then
			If name=num Then
				vlu = chldcln(num).GetRoProperty("value")
				WriteToLogfile bname
				boxfound=true
				Exit for
			End If
		else
			If name=bname Then
				vlu = chldcln(num).GetRoProperty("value")
				boxfound=true
				Exit for
			End If
		End If
	Next
	If validate and boxfound Then
		If vluexpected=vlu Then
			ValidationSucceeded name, vlu  
		else
			ValidationFailed name, 	vluexpected & "!=" & vlu	
		End If
	elseIf not boxfound Then
		ValidationFailed name, "edit box not found"	
	End If
	functionend "EditBOX"
End Function

Function EditBOX(byval name, byval highlight, byref vlu, byval details, byval validate)'BVD IP Address BVD IP Address
	'highlight=true
	functionstart "EditBOX" & " " & name  & " " & details
	vluexpected = vlu
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects: wait_custom "fixed10"
	For num = 0 to chldcln.count-1
		If chldcln(num).GetROProperty("Class Name")="UIAEdit" Then
		   	Set obj = chldcln(num)
		   	bname= obj.GetRoProperty("name")
			If highlight Then
					obj.highlight
			end if
			If IsNumeric(name) Then
				If name=n Then
					vlu = obj.GetRoProperty("value")
					WriteToLogfile bname
					boxfound=true: 	Set EditBOX=obj
					Exit for
				End If
			else
				If name=bname Then
					vlu = obj.GetRoProperty("value")
					boxfound=true: 	Set EditBOX=obj
					Exit for
				End If
			End If
			n=n+1
		End If
	Next

	If validate and boxfound Then
		If vluexpected=vlu Then
			ValidationSucceeded name, vlu  
		else
			ValidationFailed name, 	vluexpected & "!=" & vlu	
		End If
	elseIf not boxfound Then
		ValidationFailed name, "edit box not found"	
	End If
	functionend "EditBOX"
End Function


Function EditControllerCardGMG(byval name, byval evalue)
	Select Case name
		Case "Extension"
			clickfromconfig 100, 205
		Case "Delay"
			clickfromconfig 100, 230
	End Select
	wait_custom 1: ClearTextBoxAll(): wait_custom 1
	SendkeysShell evalue, 1
End Function

Function EditBoxEdit(byval name, byval highlight, byval texts, byref etext,  byval clickit, byval descript)
	functionstart "EditBoxEdit" & " " & name & " " & texts & " " & descript
	Set chld=Description.Create
	chld("micclass").value = "UIAEdit"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld)
	For num = 0 to chldcln.count-1
		If highlight Then
			chldcln(num).highlight
		end if
		bname = chldcln(num).GetRoProperty("name")
		If IsNumeric(name) Then
			If name=num Then
				etext=chldcln(num).GetROProperty ("text")
				if etext="" Then
					chldcln(num).refresh: wait_custom 3: etext=chldcln(num).GetROProperty ("text")
				end if
				xt=chldcln(num).GetROProperty ("abs_x")
				yt=chldcln(num).GetROProperty ("abs_y")
				If clickit Then
						mouseclick xt+3, yt+3, false
						If texts<>"" Then
							ClearTextBoxAll(): wait_custom 1
							SendkeysShell texts, 1
						End If
				End If
				Exit for
			End If
		else
			If name=bname Then
				etext=chldcln(num).GetROProperty ("text")
				if etext="" Then
					chldcln(num).refresh: wait_custom 3: etext=chldcln(num).GetROProperty ("text")
				end if
				If clickit Then
					xt=chldcln(num).GetROProperty ("abs_x")
					yt=chldcln(num).GetROProperty ("abs_y")
					mouseclick xt+3, yt+3, false
					If texts<>"" Then
						ClearTextBoxAll(): wait_custom 1
						SendkeysShell texts, 1
					End If
				End If
				Exit for
			End If
		End If
	Next
	functionend "EditBoxEdit"
End Function

Function DropdownList(byval name, byval highlight, byref details, byval clickit, byref objd)
	functionstart "DropdownList" & " " & name  & " " & details
	Set chld=Description.Create
	chld("micclass").value = "UIAComboBox"
	Set chldcln = UIAWindow("Sensys Networks TrafficDOT").ChildObjects(chld)
	For num = 0 to chldcln.count-1
		If highlight Then
				chldcln(num).highlight
		end if
		bname = chldcln(num).GetRoProperty("name")
		If IsNumeric(name) Then
			If name=num Then
				If details="get_value" Then
					details= chldcln(num).GetRoProperty("value")
				End If
				Set itms=chldcln(num).GetItems
				For rowCount = 1 To itms.Count
					iname=(itms.item(rowCount))
					inames=inames & iname 	
				Next
				If clickit Then
					chldcln(num).Click
				End If
				Exit for
			End If
		else
			If name=bname Then
				If details="get_value" Then
					details= chldcln(num).GetRoProperty("value")
				End If
				Set itms=chldcln(num).GetItems
				For rowCount = 1 To itms.Count
					iname=(itms.item(rowCount))
					inames=inames & iname 	
				Next
				If clickit Then
					chldcln(num).Click
				End If
				Exit for
			End If
		End If
	Next
	Set objd = chldcln(num)
	Set objRegExp = New RegExp
	objRegExp.Pattern = "[^a-z0-9]"
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	inames = objRegExp.Replace(inames, "")
	DropdownList=inames
	functionend "DropdownList:" & " " & inames
End Function


Function ApplyEMEA_Micro
	functionstart "ApplyEMEA_Micro"
	Clickfromconfig 15, 349: wait_custom 5
	functionend "ApplyEMEA_Micro"
End Function

Function ApplyEMEA_Gen_Micro
	functionstart "ApplyEMEA_Gen_Micro"
	Clickfromconfig 20, 375: wait_custom 5: BVDipaddress
	functionend "ApplyEMEA_Gen_Micro"
End Function

Sub ApplyEMEA (byref iTry)
	Apply_button: exit sub
	functionstart "ApplyEMEA"
	set obj = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply_EMEA")
	if obj.Exist then
		obj.Click: wait_custom 1
	Else
		iTry=iTry+1
		if iTry<3 then
	 		ApplyEMEA iTry
	 	else
	 		ExitRun
	 	end if
	end If
	If UIAWindow("Sensys Networks TrafficDOT").UIAObject("Please Apply or Revert").Exist then
		ActivateOKbutton (): wait_custom 3
		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply_EMEA").Click: wait_custom 1
	End If
	functionend "ApplyEMEA"
End Sub

Sub HideLog()
	If not hide_log Then
		Exit sub
	End If
	functionstart "HideLog"
	Clickfromconfig 461, 650: hide_log=false
	functionend "HideLog"
End Sub

Sub ChangeSensitivity(byref name, byval microradar, byval enforcechange)
	WriteToLogfile "ChangeSensitivity>input started>suggested sensitivity: " & name
	hide_log=true
	if not microradar then
		If global_sensitivity = "Count" Then
			name="Count"
		ElseIf global_sensitivity = "Scoot/Mova" Then
			name="Scoot/Mova"
		elseif global_sensitivity="Other" Then
			name = "Wide SB"
		End If
	end if
	If microradar Then 
		label="Microradar setting: ": SensitivitySet label & name
		Set obj= UIAWindow("Sensys Networks TrafficDOT").UIAObject("Microradar setting")
	else
		label="Current Sensitivity: ": SensitivitySet label & name
		Set obj= UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensitivity Sensor")
	End If 
	If enforcechange Then
		If obj.Exist then
			If instr(obj.GetROProperty("name"), name)>0 Then
				If microradar Then
					name = "Sm Bike Zone"
				else
					if global_sensitivity="Other" Then
						name = "Narrow SB"
					else
						name = "Wide SB"
					end if
				End If		
			End If
		End If
	End If
	WriteToLogfile "ChangeSensitivity>input complete>sensitivity to be set: " & name
	functionstart "ChangeSensitivity" & " to " & name
	If dot_id<>"" Then y_plus=32
	ClickFromConfig 143, 151+y_plus
	If global_sensitivity="Scoot/Mova" Then
		Select Case name
			Case "Normal SB", "Radar SB"
				n=1
			Case "Narrow SB", "Bike Count"
				n=2
			Case "Wide SB", "Sm Bike Zone"
				n=3
			Case  "Scoot/Mova", "Lg Bike Zone"
				n=4
		End Select
	elseif global_sensitivity="Count" Then
		Select Case name
			Case "Count", "Radar SB"
				n=1
			Case "Normal SB", "Bike Count"
				n=2
			Case "Narrow SB", "Sm Bike Zone"
				n=3
			Case  "Wide SB", "Lg Bike Zone"
				n=4
			End Select
	elseif global_sensitivity="Other" then
		Select Case name
			Case "Normal SB", "Radar SB"
				n=1
			Case "Narrow SB", "Bike Count"
				n=2
			Case "Wide SB", "Sm Bike Zone"
				n=3
			Case  "Lg Bike Zone"
				n=4
		End Select
	end if
	SendKeysShellTimes "{UP}", 5, 1
	SendKeysShellTimes "{DOWN}", n, 1
	SendKeysShell "{ENTER}", 1
	SensitivitySet label & name
	functionend "ChangeSensitivity" & " " & name
End Sub

Sub TramNearByChange(byref mode)
	functionstart "TramNearByChange" & " " & mode
	Repository.Value("tram_nearby")="Tram Nearby: " & mode
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Tram Nearby: Off")
	If obj.Exist Then
		mode="Off"
	End If
	If dot_id<>"" Then y_plus=32
	ClickFromConfig 110, 333+y_plus
	Select Case mode
		Case "On"
			n=2
		Case "Off"
			n=1
	End Select
	SendKeysShellTimes "{DOWN}", n, 1: SendKeysShell "{ENTER}", 1: hide_log=true
	functionend "TramNearByChange" & " " & mode
End Sub

Sub ActivateRepeater (byval xx, byval yy)
	functionstart "ActivateRepeater"
	If xx="" Then
		UIAWindow("Sensys Networks TrafficDOT").UIAObject("Repeater").Click
	else
		mouseClick xx+5, yy+5, false
	End If
	functionend "ActivateRepeater"
End Sub

Sub ActivateObjectOnMap (byval objtype, byval xx, byval yy)
	functionstart "ActivateObjectOnMap " & objtype
	mouseClick xx, yy, false: wait_custom 1
	functionend "ActivateObjectOnMap"
End sub

function ActivateObject (byval obj)
	functionstart "ActivateObject"
	ActivateObject=true
	If obj.Exist Then
		obj.Click: wait_custom 1
	else
		notfound="not found"
		ActivateObject=false		
	End If
	functionend "ActivateObject" & " " & notfound
End function

Function ActivateTD2Button(byval buttonName)
	If main_form_on Then
		ActivateSTD2_button (buttonName) : exit Function
	End If
	functionstart "ActivateTD2Button" & " " & buttonName
	Repository.Value("buttonName")=buttonName
	set objb = UIAWindow("TrafficDOT 2").UIAButton("td2_button")
	if objb.Exist then
		objb.Click: wait_custom 1
	end if
	functionend "ActivateTD2Button"
End Function

Function ActivateButton(byval buttonName)
	functionstart "ActivateButton" & " " & buttonName:	ActivateButton=-1
	Click_button buttonName, objb, true,  true
	If objb.Exist Then
		ActivateButton=1: wait_custom 3
		buttonstillthere = Click_button (buttonName, objb1, false, false)
		If buttonstillthere and buttonName="OK" Then
			ActivateButton buttonName: exit function
		End If
		functionend "ActivateButton": exit function
	end if
	ActivateButton=1
	Repository.Value("buttonName")=buttonName
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Button_Generic")
	If obj.Exist Then
		obj.Click: wait_custom 3: ActivateButton=1: wait_custom 3
		Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Button_Generic")
		If obj1.Exist and buttonName="OK" Then
			ActivateButton buttonName: exit function
		End If
	End If
	functionend "ActivateButton"
End Function

Function DragButton(byval buttonName)
	functionstart "DragButton" & " " & buttonName
	Repository.Value("buttonName")=buttonName: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Button_Generic").Drag: wait_custom 1
	functionend "DragButton"
End Function

Function DropOnMap()
	functionstart "DropOnMap"
	UIAWindow("Sensys Networks TrafficDOT").Drop: wait_custom 1
	functionend "DropOnMap"
End Function

Function RadioButtonSelect(byval buttonName)
	functionstart "RadioButtonSelect" & " " & buttonName
	UIAWindow("Sensys Networks TrafficDOT").UIARadioButton(buttonName).Click: wait_custom 3
	functionend "RadioButtonSelect"
End Function

Function UIListTable(byval listname)
	functionstart "UIListTable" & " " & listname
	Set UIListTable = UIAWindow("Sensys Networks TrafficDOT").UIAList(listname)
	functionend "UIListTable"
End Function

Function UIEdit(byval controlname, byval stext)
	functionstart "UIEdit" & " " & controlname & " " & stext
	Set UIEdit = UIAWindow("Sensys Networks TrafficDOT").UIAEdit(controlname)
	UIEdit.Type stext
	functionend "UIEdit"
End Function

Function UIObject(byval objectname)
	functionstart "UIObject" & " " & objectname
	Set UIObject = UIAWindow("Sensys Networks TrafficDOT").UIAObject(objectname)
	functionend "UIObject"
End Function

Function UIBtnSTD2(byval name)
	functionstart "UIBtnSTD2" & " " & name
	Repository.Value("buttonName")=name
	Set UIBtnSTD2 =UIAWindow("STD2").UIAButton("UIButton")
	functionend "UIBtnSTD2"
End Function

Function UIButtonTD2(byval name)
	If main_form_on Then
		ActivateSTD2_button (name) : exit Function
	End If
	functionstart "UIButtonTD2" & " " & name
	Repository.Value("buttonName")=name
	Set UIButtonTD2 = UIAWindow("TrafficDOT 2").UIAButton("td2_button")
	functionend "UIButtonTD2"
End Function

Function UIButton(byval name)
	functionstart "UIButton" & " " & name
	Repository.Value("buttonName")=name
	Set UIButton = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Button_Generic")
	functionend "UIButton"
End Function

Function UITab(byval name)
	functionstart "UITab" & " " & name
	Repository.Value("tab_name")=name
	set UITab = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Tab_Generic")
	functionend "UITab"
End Function

Function TabPress(byval tname)
	functionstart "TabPress" & " " & tname
	set obj = UIAWindow("Sensys Networks TrafficDOT").UIATab(tname)
	if obj.Exist then 
		obj.Click
	else
		notfound="not found"
	end if
	functionend "TabPress" & " " & notfound
End Function

Function ItemsPress(byval tname, byval iname)
	functionstart "ItemsPress" & " " & tname & ":" & iname
	set obj = UIAWindow("Sensys Networks TrafficDOT").UIATab(tname).UIAObject(iname)
	if obj.Exist then 
		obj.Click
	else
		notfound="not found"
	end if
	functionend "ItemsPress" & " " & notfound
End Function

Function UIRadioTab(byval name)
	functionstart "UIRadioTab" & " " & name
	Repository.Value("tab_name")=name
	set UIRadioTab = UIAWindow("Sensys Networks TrafficDOT").UIATab("Radio_Tab").UIAObject("SPP-0")
	functionend "UIRadioTab"
End Function

Function ValidateRadioTab (byval name)
	functionstart "ValidateRadioTab" & " " & name
	Set obj = UIRadioTab(name)
	If obj.Exist Then
		ValidationSucceeded  "ValidateRadioTab", name
	else
		ValidationFailed "ValidateRadioTab", "tab not found" & " " & name
	End If
	functionend "ValidateRadioTab"
End Function

Function UISysConfigTab(byval name)
	functionstart "UISysConfigTab" & " " & name
	Repository.Value("tab_name")=name
	set UISysConfigTab = UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_Sys_Config").UIAObject("SysConfigsTabs")
	functionend "UISysConfigTab"
End Function

Function ValidateSysConfigTab (byval name)
	functionstart "ValidateSysConfigTab" & " " & name
	Set obj = UISysConfigTab(name)
	If obj.Exist Then
		ValidationSucceeded  "ValidateSysConfigTab", name
	else
		ValidationFailed "ValidateSysConfigTab", "tab not found" & " " & name
	End If
	functionend "ValidateSysConfigTab"
End Function

Function ValidateTab (byval name)
	functionstart "ValidateTab" & " " & name
	Set obj = UITab(name)
	If obj.Exist Then
		ValidationSucceeded  "ValidateTab", name
	else
		ValidationFailed "ValidateTab", "tab not found" & " " & name
	End If
	functionend "ValidateTab"
End Function

Function ValidateTabAndXY (byval name, byref x, byref y)
	functionstart "ValidateTabAndXY" & " " & name
	Set obj = UITab(name)
	If obj.Exist Then
		ValidationSucceeded  "ValidateTab", name
		x= obj.GetROProperty("x")
		y= obj.GetROProperty("y")
	else
		ValidationFailed "ValidateTabAndXY", "tab not found" & " " & name
	End If
	functionend "ValidateTabAndXY"
End Function


Function VerifyControl (byval ctype, byval name, byref activate)
	functionstart "VerifyControl" & " " & ctype & " " & name
	Select Case ctype
		Case "button"
			Set obj = UIButton(name)
	End Select
	If obj.Exist Then
		ValidationSucceeded  "VerifyControl", name
		If activate Then
			obj.Click
		End If
	else
		If activate=10 Then
			ValidationFailed "VerifyControl", ctype & " not found" & " " & name
		End If
		OOPS "VerifyControl", tryid: VerifyControl ctype, name, activate: activate=10: exit function
	End If
	functionend "VerifyControl"
End Function

function ActivateController(byval name, byval x_c, byval y_c)
	functionstart "ActivateController" & " " & name & " " & x_c & " " & y_c
	if instr (1, controller_type, "FlexConnect")>0 Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_FL")
	Elseif instr (1, controller_type, "IP address")>0 Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_APGI")
	Elseif instr (1, controller_type, "Card V")>0 Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_APGI")
	Elseif instr (1, controller_type, "VCC")>0 Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_VCC")
	elseif instr (1, controller_type, "Controller")>0 Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID")
	End If
	If x_c="" Then
		wait_custom 3: obj.Click
	else
		mouseClick x_c-7, y_c+5, false
	End If
	Set ActivateController = obj
	functionend "ActivateController"
End function

function EMEAinitPopup()
	functionstart "EMEAinitPopup"
	EMEAinitPopup=0:main_form_on=false
	set obj = UIAWindow("TrafficDOT 2").UIAObject("Upload the csv file containing")
	set obj1 = UIAWindow("TrafficDOT 2").UIAObject("CannotContinueEMEA")
	If obj.Exist Then
		emessage=obj.GetROProperty("name")
		UploadSucceededCsv true, true: wait_custom "fixed7"
		UIButtonTD2("Reboot").Click: wait_custom "fixed25"
		EMEAinitPopup=1
	ElseIf obj1.Exist Then
		emessage=obj1.GetROProperty("name")
		UIButtonTD2("OK").Click: wait_custom 3
		UIButtonTD2("Reboot").Click: wait_custom "fixed25"
		EMEAinitPopup=1
	end if
	functionend "EMEAinitPopup" & " " & EMEAinitPopup & " " & emessage
end function

function UploadCvsfile (byval template, byval tfile)
	UploadCvsfile=0
	If role_last<>"EMEA" Then
		Exit function
	elseif upload_no Then
		Exit function
	End If
	wait_custom "7_fixed"
	If template Then
		tfile="Template"
	End If
	functionstart "UploadCvsfile" & " " & tfile
	wait_custom "fixed5"
	set obj = UIAWindow("TrafficDOT 2").UIAObject("Upload the csv file containing")
	If obj.Exist Then
		If  file_deleted then
			uploadcode=UploadSucceededCsv (template, true)
		else
			uploadcode=UploadSucceededCsv (template, false)
		End If
	else
		Do  while not obj.Exist
			counter=counter+1
			set obj = UIAWindow("TrafficDOT 2").UIAObject("Upload the csv file containing")
			If counter>20 Then
				ValidationFailed "UploadCvsfile", "no dialog found"
				uploadcode=-1: UploadCvsfile=uploadcode
				functionend "UploadCvsfile" & " " & uploadcode
				Exit function
			End If
		loop
		If  file_deleted then
			uploadcode=UploadSucceededCsv (template, false)
		else
			uploadcode=UploadSucceededCsv (template, true)
		End If
	End If
	UploadCvsfile=uploadcode
	functionend "UploadCvsfile" & " " & uploadcode
End function

Function UploadSucceededCsv (byval template, byval nopref)
	If template Then
		stemplate="default template"
	else
		filepath=CONFIG_EMEA + config_file
	End If
	functionstart "UploadSucceededCsv" & " " & stemplate
	If template Then
		If file_deleted Then
			ActivateTD2Button "Choose file (.csv) Start new config"
		else
			ActivateTD2Button   "Choose file (.csv) Clear current config"
		End If
		wait_custom 3: ActivateTD2Button "Apply": wait_custom "fixed10"
		okb=false
		Do  while not okb
			Set okbut = UIButtonTD2("OK")
			If okbut.Exist Then
				wait_custom 3: okbut.click: wait_custom "fixed10": okb=true
				If nopref Then
					UploadSucceededCsv=4
				else
					EMEAPreffernces false, "", false: before_new_build=true
					UploadSucceededCsv=1
				End If
			End If
		Loop 
	else
		ActivateTD2Button "Choose file (.csv) Load new config"
		FileUpload "Choose file", filepath, "Open", true, "TrafficDOT 2"
		wait_custom 3: ActivateTD2Button "Apply": wait_custom 3
		global_sensitivity="Other"
		mapping_choice="cc"
		Do  while not okb
			Set okbut = UIButtonTD2("OK")
			If okbut.Exist Then
				wait_custom 3: okbut.click: wait_custom "fixed10"
				UploadSucceededCsv=1
				Exit do
			End If
		Loop 
	End If
	functionend "UploadSucceededCsv" & " " & UploadSucceededCsv
End Function

Sub UnmapRepeater (byval name, byval x_r, byval y_r, byval confirmMessage, byval childexpected, byval whattodo)
	functionstart "UnmapRepeater" & " " & name
	ActivateRepeater x_r, y_r: wait_custom 5
	If whattodo<>"" Then
		click_button whattodo, objbtn, true, false
	else
		clickfromconfig 6, 243: wait_custom 1' Delete Repeater
	End If
	If childexpected Then
		ValidateTopographyDependencies "Repeater " & name: functionend "UnmapRepeater": exit sub
	End If	
	str=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will delete").GetROProperty("name")
	assertStringPartialStatus str, confirmMessage, "UnmapRepeater", confirmMessage
	ActivateYesButton: wait_custom 3	
	functionend "UnmapRepeater"
End Sub

Sub UnmapController (byval name, byval confirmMessage, byval skip, byval childexpected, byval x_c, byval y_c)
	functionstart "UnmapController" & " " & name
	If skip Then
		functionend "UnmapController"
		Exit sub
	End If
	ActivateController name, x_c, y_c: wait_custom 5
	click_button "Unmap", obju, true, false
	'ActivateUnmapButton: wait_custom 1
	If childexpected Then
		ValidateTopographyDependencies "Controller " & name: functionend "UnmapController": exit sub
	End If	
	str=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will remove").GetROProperty("name")
	assertStringPartialStatus str, confirmMessage, "UnmapController", confirmMessage
	ActivateYesButton: wait_custom 3	
	functionend "UnmapController"
End Sub

Function RepeaterUnmapMessage(byval repeater)
	functionstart "RepeaterUnmapMessage" & " " & repeater
	RepeaterUnmapMessage="Choosing " &  "'Yes'" & " will remove the " &_
		"following Repeater from the map: " & repeater
	functionend "RepeaterUnmapMessage"
End Function

Function ControllerUnmapMessage(byval controller)
	functionstart "ControllerUnmapMessage" & " " & controller
	ControllerUnmapMessage="Choosing " & "'Yes'" & " will remove this " & _
			"Controller Interface, " & controller & _
			", from the map. It will reappear in the tray."
	functionend "ControllerUnmapMessage"
End Function

Function Test_TextBoxAdd (byval name, byval x1, byval y1, byval sizex, byval sizey, byval textEdit)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_TextBoxAdd=0	 

		if TrafficDotLogin(name, repeat, false)<0 then 
			exit function
		ElseIf repeat=1 Then
			Test_TextBoxAdd  name, x1, y1, sizex, sizey, textEdit: exit function
		end if
		
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Edit")

		DragTextBox x1, y1: wait_custom 3: SizeAndRotateObject "Text Box", obj, true, sizex, sizey, false, 0: wait_custom 1
		
		EditTextBox obj, textEdit : wait_custom 3
		
		ChangeFontStyle false, "italic": wait_custom 3: ChangeFontSize false, 10: wait_custom 3
		
		printscreen name: wait_custom 3
		
		CheckBox "Text",  "Text is Editable:", "off", false
		CheckBox "Text", "Show Border:", "off", false
		CheckBox "Text", "Transparent Background:", "on", false
		
		ApplyChanges: wait_custom 3

		ChangeFontStyle false, "normal": wait_custom 3: ChangeFontSize false, 20: wait_custom 3
		
		EditBoxValidate obj, textEdit, false, 0: wait_custom 1
		
		printscreen name: wait_custom 3
		
		CheckBox "Text",  "Text is Editable:", "on", false
		CheckBox "Text", "Show Border:", "on", false
		CheckBox "Text", "Transparent Background:", "off", false
		
		RevertChanges: wait_custom 3
			
		UnmapTextBOX TextBoxDeleteConfirmMessage, "", "": wait_custom "fixed7"
		
		SystemSave "Don't Save", false, true
		
		If(Err.Number<>0) or test_failed then
			ValidationFailed name, Err.Description
			Test_TextBoxAdd = 1		
		End If	
		TestFinished Err.Description, name
End Function

Function ActivateSensorInTheTray(byval sensorName)
	functionstart "ActivateSensorInTheTray" & " " & sensorName
	set obj = VerifyList ("Sensor", sensorName, false)
	obj.Click: wait_custom 5
	functionend "ActivateSensorInTheTray"
End Function

Function ActivateSingleSensor (byval sensorName, byval x, byval y)
	functionstart "ActivateSingleSensor"
	If x<>"" Then
		mouseClick x, y, false
	else
		UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorID").Click
	End If
	functionend "ActivateSingleSensor"
End Function

Function ActivateSensorZone (byval zoneName, byval xaz, byval yaz)
	functionstart "ActivateSensorZone" & " " & zoneName
	If zoneName<>"" Then
		Repository.Value("sensorZoneName")=zoneName
		Repository.Value("UseNewZone")="Use new (" & zoneName & ")"
	End If
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone")
	If xaz<>"" Then
		mouseClick xaz, yaz, false
	else
		If obj.Exist Then
			wait_custom 1: obj.Click: wait_custom 1
		End If
	End If
	If obj.Exist Then
		x_sensorzone=obj.GetROProperty("x")
		y_sensorzone=obj.GetROProperty("y")
	else
		x_sensorzone="???": y_sensorzone="???"
	End If
	functionend "ActivateSensorZone" & " " & x_sensorzone & " " & y_sensorzone
End Function
	
Function TextBoxOptions(byval name, byval apply)
	functionstart "TextBoxOptions" & " " & name
	Select Case name
		Case "Show Border"
			UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Show Border:").Click
		Case "Transparent Background"
			UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Transparent Background:").Click
		Case "Text is Editable"
			UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("Text is Editable:").Click
	End Select
	if apply then ApplyChanges
	functionend "TextBoxOptions"
End Function

Function ChangeFontStyle (byval click, byval style)
	functionstart "ChangeFontStyle" & " " & style
	if click then UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Edit").Click: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("Font Style:").Click: wait_custom 1
	SendKeysShellTimes "{UP}", 3, 1
	Select Case style
		Case "normal"
			SelectItem 0
		Case "italic"	
			SelectItem 1
	End Select
	wait_custom 3: ApplyChanges
	functionend "ChangeFontStyle"
End Function

Function ChangeFontSize (byval click, byval intSize)
	functionstart "ChangeFontSize" & " " & intSize
	if click then UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Edit").Click: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("Font Size:").Click: wait_custom 1
	SendKeysShellTimes "{UP}", 7, 1
	Select Case intSize
		Case 8
		Case 10
			SelectItem 1
		Case 12
			SelectItem 2
		Case 14
			SelectItem 3
		Case 16
			SelectItem 4
		Case 18
			SelectItem 5
		Case 20	
			SelectItem 6
	End Select
	wait_custom 3: ApplyChanges
	functionend "ChangeFontSize"
End Function

Sub EditBoxValidate (byval obj, byval strtext, byval dynamicobj, byval validationnumber)
	functionstart "EditBoxValidate" & " " & strtext: highlight=false
	If dynamicobj Then
		set collections = UIAWindow("Sensys Networks TrafficDOT").ChildObjects
		For iii=0 to collections.count -1
			If collections(iii).GetROProperty("Class Name")="UIAEdit" Then
				If highlight Then
	   				collections(iii).highlight
				End If
				if itemsnumber=validationnumber then
					strruntime = collections(iii).GetROProperty("value"): exit for
				else
					alltexts=alltexts & "," & collections(iii).GetROProperty("value")
					WriteToLogFile alltexts
				end if
				itemsnumber=itemsnumber+1
			End If
		Next
	else
		strruntime=obj.GetROProperty("value")
	End If
	assertStringEquals lcase(strtext), lcase(strruntime), "EditBoxValidate", ""
	functionend "EditBoxValidate"
End Sub

Function EditTextBox (byval obj, byval stringT)
	functionstart "EditTextBox"
	obj.Click: wait_custom 1: 
	obj.Type stringT: : wait_custom 3
	functionend "EditTextBox"	
End Function

Function SizeAndRotateObject (byval name, byval obj, byval clickon, byval pixnumx, byval pixnumy, byval rotate, byval rpoint)
	functionstart "SizeAndRotateObject" & " " & name & " " & pixnumx
	
	if clickon then obj.Click: wait_custom 3
	
	If obj.Exist Then
	else
		If try_num <3 Then
			try_num=try_num+1
			SizeAndRotateObject name, obj, clickon, pixnumx, pixnumy, rotate, rpoint
		else
			functionend "SizeAndRotateObject"
			Exit function
		End If	
	End If
	
	x_x=obj.GetROProperty("abs_x"): y_y=obj.GetROProperty("abs_y")
	w=obj.GetROProperty("width"): 	h=obj.GetROProperty("height")
	
	print x_x
	print y_y
	print w
	print h
	print y_y+h
	
	If rotate Then
		If rpoint<0 Then
			mouseGrabAndDrop x_x+w/2, y_y+rpoint, pixnumx, pixnumy: wait_custom 8 'rotate
		ElseIf rpoint>0 Then
			mouseGrabAndDrop x_x+w+rpoint, y_y+h/2, pixnumx, pixnumy: wait_custom 8 'rotate
		End If
	else
		mouseGrabAndDrop x_x, y_y+h, pixnumx, pixnumy: wait_custom 3 ' size
	End If

	functionend "SizeAndRotateObject"
End Function


Function SizeObjectPix (byval name, byval obj, byval clickon, byval pixnumx, byval pixnumy, byref xn, byref yn, byref wn, byref hn)
	functionstart "SizeObjectPix" & " " & name & " " & pixnumx & " " & pixnumy
	if clickon then obj.Click: wait_custom 3
	x_x=obj.GetROProperty("abs_x")
	y_y=obj.GetROProperty("abs_y")
	w=obj.GetROProperty("width")
	h=obj.GetROProperty("height")
	mouseGrabAndDrop x_x+w, y_y, pixnumx, pixnumy: wait_custom 3 ' size
	xn=obj.GetROProperty("abs_x")
	yn=obj.GetROProperty("abs_y")
	wn=obj.GetROProperty("width")
	hn=obj.GetROProperty("height")
	functionend "SizeObjectPix" & "->" & xn & yn & wn & hn
End Function

Function ExtraSensorZoneCheck
	
	if role_c="EMEA" or env_role="EMEA" or init_table_view_on  Then
		ExtraSensorZoneCheck = -1
		exit function
	End If 
	
	functionstart "ExtraSensorZoneCheck"
	ExtraSensorZoneCheck = 0
	
	extrasz=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Extra sensor zone detected.").Exist
	
	If extrasz Then
		text=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Extra sensor zone detected.").GetROProperty("name")
		zoneName = Mid(text, InStr(text, ":")+1,7)
	else
		ExtraSensorZoneCheck = -1
		functionend "ExtraSensorZoneCheck"
		Exit Function
	End If
	
	Repository.Value("sensorZoneName")=zoneName
	Repository.Value("UseNewZone")="Use new (" & zoneName & ")"
	
	ActivateOKbutton: wait_custom 5
	DragSensorZone "Sensor Zone EB", -250, 260, xx, yy, ww, hh,tryid: wait_custom 7: SensorZoneTypeChange "Speed", false: wait_custom 5

	ChangeZoneName zoneName: wait_custom 1: ApplyAndUnmapAndSave: wait_custom 3
	functionend "ExtraSensorZoneCheck"
End Function

Sub DragTextBox (byval x1, byval y1)
	functionstart "DragTextBox"
	If role_c="EMEA" or role_c="Stop Bar" Then
		xx=ShowLogsGetX
		yy=ShowLogsGetY
	else
		xx=GenericButtonXGet("Fullscreen")
		yy=GenericButtonYGet("Fullscreen")
	End If
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Txt").Drag:wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").Drop xx+x1,yy+y1
	functionend "DragTextBox"
End Sub

Function Test_DragDropZoneAndSensorNew(byval name, byval TrafficZone, byval ZoneType, byval qq, byval zz, byval adjust)

		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if: Test_DragDropZoneAndSensorNew=0	 
		
		number_of_dot_pairs="1"
		
		if TrafficDotLogin(name, repeat, false)<0 then exit function
		
		zoneName= DragSensorZone (TrafficZone, qq, zz, xx, yy, ww, hh,tryid): wait_custom 7: SensorZoneTypeChange ZoneType, false: wait_custom 5
		
		Dim aExpected(5): Dim aRuntime()
		
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAComboBox("SensorTypeSelect")
		Set itms=obj.GetItems: ReDim aRuntime(itms.Count-1)
		
		For rowCount = 1 To itms.Count
			itmname=(itms.item(rowCount))
			aRuntime(rowCount-1)=itmname	
		Next
		
		aExpected(0)="Select..."
		aExpected(1)="Count"
		aExpected(2)="Microradar"
		aExpected(3)="Speed"
		aExpected(4)="Stop Bar"
		aExpected(5)="Travel Time"
	
		DropdownVerify aExpected, aRuntime, "Sensor Zone Type"
	
		ApplyChanges: wait_custom 3
		
		xx=GetSensorZoneProperty("x"): yy=GetSensorZoneProperty("y"): ww=GetSensorZoneProperty("width")
	
		sensorName="005E": Repository.Value("sensorListName")=sensorName
		sensorName1=sensorName: xx=adjust+xx+ww/2
		
		DragNewSensor sensorName, xx, yy, sensorName: wait_custom 2: SensorVerticalPositionChange 2, true
		
		UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab").UIAObject("Adv").Click: wait_custom 3

		x1= SensorNewAbsXGet: y1= SensorNewAbsYGet: w1= SensorNewWidthGet
		
		sensorName="006E": Repository.Value("sensorListName")=sensorName
		sensorName2=sensorName
		
		DragNewSensor sensorName, xx-adjust, yy, sensorName: wait_custom 2: SensorVerticalPositionChange 1, true
		
		mouseClick x1+w1/2, y1+w1/2, true: wait_custom 1 'apply SHIFT to select both sensors
	
		tempofflinemode=offline_mode
		
		offline_mode=false: VehicleLengthAndSeparation 2, 6: wait_custom 3: ApplyChanges: offline_mode=tempofflinemode: wait_custom 3
		
		TrafficDotSave SaveDOTPairMessage1(), SaveDOTPairMessage2(),"Yes", false, true, true:wait_custom 5
	
		printscreen name: wait_custom 3
		
		ForcefocusOnSensorZone 3: wait_custom 3
		
		DeleteSensor sensorName1, _
				null, SensorDeleteConfirmMessage(sensorName1), x1+w1/2, y1+w1/2: wait_custom 3
	
		DeleteSensor sensorName2, _
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor null"), _
				SensorDeleteConfirmMessage(sensorName2), "", ""	: wait_custom "fixed7"

		UnmapSensorZone zoneName, SensorZoneDeleteConfirmMessage(zoneName), false, false, "Yes"
		
		wait_custom "fixed7": SystemSave "Save_2", false, true: number_of_dot_pairs="0"
		
		If(Err.Number<>0)  or test_failed Then
			ValidationFailed testcasename, Err.Description
			Test_DragDropZoneAndSensorNew = 1 'ExitTest		
		End If
				
		TestFinished Err.Description, name
End Function

Function DropdownVerify (byval aExpected, byval aRuntime, byval drname)
	functionstart "DropdownVerify" & " " & drname
	if CompareArrays (aExpected, aRuntime)=0 then
		ValidationSucceeded "DropdownsVerify",  drname
	else
		ValidationFailed "DropdownVerify", "no match for dropdown"  & " " & drname
	end if	
	functionend "DropdownVerify"
End Function



Function ListSearchRightNew(byval name, byval clickFactor, byref obj, byref iLeftSearch, byval iLeftTimes, byref iTry)
	functionstart "ListSearchRightNew" & " " & " " & name & " " & clickFactor
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
	ListSearchRightNew=0
	set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIAList("List")
	if obj1.Exist then
		GetObjectABSXYWH "List", obj1, xx, yy, hh, ww
	else
		if iTry<2 then
			iTry=iTry+1
			ListSearchRightNew name, clickFactor, obj, iLeftSearch, iLeftTimes, iTry
		else
			functionend  "ListSearchRightNew" & " " & err.description
			exit function
		end if
	end if
	If iLeftSearch<2 Then
		ListSearchLeft name, iLeftTimes, xx, yy, ww, hh: iLeftSearch=iLeftSearch+1
	End If
	wait_custom 3: counter=3
	If FindDevicesInTheList(name, true, objD, tryid) Then
		vis = objD.GetROProperty("abs_x")
		If vis<>0 Then
			ListSearchRightNew=1
			functionend "ListSearchRight"
			Exit function
		End If
	end if
	For n = 1 To clickFactor*4 Step 1
		mousePoint xx+ww-9, yy+hh-9: wait_custom 1
		mouseClick xx+ww-9, yy+hh-9, false: wait_custom 1
		If n=counter Then
				counter=counter+5
				If FindDevicesInTheList(name, true, objD, tryid) Then
					vis = objD.GetROProperty("abs_x")
					If vis<>0 Then
						ListSearchRightNew=1
						functionend "ListSearchRightNew"
						Exit function
					End If
				end if
		End If
	Next
	functionend  "ListSearchRightNew" & " " & err.description
End function

Function ListSearchRight(byval sname, byval clickFactor, byref obj, byref iLeftSearch, byval iLeftTimes, byref iTry)
	functionstart "ListSearchRight" & " " & sname & " " & clickFactor
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
	ListSearchRight=0
	set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIAList("List")
	if obj1.Exist then
		GetObjectABSXYWH "List", obj1, xx, yy, hh, ww
	else
		if iTry<2 then
			iTry=iTry+1
			ListSearchRight sname, clickFactor, obj, iLeftSearch, iLeftTimes, iTry: exit function
		else
			ListSearchRight=3
			functionend  "ListSearchRight" & " " & err.description
			exit function
		end if
	end if
	If iLeftSearch<2 Then
		ListSearchLeft sname, iLeftTimes, xx, yy, ww, hh: iLeftSearch=iLeftSearch+1
	End If
	wait_custom 3: counter=3
	If obj.Exist Then
		vis = obj.GetROProperty("abs_x")
		If vis<>0 Then
			ListSearchRight=1
			functionend "ListSearchRight" & " " & "found " & " " & sname
			Exit function
		End If
	end if
	For n = 1 To clickFactor*4 Step 1
		mousePoint xx+ww-9, yy+hh-9: wait_custom 1
		mouseClick xx+ww-9, yy+hh-9, false: wait_custom 1
		If n=counter Then
				counter=counter+5		
				If obj.Exist Then
					vis = obj.GetROProperty("abs_x")
					If vis<>0 Then
						ListSearchRight=1
						functionend "ListSearchRight" & " " & "found " & " " & sname
						Exit function
					End If
				end if		
		End If
	Next
	functionend  "ListSearchRight" & " " & err.description
End function

Sub ListSearchLeft(byval sname, byval clickFactor, byval xx, byval yy, byval ww, byval hh)
	functionstart "ListSearchLeft" & " " & sname & " " & clickFactor
	For n = 1 To clickFactor Step 1
		mousePoint xx+9, yy+hh-9: wait_custom 1
		mouseClick xx+9, yy+hh-9, false: wait_custom 1
	Next
	functionend "ListSearchLeft"
End Sub

Sub ForcefocusOnSensorZone (byval adjustNumOfPixels)
	functionstart "ForcefocusOnSensorZone"
	xx=GetSensorZoneProperty("x")
	yy=GetSensorZoneProperty("y")
	mouseClick xx+adjustNumOfPixels, yy+adjustNumOfPixels, false
	functionend "ForceSensorOnSensorZone"
End Sub

Sub VehicleLengthAndSeparation (byval feetString, byval vehiclelength)
	functionstart "VehicleLengthAndSeparation" & " separation: " & _
								feetString & " length: " & vehiclelength
	If x_config="" Then
		x_config= ConfigAbsXGet
		y_config= ConfigAbsYGet
	End If
	wait_custom 2: mouseClick x_config-80+10, y_config+326, false: wait_custom 3 rem Focus and Click in Sensor Separation EDIT BX
	textBoxClear ("right"): wait_custom 1: SendKeysShell feetString, 2
	wait_custom 2: mouseClick x_config-80+10, y_config+326+28, false: wait_custom 3 rem Focus and Click in Vehicle Lenght Correction EDIT BX
	textBoxClear ("right"): wait_custom 2: SendKeysShell vehiclelength, 2
	functionend "VehicleLengthAndSeparation"
End Sub

Function ActivateAP()
	functionstart "ActivateAP"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Access Point")
	If obj.Exist Then
		obj.Click: wait_custom 1
		Set ActivateAP = obj
	else
		oops "", tryid
		If tryid<2 Then
			ActivateAP: resettryid: exit function
		End If
	End If
	functionend "ActivateAP"
End function

Sub ActivateAPInfoCoodrs()
	functionstart "ActivateAPInfoCoodrs"
	Clickfromconfig 836, 48: wait_custom 1
	functionend "ActivateAPInfoCoodrs"
End Sub

Sub ActivateUnmapButton()
	functionstart "ActivateUnmapButton"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Unmap").Click: wait_custom 1
	functionend "ActivateUnmapButton"
End Sub

Sub UnmapAP(byval xc, byval yc, byval infotab, byval confirmMessage)
	functionstart "UnmapAP"
	If xc<>"" Then
		mouseclick xc, yc, false
	else
		ActivateAP
		if infotab then 
			 APInfoTabsPress "Gateway Config": wait_custom 3: wait_custom 3: APConfigTabSelect "Info": wait_custom 3
		end if
	End If
	ActivateUnmapButton: wait_custom 3
	str=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will remove").GetROProperty("name")
	assertStringPartialStatus str, confirmMessage, "UnmapAP", confirmMessage
	ActivateYesButton: wait_custom 3	
	
	test_status_d=TEST_STATUS_ALMOST_DONE
			
	db_TestRunsAddUpdate testname, test_run_db_id, true
	
	functionend "UnmapAP"		
End Sub

Sub ActivateYesButton()
	functionstart "ActivateYesButton"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Yes").Click: wait_custom 1
	functionend "ActivateYesButton"
End Sub

Sub ActivateExitButton()
	functionstart "ActivateExitButton"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Exit").Click: wait_custom 1
	functionend "ActivateExitButton"
End Sub

Function ActivateSensorZoneO()
	functionstart "ActivateSensorZone"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone")
	obj.click: wait_custom 3: set ActivateSensorZoneO = obj
	functionend "ActivateSensorZone"
End Function

Sub ActivateOKbutton()
	functionstart "ActivateOKbutton"
	set btnobj = UIAWindow("Sensys Networks TrafficDOT").UIAButton("OK")
	if btnobj.Exist then
		btnobj.Click: wait_custom 1
	end if
	functionend "ActivateOKbutton"
End Sub

Sub ActivateYesButton()
	functionstart "ActivateYesButton"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton ("Yes").Click: wait_custom 1
	functionend "ActivateYesButton"
End Sub

Function SensorZoneObjectOnMap (byval zoneName)
	functionstart "SensorZoneObjectOnMap" & " " & zoneName
	SensorZoneObjectOnMap=false
	Repository.Value("sensorZoneName") = zoneName
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone")
	If obj.Exist Then
		SensorZoneObjectOnMap=true
	End If
	functionend "SensorZoneObjectOnMap"
End function

Sub UnmapSensorZone(byval zoneName, byval confirmMessage, byval skipClick, byval renamed, byval buttonName)
	functionstart "UnmapSensorZone" & " " & zoneName
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
	MoveTrafficDOT2window: wait_custom 3
	Repository.Value("sensorZoneName") = zoneName: Repository.Value("UseNewZone") = "Use new (" & zoneName & ")"
	Repository.Value("confirmMessage") =confirmMessage
	If not skipClick Then
		Select Case renamed
			Case true
				UIAWindow("Sensys Networks TrafficDOT").UIAObject("SensorZoneRenamed").Click: wait_custom 3
			Case false
				Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone")
				If obj.Exist Then
					obj.Click: wait_custom 3
					print err.description
					If err.description<>"" Then
						Repository.Value("sensorZoneName") = "Sensor Zone "+ zoneName
						Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor Zone ZoneNameX001")
						obj.Click: wait_custom 3
						err.description=""
						err.Number=0
					End If
				else
					Repository.Value("sensorZoneName") = "Sensor Zone "+ zoneName
					Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor Zone ZoneNameX001")
					obj.Click: wait_custom 3
				End If
		End Select
	End If
	UnmapByXY: wait_custom "fixed15"
	If buttonName<>"" Then
		if UIButton(buttonName).Exist then
			UIButton(buttonName).Click: wait_custom 3
		else
			Oops "Unmapping...", tryid
			UnmapByXY: wait_custom "fixed15"
			UIButton(buttonName).Click: wait_custom 3
		end if
		test_status_d=TEST_STATUS_ALMOST_DONE
		db_TestRunsAddUpdate testname, test_run_db_id, true
		if UIButton(buttonName).Exist Then
			Oops buttonName, tryid
			UIButton(buttonName).Click
		end if
		functionend "UnmapSensorZone" & "-0_"
		Exit sub
	End If	
	movesensor=false
	If not sensor_deleted_from_cz Then
		wait_custom "fixed7": movesensor = UIAWindow("Sensys Networks TrafficDOT").UIAObject("You must first move the").Exist
		If movesensor Then
			WriteToLogfile "Sensor detected on sensor zone" & " " & zoneName
			sensor_on_zone=true: wait_custom "fixed5": ActivateOKbutton: wait_custom 3
			WriteToLogfile "Sensor needs to be removed from sensor zone" & " " & zoneName
			functionend "UnmapSensorZone" & "-1_"
			Exit sub
		Else
			ValidationFailed "UnmapSensorZone", confirmMessage
			functionend "UnmapSensorZone" & "-2_"
			Exit sub
		end If	
	End If
	
	if confirmMessage <>"" Then
		Set obj=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will delete")
		unmapok=obj.Exist: wait_custom 1
		if unmapok then
			ActivateYesButton: wait_custom "fixed7"
		end if
		if UIButton("Yes").Exist Then
			oops "", tryid
			UIButton("Yes").Click: wait_custom "fixed7"
		end if
	End If
	test_status_d=TEST_STATUS_ALMOST_DONE
	db_TestRunsAddUpdate testname, test_run_db_id, true
	functionend "UnmapSensorZone" & "-3_"
End Sub

Sub AdobeAirSetup (byval cancel)
	functionstart "AdobeAirSetup"
	setup=UIAWindow("Adobe AIR Setup").Exist
	If setup Then
		If cancel Then
			UIAWindow("Adobe AIR Setup").UIAButton("Cancel").Click
		End If
	End If
	functionend "AdobeAirsetup"
End Sub

Sub AdobeAirUpdate (byval later)
	functionstart "AdobeAirUpdate"
	wait_custom "10fixed": update=UIAWindow("Adobe AIR Updater").Exist	
	If update Then
		If later Then
			UIAWindow("Adobe AIR Updater").UIAButton("Update Later").Click
		End If
	End If
	functionend "AdobeAirUpdate"
End Sub

Sub UnmapTextBOX(byval confirmMessage, byval x, byval y)
	functionstart "UnmapTextBox"
	If x<>"" Then
		ActivateObjectOnMap "Text Box", x, y
	else
		UIAWindow("Sensys Networks TrafficDOT").UIAEdit("Edit").Click
	End If
	wait_custom 3: UnmapByXY: wait_custom 3
	sStringRuntime=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will remove").GetROProperty("name")
	assertStringPartialStatus sStringRuntime, confirmMessage, "UnmapTextBOX", confirmMessage: wait_custom "fixed7"
	ActivateButton "Yes": wait_custom 3
	functionend "UnmapTextbox"
End Sub

Sub ValidateTopographyDependencies(byval parentname)
	functionstart "ValidateTopographyDependencies" & " " & parentname
	If UIAWindow("Sensys Networks TrafficDOT").UIAObject("Device has children").Exist then
		ActivateOKButton: wait_custom 3
		ValidationSucceeded "ValidateTopographyDependencies", parentname
	else
		ValidationFailed "ValidateTopographyDependencies", parentname
	End If
	functionend "ValidateTopographyDependencies"
End Sub

Sub ConfirmYesButtonXY
	functionstart "ConfirmYesButtonXY"
	Clickfromconfig  385, 415: wait_custom 3
	functionend "ConfirmYesButtonXY"
End Sub

Sub SaveYesButtonXY(byval num)
	functionstart "SaveYesButtonXY"
	For Iterator = 1 To num Step 1
		Clickfromconfig  415, 510: wait_custom 3
	Next
	functionend "SaveYesButtonXY"
End Sub

Sub SaveOKButtonXY(byval num)
	functionstart "SaveOKButtonXY"
	For Iterator = 1 To num Step 1
		Clickfromconfig  340, 510: wait_custom 3
	Next
	functionend "SaveOKButtonXY"
End Sub

Sub UnmapSensorzoneXY (byval name)
	functionstart "UnmapSensorzoneXY" & " " & name
	ClickFromConfig 140, 630: wait_custom 3
	functionend "UnmapSensorzoneXY"
End Sub

Sub UnmapByXY
	functionstart "UnmapByXY"
	x = ConfigAbsXGet
	y = ConfigAbsYGet
	x_click=x-160
	y_click=y+628
	wait_custom 1: mouseClick x_click, y_click, false: wait_custom 3
	functionend "UnmapByXY" & " " & x_click & " " & y_click
End Sub

Sub UnmapSensor(byval sensorName, byval obj, byval confirmMessage, byval xx, byval yy)
	functionstart "UnmapSensor" & " " & sensorName
	Repository.Value("confirmMessage")=confirmMessage
	If offline_mode Then
		If xx="" Then
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor null")
		End If
	End If
	If IsObject(obj) Then obj.Click
	If xx<>"" Then 
		mouseClick xx, yy, false
	end if: wait_custom 5
	Set objmessage = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will remove")
	Click_button "Unmap", obj, true, false
	If 	not skip_confirm_popup=true Then
		If dont_ask Then
			wait_custom 3: UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("DontAsk").Click: wait_custom 3
			skip_confirm_popup=true
		End If
		Confirmation objmessage, "Yes", confirmMessage, "UnmapSensor", false, false
	End If
	functionend "UnmapSensor" & " " & xx & " " & yy
End Sub


Sub DeleteSensor (byval sensorName, byval obj, byval confirmMessage, byval xx, byval yy)
	Repository.Value("confirmMessage")=confirmMessage: exactmatch=false: fname="DeleteSensor"
	
	If device_in_tray Then
		FindDevicesinthelist sensorName, true, onbj1, tryid
	else
		If offline_mode Then
			If xx="" Then
				Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor null")
			End If
		End If
		If IsObject(obj) Then obj.Click
		If xx<>"" Then 
			mouseClick xx, yy, false
		end if: wait_custom 5
	End If
	If role_c="EMEA" Then
		fname="UnconfigureSensor"
		Set objmessage = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will remove")
		exactmatch=true: Click_button "Unconfigure", obj, true, false: wait_custom 5
	else
		Set objmessage = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will delete")
		ActivateButton "Delete": wait_custom 5
		dont_ask=false ' this feature not available for delete yet
	End If
	functionstart fname & " " & sensorName
	If 	not skip_confirm_popup=true Then
		If dont_ask Then
			wait_custom 3: UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("DontAsk").Click: wait_custom 3
			skip_confirm_popup=true
		End If
		exactmatch=false: Confirmation objmessage, "Yes", confirmMessage, "DeleteSensor", exactmatch, false
	End If
	sensor_deleted_from_cz=true
	functionend fname & " " & xx & " " & yy
End Sub

Sub DeleteSensorDragOff (byval sensorName,byval obj, byval confirmMessage, byval x_1, byval y_1)
		functionstart "DeleteSensorDragOff" & " " & sensorName & " " & x_1 & " " & y_1
		Repository.Value("confirmMessage")=confirmMessage
		hidelogcheck()
		If IsObject(obj) Then obj.Click	
			If x_1<>"" Then 
				Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAList("List")	
				xx1=obj.GetROProperty("abs_x"): yy1=obj.GetROProperty("abs_y")
				w1=obj.GetROProperty("width"): h1=obj.GetROProperty("height")		
				xx1=xx1+w1/2: yy1=yy1+h1/2
				WriteToLogFile "about to drop " & sensorName & " to " & xx1 & " " & yy1
				With CreateObject("WScript.Shell")
				WriteToLogFile "begin to drag " & sensorName & " from " & x_1 & " " & y_1
	   			.Run "nircmd setcursor " & x_1 & " " & y_1, 0, True
	    		.Run "nircmd sendmouse left click", 0, True: wait_custom 1
		 		.Run "nircmd sendmouse left down", 0, True
		 		.Run "nircmd setcursor " & xx1 & " " & yy1, 0, True: wait_custom 1
		 		.Run "nircmd sendmouse left click", 0, True: wait_custom 1
		 		.Run "nircmd sendmouse left up", 0, true: wait_custom 3
				End With: WriteToLogFile sensorName & " dragged off the map"
		end if: wait_custom "7_fixed"		
		If 	not skip_confirm_popup=true Then
			If role_c="EMEA" Then
				Set objmessage = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will remove")
			else
				Set objmessage = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will delete")
			End If
			If dont_ask Then
				wait_custom 3: UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("DontAsk").Click: wait_custom 3
				skip_confirm_popup=true
			End If
			Confirmation objmessage, "Yes", confirmMessage, "DeleteSensorDragOff", true, false
		end if
		functionend "DeleteSensorDragOff"
End Sub

Sub DeleteSensorDeleteButton (byval sensorName,byval obj, byval confirmMessage, byval x_1, byval y_1)
		functionstart "DeleteSensorDeleteButton" & " " & sensorName & " " & x_1 & " " & y_1
		Repository.Value("confirmMessage")=confirmMessage
		hidelogcheck()
		If IsObject(obj) Then obj.Click	
		If x_1<>"" Then 
			mouseclick x_1+3, y_1+3, false: wait_custom 3
			click_button "Delete", objbtnd, true, true
		end if: wait_custom "7_fixed"		
		If 	not skip_confirm_popup=true Then
			Set objmessage = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will delete")
			If dont_ask Then
				wait_custom 3: UIAWindow("Sensys Networks TrafficDOT").UIACheckBox("DontAsk").Click: wait_custom 3
				skip_confirm_popup=true
			End If
			Confirmation objmessage, "Yes", confirmMessage, "DeleteSensorDeleteButton", false, false
		end if
		functionend "DeleteSensorDeleteButton"
End Sub

Sub Confirmation (byval obj, byval YesOrNo, byval confirmMessage, byval details, byval exactmatch, byval dontAsk)
		functionstart "Confirmation"
		If err.description<>"" Then
			msgbox "error"
		End If
		confirmMessage=replace(confirmMessage, " ", "")
		waitfor=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Yes").exist
		do while not waitfor
			waitfor=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Yes").exist: wait_custom 1
		loop
		sStringRuntime=obj.GetROProperty("name")
		sStringRuntime=replace(sStringRuntime, " ", "")
		print sStringRuntime
		print confirmMessage
		If confirmMessage<>"" Then
			If exactmatch Then
				WriteToLogFile "exact match activated..."
				assertStringEquals sStringRuntime, confirmMessage, details, confirmMessage
			else
				WriteToLogFile "partial match activated..."
				assertStringPartialStatus sStringRuntime, confirmMessage, details, confirmMessage
			End If
		End If
		click_button YesOrNo, objb, true, true
		set objb1 = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Yes")
		if objb1.Exist Then
			if tryid<2 then
				oops "", tryid
				Confirmation obj, YesOrNo, confirmMessage, details, exactmatch, dontAsk: resetTryid: exit sub
			end if
		end if
		functionend "Confirmation"
End Sub

Sub AddNameAndDescrToSensor (byval obj, byval name, byval descr, byval xx, byval yy)
	functionstart "AddNameDescrToSensor" & " " & name & " " & descr
	If IsObject(obj) Then obj.Click
	If xx<>"" Then 
		mouseClick xx, yy, false
	end if
	wait_custom 5:SensorPositionNameAndDescriptionSet name, descr, true
	functionend "AddNameDecrToSensor"
End Sub

Function DeviceFoundValidation (byval devicetype, byval devicename, byval dfound,  byval positive)
	functionstart "DeviceFoundValidation"
	foundstr= " found": notfoundstr= " not found"
	If positive Then
		If dfound Then
			ValidationSucceeded devicetype + foundstr, devicename
		else
			ValidationFailed devicetype + notfoundstr, devicename
		End If
	else
		If dfound Then
			ValidationFailed devicetype + foundstr, devicename
		else
			ValidationSucceeded devicetype + notfoundstr, devicename
		End If
	End If
	functionend "DeviceFoundValidation"
End Function

sub resetTryid ()
	functionstart "resetTryid"
	g_tryid=0
	functionend "resetTryid"
end sub

function FindDevicesInTheList(byval name, byval clickit, byref obj, byref tryid)
	functionstart "FindDevicesInTheList" & " " & name & " " & tryid
	
	If tryid="" Then tryid=1
	
	if tryid>10 Then
		DevicesActiveInTheTray true, name, objs, true
		set obj=objs
		exit Function
	end if
	
	on error resume next
	FindDevicesInTheList=false: devicefound="not found": wait_custom "fixed5"
	Set objP=UIAWindow("Sensys Networks TrafficDOT")
	set collections = objP.ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("Class Name")="UIAList" Then
			Set objL = collections(iii)
			Exit for
		End If
	Next
	set collections = objL.ChildObjects
	For iii=0 to collections.count -1
		If collections(iii).GetROProperty("name")=name Then
			Set chld = collections(iii)
			vis = obj.GetROProperty("abs_x")			
			If vis="0" Then
				FindDevicesInTheList=false
				functionend "FindDevicesInTheList" & " " & devicefound
				exit function
			End If
			if clickit then
		    	chld.Click
		    end if
			Set obj=chld
			FindDevicesInTheList=true
			devicefound=name
			exit for 
		End If
	Next
	if err.number>0 Then
		if tryid<2 then
			Oops "", tid
			tryid=tryid+1
			FindDevicesInTheList name, clickit, obj, tryid: resetTryid: exit function
		end if
	end if
	functionend "FindDevicesInTheList" & " " & devicefound
end function

Sub Oops(byval details, byref tryid)
	g_tryid=g_tryid+1
	message="Oops, something went wrong. Trying again..."
	tryid=g_tryid
	WriteTologfile message & " " & details
End Sub

Function DragControllerNew (byval name, byref tox, byref toy, byval num, byref tryid)
	functionstart "DragControllerNew" & " " & name: o_tox=tox: o_toy=toy
	If tryid="" Then tryid=1
	ControllerSetup name, num: DragControllerNew=0: waitmore=false: n=0: HideLog: wait_custom "fixed7"
	ctype="flex": If role_c="EMEA" then ctype=""
	If role_c="EMEA" or role_c="Stop Bar" or role_c="GMG" Then
		If logs_cached_x="" Then
			x=ShowLogsGetX: y=ShowLogsGetY
		else
			x=logs_cached_x: y=logs_cached_y
		End If
	else
		If x_fullscreen_cached="" Then
			x=GenericButtonXGet("Fullscreen"): x_fullscreen_cached=x
			y=GenericButtonYGet("Fullscreen"): y_fullscreen_cached=y
		else
			x=x_fullscreen_cached
			y=y_fullscreen_cached
		End If

	end if
	tox=x+tox: toy=y+toy: waitmore=false
	nt=0
	Do  while not waitmore: waitmore = FindDevicesInTheList (name, true, objD, tryid)
		If not waitmore Then
			Set objD=UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("ControllerList")
			if (ListSearchRightNew (name, 5*(n+1), objD, 0, 5, nt))=0 Then
				if tryid<2 then
					WriteToLogFile name & " could not find controller. Trying again"
					tryid=tryid+1
					DragControllerNew name, o_tox, o_toy, num, tryid: exit function
				end if
			else
				wait_custom 3: waitmore=FindDevicesInTheList (name, true, objD, tryid)
			end if
		else
			x1= objD.GetROProperty("abs_x"): y1= objD.GetROProperty("abs_y")
			w1= objD.GetROProperty("width"): h1= objD.GetROProperty("height")
			If x1=0 Then
				ListSearchRightNew name, 5*(n+1), objD, 0, 5, nt: wait_custom 3: waitmore=false
			End If			
		End If
		If n>CInt(Environment("SensorWaitFactor")) Then
			DragControllerNew=-1: Exit Function
		End If: n=n+1: wait_custom 1
	loop
	wait_custom 1: DragAndDrop objD, x1+w1/2, y1+w1/2,tox,toy, name : wait_custom 5
	WriteToLogFile "Check if " & name & " was removed from the tray..."
	contr_name=name
	If FindDevicesInTheList (name, false, objD, tryid) = true Then
		If tryid<3 Then
			WriteToLogFile name & " is still in the tray. Trying again"
			tryid=tryid+1
			DragControllerNew name, o_tox, o_toy, num, tryid: exit function
		else
			DragControllerNew=-1
			functionend "DragAP"
			Exit Function
		End If
	end if
	
	if role_c="EMEA" then
		Set obj = ControllerSet(ctype): controller_type=obj.GetROProperty("name")
		DragControllerNew=name
	else
		Set obj = FlexConnectSetUP(name)
		controller_type=obj.GetROProperty("name")
		Set objRegExp = New RegExp
		objRegExp.Pattern = "[^a-z0-9]"
		objRegExp.Global = True
		objRegExp.IgnoreCase = True
		DragControllerNew=objRegExp.Replace(controller_type, "")
	end if		
	
	functionend "DragControllerNew" & " " & controller_type & " " & tox & " " & toy
End Function

Function SetUITD2Window()
	set SetUITD2Window = UIAWindow("Sensys Networks TrafficDOT")
End function

Function DragController (byval name, byref tox, byref toy, byref tryid)
	functionstart "DragController" & " " & name
	ControllerSetup name, 2: DragController=0: waitmore=false: n=0: HideLog: wait_custom "fixed7"
	Set obj=UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("ControllerList")
	If role_c="EMEA" or role_c="Stop Bar" or role_c="GMG" Then
		If logs_cached_x="" Then
			x=ShowLogsGetX: y=ShowLogsGetY
		else
			x=logs_cached_x: y=logs_cached_y
		End If
	else
		x=GenericButtonXGet("Fullscreen")
		y=GenericButtonYGet("Fullscreen")
	end if
	tox=x+tox: toy=y+toy: waitmore=false
	nt=0
	If FindDevicesInTheList(name, true, objD, tryid) Then
		x1= objD.GetROProperty("abs_x"): y1= objD.GetROProperty("abs_y")
		w1= objD.GetROProperty("width"): h1= objD.GetROProperty("height")
		wait_custom 1: objD.Drag: wait_custom 5
		mousePoint x1+w1/2, y1+w1/2: wait_custom 1
		UIAWindow("Sensys Networks TrafficDOT").Drop tox,toy: wait_custom 5
		Set objC = ControllerSet(): controller_type=objC.GetROProperty("name")
		DragController=name
		functionend "DragController" & " " & controller_type & " " & tox & " " & toy
		Exit function
	End if
	Do  while not waitmore: waitmore=obj.Exist
		If not waitmore Then
			if (ListSearchRight(name, 5*(n+1), obj, 0, 5, nt))=0 Then
				if tryid<2 then
					tryid=tryid+1
					DragController name, tox, toy, tryid: exit function
				end if
			else
				wait_custom 3: waitmore=obj.Exist
			end if
		else
			x1= obj.GetROProperty("abs_x"): y1= obj.GetROProperty("abs_y")
			w1= obj.GetROProperty("width"): h1= obj.GetROProperty("height")
			If x1=0 Then
				ListSearchRight name, 5*(n+1), obj, 0, 5, nt: wait_custom 3: waitmore=false
			End If			
		End If
		If n>CInt(Environment("SensorWaitFactor")) Then
			DragController=-1: Exit Function
		End If: n=n+1: wait_custom 1
	loop
	obj.Click: wait_custom 1: obj.Drag: wait_custom 5
	mousePoint x1+w1/2, y1+w1/2: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").Drop tox,toy: wait_custom 5
	Set obj = ControllerSet(): controller_type=obj.GetROProperty("name")
	DragController=name
	functionend "DragController" & " " & controller_type & " " & tox & " " & toy
End Function

Function ControllerSet(byval ctype)
	functionstart "ControllerSet" & " " & ctype
	If ctype="" Then
		Set ControllerSet = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Controller_Device")
	ElseIf ctype="flex" Then
		Set ControllerSet = UIAWindow("Sensys Networks TrafficDOT").UIAObject("ControllerID_FL")
	End If
	functionend "ControllerSet"
End Function

Function DragAP (byref tox, byref toy, byval objAP, byref iTryId)
	functionstart "DragAP": o_tox=tox: o_toy=toy
	DragAP=0: waitmore=false: n=0	
	FindDevicesInTheList "[object AccessPoint]", true, obj, tryid
	If role_c="EMEA" or role_c="Stop Bar" or role_c ="GMG" Then
		x=ShowLogsGetX: y=ShowLogsGetY
	else
		x=GenericButtonXGet("Fullscreen"): y=GenericButtonYGet("Fullscreen")
	End If
	tox=x+tox: toy=y+toy
	x1= obj.GetROProperty("abs_x"): y1= obj.GetROProperty("abs_y")
	w1= obj.GetROProperty("width"): h1= obj.GetROProperty("height")		
	DragAndDrop obj, x1+w1/2, y1+w1/2, tox,toy, "GW"
	WriteToLogFile "Check if AP was removed from the tray..."	
	If 	FindDevicesInTheList ("[object AccessPoint]", false, obj, tryid)=true Then
		If tryId<3 Then
			WriteToLogFile "AP is still in the tray. Trying again"
			functionend "DragAP" & " " & tox & " " & toy: tryId=tryId+1
			DragAP o_tox,o_toy, objAP, tryId: exit function
		else
			DragAP=-1
			functionend "DragAP"
			Exit Function
		End If
	end if
	WriteToLogFile "AP was removed from the tray"
	functionend "DragAP" & " " & tox & " " & toy 
End Function

Function Hidelogcheck
	HideLog: exit function
	functionstart "Hidelogcheck"
	if UIAWindow("Sensys Networks TrafficDOT").UIAButton("Hide Log").Exist then
		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Hide Log").Click: wait_custom 3
	End If 
	functionend "Hidelogcheck"
End Function

Function DragSensor (byref sensorname, byval tox, byval toy, byval sdescription)
	
	fname= "DragSensor": devicename="sensor"
	
	If sdescription="Repeater" Then	
		devicename="repeater"
		fname= "DragRepeaterFromTray"
	end if
	
	if instr(1, lcase(sdescription), "zone")>0 then
		sensorZONE=sdescription
	else
		sensorZONE=Repository.Value("sensorZoneName")
	end if
	
	if sensorZONE="" Then sensorZONE="Map"
	
	if mapping_choice="bvd4" then
		bvdidset=": " & bvd4_ipaddress
	elseif mapping_choice="bvd20" then
		bvdidset=": " & bvd20_ipaddress
	end if

	functionstart fname & " " & sensorname & "-->" & sensorZONE & bvdidset
	
	If offline_mode Then
		DragNewSensor "000" & new_sensor_counter, tox, toy, ""
		new_sensor_counter=new_sensor_counter+1
		functionend fname
		Exit function
	End If
	
	WriteToLogFile "start looking for " & devicename & " in the tray..."
	
	DragSensor=0: waitmore=false: n=0	
	
	Repository.Value("sensorListName")=sensorname
	
	Set objS = UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("SensorFromList")
	
	if objS.Exist then
		vis = objS.GetROProperty ("abs_x")
		If vis<>0 Then
			alreadyfound=true
		end if
	end if	
	
	if alreadyfound then

	else
		Do  while not waitmore	
			environment.LoadFromFile env_path_changed
			nt=0
			If not waitmore Then 
				lsrcode=ListSearchRight (sensorname, 5*(n+1), objS, 0, 5, nt)
				if lsrcode=0 then
					DragSensor = -1
					functionend fname & " " & "ListSearchRight" & " 01"
					Exit Function
				ElseIf lsrcode=3 Then
					Exit do	
				else
					Exit do
				End if
			end if
			If n > CInt(Environment("SensorWaitFactor")) Then
				DragSensor = -1
				functionend fname & " " & "SensorWaitFactor" & " 02"
				Exit Function		
			End If: n=n+1
		loop
	end if
	
	x1= objS.GetROProperty("abs_x"): y1= objS.GetROProperty("abs_y")
	w1= objS.GetROProperty("width"): h1= objS.GetROProperty("height")	

	objS.Click

	If UI_sensor_test Then
		functionend fname & " " & "UIsensortest"
		Exit function
	End If
	
	WriteToLogFile "found " & devicename & " in the tray": wait_custom 1
	
	DragAndDrop objS, x1+w1/2, y1+w1/2, tox, toy, devicename: wait_custom 5
	
	If devicename<>"repeater" then BVDipaddress
	
	If role_c<>"EMEA" Then
		reasignzone=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Use new (sensorZoneX)").Exist
		If reasignzone Then
			Set nzone=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Use new (sensorZoneX)")
			If nzone.Exist Then
				UIAWindow("Sensys Networks TrafficDOT").UIAButton("Use new (sensorZoneX)").Click: wait_custom 3
			End If
		End If
	End If
	
	wait_custom "fixed7" 
	
	Set objS = UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("SensorFromList")

	If objS.Exist Then	
		If sensor_drag_counter < 2 Then
			sensor_drag_counter=sensor_drag_counter+1
			DragSensor sensorname, tox, toy, "trying to drag off again attempt: " &  sensor_drag_counter: exit function
		else
			DragSensor=-1
			functionend fname & " 03"
			Exit Function
		End If
	else	
		WriteToLogFile "checked "  & devicename & " was removed from tray properly..."	
		wait_custom 2
		If sdescription<>"" Then
			' to do
		End If
		sensors_list=sensors_list + sensorname	+ ","
	End If
	
	test_status_d=TEST_STATUS_IN_PROGRESS
			
	db_TestRunsAddUpdate test_case_name, test_run_db_id, true
	
	functionend fname & " " & tox & " " & toy 
	
End Function

Function DragAndDrop (byval obj, byval x_p, byval y_p, byval tox, byval toy, byval devicename)
	functionstart "DragAndDrop" & " " & devicename
	obj.Drag: wait_custom 5
	if x_p="" then
	else
		mousePoint x_p, y_p: wait_custom 1
	end if
	WriteToLogFile "about to drop " & devicename & " on map at" & " " & tox & " " & toy
	UIAWindow("Sensys Networks TrafficDOT").Drop tox,toy: wait_custom 5
	WriteToLogFile "dropped " & devicename & " on map at" & " " & tox & " " & toy
	functionend "DragAndDrop"
End Function

Sub ClearAllConfiguredSensors()
	functionstart "ClearAllConfiguredSensors"
	Tools "Clearing...", "Clear Configured Sensors", "": wait_custom 5
	If UIAWindow("Sensys Networks TrafficDOT").UIAObject("This will remove all").Exist then
		ActivateButton "Remove": wait_custom 1
	else
		ValidationFailed "ClearAllConfigureSensors", "" 	
	End If
	functionend "ClearAllConfiguredSensors"
End Sub

Function VerifyList (byval device, byval name, byval skip)
	functionstart "VerifyList" & " " & device & " " & name
	If skip Then
		functionend "VerifyList"
		Exit function
	End If
	Hidelogcheck: wait_custom "10_fixed"
	Select Case device
		Case "Sensor"
			set obj = UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("SensorFromList")
			Repository.Value("sensorListName")=name
		Case "Controller"
			set obj = UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("ControllerList")
			Repository.Value("controllerName")=name
		Case "Repeater"
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("ObjectAny")
			Repository.Value("anyListObject")=name
	End Select
	nt=0
	Do  while not waitmore	
		waitmore=obj.Exist
		If waitmore Then	
			hh=obj.GetROProperty("x")
			If hh=0 Then
				waitmore=false
			else
				Set VerifyList = obj
				ValidationSucceeded "VerifyList", device & ":" & name
				Exit Do
			End If			
		End if
		If not waitmore Then
			if device="Repeater" then
				ListSearchRight name, 2*(n+1), obj, 0, 9,nt
			else
				ListSearchRight name, 2*(n+1), obj, 0, 5,nt
			end if
		End If
		If n > CInt(Environment("SensorWaitFactor")) Then
			Reporter.AddRunInformation "VerifyList", "timeout " & " >" & n
			ValidationFailed device & ": " & name & " not found", "VerifyList"
			Exit do
		End If 	
		n=n+1
	loop
	functionend "VerifyList"
End function

Sub DragZoneToNewLocation (byval x, byval y)
	functionstart "DragZonetoNewLocation" & " " & x & "," & y
	UIAWindow("Sensys Networks TrafficDOT").UIAObject("sensorZone").Drag: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").Drop x,y:wait_custom 5
	functionend "DragZonetoNewLocation"
End Sub

Function RandomName
	functionstart "RandomName"
	Dim nValue, Response, rname
	rname="0"
	For Iterator = 1 To 3 Step 1
		Randomize 'Initialize random-number generator
  		nValue = Int(9*Rnd + 1) 'Generate random value between 1 and 6
  		rname=rname & nValue
	Next
	RandomName=rname
	functionend "RandomName" & " " & rname
End Function

Sub DragCompass(byval tox,byval toy)
	functionstart "DragCompass"
	If role_c="EMEA" or role_c="Stop Bar" or role_c="GMG" Then
		x=ShowLogsGetX: y=ShowLogsGetY
	else
		x=GenericButtonXGet("Fullscreen"): y=GenericButtonYGet("Fullscreen")
	end if
	x_compass=x+tox: y_compass=y+toy
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Compass Drag to place").Click: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Compass Drag to place").Drag: wait_custom 3
	UIAWindow("Sensys Networks TrafficDOT").Drop x_compass, y_compass: wait_custom 5
	functionend "DragCompass"	
End Sub

Sub UnmapCompass(byval confirmMessage, byval xx, byval yy)
	functionstart "UnmapCompass"
	mouseClick xx, yy, false: wait_custom 5
	ClickFromConfig 4, 630: wait_custom 7 'unmap button
	str=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing 'Yes' will remove").GetROProperty("name")
	assertStringPartialStatus str, confirmMessage, "UnmapCompass", confirmMessage
	ActivateYesButton: wait_custom 3
	functionend "UnmapCompass"		
End Sub

Function CompassRemoveMessage()
	functionstart "CompassRemoveMessage"
	CompassRemoveMessage=EnvironmentGetMessages("Messages_0004")
	functionend "CompassRemoveMessage"
End Function


Sub DragRepeater(byval repeaterName, byval tox, byval toy, byval life)

		If x_config="" Then
			x_config= ConfigAbsXGet
			y_config= ConfigAbsYGet
		End If

		x=ShowLogsGetX: y=ShowLogsGetY: tox=x+tox: toy=y+toy
		
		if life Then
			DragSensor repeaterName, tox, toy, "Repeater": wait_custom 1
			exit sub
		end if
		
		functionstart "DragRepeater" & " " & repeaterName

		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Repeater Drag to place").Click: wait_custom 1
		UIAWindow("Sensys Networks TrafficDOT").UIAButton("Repeater Drag to place").Drag: wait_custom 3
		UIAWindow("Sensys Networks TrafficDOT").Drop tox, toy: wait_custom 5
		
		mouseClick x_config-84, y_config+153, false
		SendKeysShell repeaterName, 2: wait_custom 1: ApplyRepeater
		functionend "DragRepeater" & " " & tox & " " & toy 
End Sub


function BVDipaddress()
	WriteToLogFile "role: " & role_c
	if role_c<>"EMEA"  then 
		exit function
	end if
	If mapping_choice="bvd4" or mapping_choice="bvd20" Then
	Else
		exit function
	end if 
	If bvd_address_set then 
		WriteToLogFile "set: " & bvd20_ipaddress
		WriteToLogFile "set: " & bvd4_ipaddress
		exit function
	end if
	functionstart "BVDipaddress"
	Set objip=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Enter base IP Address")
	If objip.Exist Then
		xe=objip.GetROProperty("abs_x"): ye=objip.GetROProperty("abs_y"): 
		if mapping_choice="bvd20" Then
			WriteToLogFile "BVD(20) program is running..."
			If bvd20_ipaddress="" Then
				WriteToLogFile "setting up IP address now..."
				bvd20_ipaddress="192.70.58.2"
			End If
			ipaddress=bvd20_ipaddress
		elseif mapping_choice="bvd4" then
			WriteToLogFile "BVD(4) program is running..."
			If bvd4_ipaddress="" Then
				WriteToLogFile "setting up IP address now..."
				bvd4_ipaddress="192.70.58.3"
			End If
			ipaddress=bvd4_ipaddress
		end if
		SendKeysShell ipaddress, 5: wait_custom 3
		mouseclick xe+35, ye+65, false 'click "Apply"
		ValidationSucceeded "BVDipaddress", "BVD IP Address Applied:" & ipaddress
		bvd_address_set=true
	end if
	functionend "BVDipaddress: " & ipaddress
End function

Sub ApplyEMEANewSensor (byref sensorName)
	if (instr(1, sensorName, "B")>0) then
		ApplyEMEA_Gen_Micro: exit sub
	end if
	functionstart "ApplyEMEANewSensor" 
	ClickFromConfig 10, 430: wait_custom 3: BVDipaddress
	functionend "ApplyEMEANewSensor": exit sub
	if SensorNewDotID4DigitValidation (sensorName, SensorNewDOTidMessage, true) > 0 then
		sensorName=sensorName & "A"
		Apply_button
		ClickFromConfig 145, 128
		dot_id=sensorName
		Repository.Value("sensorListName")=sensorName
		SendKeysShell sensorName, 2: wait_custom 1	
	end if
	functionend "ApplyEMEANewSensor" & " " & sensorName
End Sub

Sub ApplyRepeater
	functionstart "ApplyRepeater"
	If x_apply="" Then
		x_apply=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply").GetROProperty("abs_x")
		y_apply=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Apply").GetROProperty("abs_y")
		ActivateButton("Apply")
	else
		mouseClick x_apply+10, y_apply+5, false
	End If
	functionend "ApplyRepeater"
End Sub

Sub DragNewSensor(byref sensorName, byval xx, byval yy, byval sdescription)
		if instr(1, lcase(sdescription), "zone")>0 then
			sensorZONE=sdescription
		else
			sensorZONE=Repository.Value("sensorZoneName")
		end if	
		if sensorZONE="" Then sensorZONE="Map"
		Repository.Value("sensorListName")=sensorName
		Set objes=UIAWindow("Sensys Networks TrafficDOT").UIAList("List").UIAObject("SensorFromList")
		If objes.Exist Then
			sensorName=RandomName
		End If
		
		functionstart "DragNewSensor" & " " & sensorName & "-->" & sensorZONE & "(" & xx & "," & yy & ")"
		if instr(1, sensorName, "B")>0 then
			Set objnsm=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Sensor MICRO")
			If objnsm.Exist Then
				WriteToLogfile "New Sensor found..."
				objnsm.Click: wait_custom 1
				objnsm.Drag: wait_custom 3
			else
				oops "", tryid: wait_custom 1
				For n = 1 To 2 Step 1
					click_button "Config", obj, true, false: wait_custom 1
				Next
				If tryid<2 Then
					DragNewSensor sensorName, xx, yy, sdescription: exit sub
				end if
			End If
			UIAWindow("Sensys Networks TrafficDOT").Drop xx, yy: wait_custom 5
		Else
			Set objns= UIAWindow("Sensys Networks TrafficDOT").UIAButton("Sensor Drag to place on")
			If objns.Exist Then
				WriteToLogfile "New Sensor found..."
				x=objns.GetROProperty("abs_x")
				y=objns.GetROProperty("abs_y")
				With CreateObject("WScript.Shell")
			   			.Run "nircmd setcursor " & x+10 & " " & y+10, 0, True
			    		.Run "nircmd sendmouse left click", 0, True: wait_custom 1
				 		.Run "nircmd sendmouse left down", 0, True
				 		.Run "nircmd setcursor " & xx & " " & yy, 0, True: wait_custom 1
				 		.Run "nircmd sendmouse left click", 0, True: wait_custom 1
				 		.Run "nircmd sendmouse left up", 0, true: wait_custom 3
				End With
				Set objsn= UIAWindow("Sensys Networks TrafficDOT").UIAObject("Sensor null")
				If objsn.Exist Then
					xsn=objsn.GetROProperty("abs_x")
					WriteToLogfile "New sensor is on map now"
				else
					oops "...let's continie, most likely it is not critical", tryid: wait_custom 1
'					If tryid<2 Then
'						DragNewSensor sensorName, xx, yy, sdescription: exit sub
'					End If
				end if
			else
				oops "", tryid: wait_custom 1
				For n = 1 To 2 Step 1
					click_button "Config", obj, true, false: wait_custom 1
				Next
				If tryid<2 Then
					DragNewSensor sensorName, xx, yy, sdescription: exit sub
				end if
			End If
		end if
		If role_c="EMEA" Then
			ClickFromConfig 145, 128: dot_id=sensorName: wait_custom 5
		else
		   	wait_custom 5: ClickFromConfig 100, 205: wait_custom 3
		End If
		
		SendKeysShell sensorName, 2: wait_custom 1	
		
		If sdescription<>"" Then
			SensorPositionNameAndDescriptionSet "sr#" & sdescription , "#descr#@" & sdescription, false
		End If

		if ApplyChanges > 0 then
			wait_custom 3
			if SensorNewDotID4DigitValidation (sensorName, SensorNewDOTidMessage, true) > 0 then
				sensorName=left(GetDateTimeStamp, 4)
				If role_c="EMEA" Then
					ClickFromConfig 145, 128: wait_custom 5: dot_id=sensorName: BVDipaddress
				else
			   		UIAWindow("Sensys Networks TrafficDOT").UIAObject("Dot ID:").Click: wait_custom 7
				End If
				Repository.Value("sensorListName")=sensorName
				SendKeysShell sensorName, 2: wait_custom 1	
			end if
		end if
		validationsucceeded "DragNewSensor", sensorname
		sensors_list=sensors_list + sensorname + ","	
		functionend "DragNewSensor" & " " & sensorName & " " & xx & " " & yy 
End Sub

function SensorNewDOTidMessage()
	functionstart "SensorNewDOTidMessage"
	SensorNewDOTidMessage="	Please fix fields in Sensor Config Panel, then Apply again" &_
							"*" & "Dot Id must be 4 alpha-numeric (hex) characters in length"
	functionend "SensorNewDOTidMessage"
end function

function SensorNewDotID4DigitValidation(byref idname, byval vmessage, byval clickOK)
	functionstart "SensorNewDotID4DigitValidation"
	Dim popup, message
	SensorNewDotID4DigitValidation=0
	If len(idname)<4 Then
		popup=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Please fix fields in Sensor").Exist
		If popup Then
			ValidationSucceeded "SensorNewDotID4DigitValidation", ""
			message=UIAWindow("Sensys Networks TrafficDOT").UIAObject("Please fix fields in Sensor").GetROProperty ("name")
			assertStringEquals  message, vmessage, "", message
			If clickOK Then
				ActivateOKbutton
				SensorNewDotID4DigitValidation=1
			End If
		else
			SensorNewDotID4DigitValidation=-1
			ValidationFailed "SensorNewDotID4DigitValidation", "4 digits validation failed"
		End If	
	End If
	functionend "SensorNewDotID4DigitValidation"
End function

Sub ValidationSucceeded (byval stepname, byval details)
	functionstart "ValidationSucceeded" & " " & stepname & " " & details
	Reporter.ReportEvent  micPass,  stepname, details 
	functionend "ValidationSucceeded"
End Sub

Sub ConfigureSensorCard (itemID, iNumber, details)	
	functionstart "ConfigureSensorCard" & " " & iNumber & " " & details
	UIAWindow("Sensys Networks TrafficDOT").UIAComboBox(itemID).UIAEdit("Edit").Click
	SendKeysShell iNumber, 2
	SendKeysShell "{ENTER}", 2
	SendKeysShell "{TAB}", 2	
	functionend "ConfigureSensorCard" & " " & itemID
End Sub

Sub TrafficDot2maxWindow()
	functionstart "TrafficDot2maxWindow"
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("System").UIAObject("System").Click: wait_custom 3		
	SelectItem 5: wait_custom 5	
	functionend "TrafficDot2maxWindow"
End Sub

Sub STD2Close
	functionstart "STD2Close"
	UIAWindow("STD2").UIAButton("Close").Click
	functionend "STD2Close"
End Sub

Sub TD2CloseX
	functionstart "TD2CloseX"
	click_button "Close", obj, true, false
	functionend "TD2CloseX"
End Sub

Sub TrafficDotClose (byval boolCoords, byval boolDontSave)
	functionstart "TrafficDotClose"
	If boolCoords Then		
		ClickFromConfig -26, -30: wait_custom 3
		If click_button ("Exit", obje, true, false) Then
			functionend "TrafficDotClose" & " Exit"
			Exit sub
		End If
		If boolDontSave Then
			ClickFromConfig 391, 414
		End If
		functionend "TrafficDotClose" & " Exit"
		Exit sub
	End If
	click_button "Close", objc, true, false
	'UIAWindow("Sensys Networks TrafficDOT").UIAButton("Close").Click:
	wait_custom "fixed5"
	Set obj = UIAWindow("Sensys Networks TrafficDOT")
	If not obj.Exist Then
		functionend "TrafficDotClose" & " " & "Close"
		Exit sub
	End If
	If click_button ("Exit", obje, true, false) Then
		functionend "TrafficDotClose" & " " & "Exit"
		Exit sub
	End If
	click_button "Don't Save", objds, true, false: wait_custom 5
	functionend "TrafficDotClose" & " Don't Save"
End Sub

function CloseTrafficDot()
	functionstart "CloseTrafficDot"
	CloseTrafficDot=0
	set obj1=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Close_TrafficDot2")
	if obj1.Exist then
		obj1.Click
	else
		TD2CloseX
	end if
	wait_custom 5
	Set obj = UIAWindow("Sensys Networks TrafficDOT")
	If not obj.Exist Then
		CloseTrafficDot=1
	End If
	code=CloseTrafficDot
	functionend "CloseTrafficDot" & " " & code
End function

Sub CloseTrafficDotXY
	functionstart "CloseTrafficDotXY"
	ClickFromConfig -25, -25
	functionend "CloseTrafficDotXY"
End Sub

Function ConnectButtonAbsYGet()
	functionstart "ConnectButtonAbsYGet"
	ConnectButtonAbsYGet= UIAWindow("Sensys Networks TrafficDOT").UIAMenu("MenuBar").UIAObject("Connect").GetROProperty("abs_y")
	functionend "ConnectButtonAbsYGet"
End Function

function ConnectButtonAbsXGet()
	functionstart "ConnectButtonAbsXGet"
	ConnectButtonAbsXGet= UIAWindow("Sensys Networks TrafficDOT").UIAMenu("MenuBar").UIAObject("Connect").GetROProperty("abs_x")
	functionend "ConnectButtonAbsXGet"
End Function

function GenericButtonXGet(byval bname)
	If bname="Fullscreen"Then
		If role_c="EMEA" or role_c="Stop Bar" or role_c="GMG" Then
			bname="Show Logs"
		End If
	end if
	functionstart "GenericButtonXGet" & " " & bname
	click_button bname, objb, false, false
	x= objb.GetROProperty("x")
	'x= UIAWindow("Sensys Networks TrafficDOT").UIAButton(bname).GetROProperty("x")
	If offline_mode Then
		If bname="Fullscreen" Then
			x=x+200
	    End If
	End If
	GenericButtonXGet=x
	functionend "GenericButtonXGet" & " " & x
End Function

function GenericButtonYGet(byval bname)
	If bname="Fullscreen" Then
		If role_c="EMEA" or role_c="Stop Bar" or role_c="GMG" Then
			bname="Show Logs"
		End if
	end if
	functionstart "GenericButtonYGet" & " " & bname
	click_button bname, objb, false, false
	y= objb.GetROProperty("y")
	'y= UIAWindow("Sensys Networks TrafficDOT").UIAButton(bname).GetROProperty("y")
	GenericButtonYGet=y
	functionend "GenericButtonYGet" & " " & y
End Function

function GenericButtonAbsXGet(byval bname)
	functionstart "GenericButtonAbsXGet" & " " & bname
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAButton(bname)
	If obj.Exist Then
		x= UIAWindow("Sensys Networks TrafficDOT").UIAButton(bname).GetROProperty("abs_x")
	else
		WriteToLogFile "button: " & bname & " not found"
	End If
	GenericButtonAbsXGet=x
	functionend "GenericButtonAbsXGet" & " " & x
End Function

function GenericButtonAbsYGet(byval bname)
	functionstart "GenericButtonAbsYGet" & " " & bname
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAButton(bname)
	If obj.Exist Then	
		y= UIAWindow("Sensys Networks TrafficDOT").UIAButton(bname).GetROProperty("abs_y")
	else
		WriteToLogFile "button: " & bname & " not found"
	End If
	GenericButtonAbsYGet=y
	functionend "GenericButtonAbsYGet" & " " & y
End Function

Sub SystemSave (byval buttonName, byval noYes, byval closeTD2)
		functionstart "SystemSave"
		If buttonName="Don't Save" Then
			WriteToLogFile "SystemSave: " & "confirm change from Don't Save to Exit"
			buttonName="Exit"
		End If
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if
		If lcase(Environment("OfflineMode"))="on" or offline_mode Then
			UIAWindow("Sensys Networks TrafficDOT").UIAButton("Save").Click:wait_custom 3
			ActivateOKbutton: wait_custom 10
			ActivateButton "Close": wait_custom 5
			Set obj = 	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Don't Save")
			If obj.Exist Then
				obj.click
			else
				ActivateButton "Exit": wait_custom "fixed15" 'bug needs fix
			End If
			wait_custom "fixed7"
			functionend "SystemSave" & " " & buttonName
			Exit Sub
		else
			If role_c="EMEA" Then
				UIAWindow("Sensys Networks TrafficDOT").UIAButton("Close").Click: wait_custom 5
			else
				wait_custom 1
				if CloseTrafficDot>0 then
					wait_custom "fixed15"
					functionend "SystemSave" & " " & buttonName
					Exit sub
				End If 	
				wait_custom "fixed5"
			End If
		end if
		If buttonName="Cancel" or buttonName ="Exit" Then
			Set objBE = UIButton(buttonName)
			If objBE.Exist Then
				objBE.Click
			else
				WritetoLogfile "button object:" & buttonname & " was not found. Coordinates were used instead!"  
				If buttonName="Exit" Then
					clickfromconfig 390, 410
				else
					clickfromconfig 315, 410
				End If
			End If
			wait_custom "fixed15"
			functionend "SystemSave" & " " & buttonName
			Exit sub
		End If
		If buttonName<>"Save_2" Then
			If buttonName<>"" Then
				wait_custom 3
				Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName)
				If obj.Exist Then
					obj.Click
				else
					Select Case lcase(buttonName)
						Case "save"
							clickfromconfig 461, 412
						Case "exit"
							clickfromconfig 390, 412
						Case "cancel"
							clickfromconfig 316, 412
					End Select
				End If
				wait_custom 3	
				If buttonName="Don't Save" or buttonName= "Exit" Then
					wait_custom "fixed15": functionend "SystemSave" & " " & buttonName
					Exit sub
				End If
			End If
		End If
		If buttonName="Save_2" Then
			Set objE = UIButton("Exit")
			If objE.Exist Then
				UIButton("Cancel").Click: wait_custom 5
			End If
			skip_validation_save_to_AP=true: btn_p="Yes":clickOK=true
			If noYes Then
				btn_p="OK"
				clickOK=false
			End If
			TrafficDotSave "", "", btn_p, false, false, clickOK
			skip_validation_save_to_AP=false
			If closeTD2 Then
				TrafficDotClose false, false
			End If
			functionend "SystemSave" & " " & buttonName
			Exit sub
			If noYes=false Then
				waitmore=false
				Do  while not waitmore
					wait_custom 3: waitmore=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Yes").Exist
					n=n+1
					If n>10*system_slow Then
						ReportTimeout "SystemSave: Yes", n
						Exit do
					End If
				loop
				n=0: ActivateYesButton: wait_custom "fixed7"
			End If: waitmore=true
			Do  while waitmore
				waitmore=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Copy To Clipboard").Exist
				If n>20*system_slow Then
					ReportTimeout "SystemSave: Copy To Clipboard", n
					Exit do
				End If
				n=n+1
			loop
		End If
		wait_custom "fixed15"
		If(Err.Number<>0) Then ValidationFailed "SystemSave", Err.Description
		functionend "SystemSave" & " " & buttonName
End Sub

Sub SystemSave_Absolute (byval buttonName, byval noYes)
		functionstart "SystemSave" & " " & buttonName
		x= ConnectButtonAbsXGet: y= ConnectButtonAbsYGet
		If lcase(Environment("OfflineMode"))="on" or offline_mode Then
			ActivateButton("Save"):wait_custom 3
			ActivateOKbutton: wait_custom 7
			wait_custom 1: mouseClick x-75, y-30, false: wait_custom 3: SelectItem 6: wait_custom 5
			ActivateButton("Exit") ' this is a bug needs fix and then remove this line
			Exit Sub
		else
			If role_last="EMEA" Then
				ActivateButton("Close"): wait_custom 5
			else
				wait_custom 1: CloseTrafficDot: wait_custom 5
			End If
		end if
		If buttonName="Cancel Exit" Then
			xxx=GenericButtonAbsXGet("Don't Save"): yyy=GenericButtonAbsYGet("Don't Save")
			wait_custom 1: mouseClick xxx-39, yyy+10, false: wait_custom 3
			ActivateButton (buttonName)
			Exit sub
		End If
		If buttonName<>"" Then
			ActivateButton (buttonName): wait_custom 1	
			If buttonName="Don't Save" Then
				Reporter.ReportEvent micDone, "SystemSave", "Closing TrafficDOT2"
				Exit sub
			End If
		End If
		If buttonName="Save_2" Then
			If noYes=false Then
				waitmore=false
				Do  while not waitmore
					wait_custom 3: waitmore=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Yes").Exist
					n=n+1
					If n>15 Then
						ReportTimeout "SystemSave: Yes button", n
						Exit do
					End If
				loop
			n=0: ActivateYesButton: wait_custom 5
			End If: waitmore=true
			Do  while waitmore
				waitmore=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Copy To Clipboard").Exist
				n=n+1: If n>15 Then
					ReportTimeout "SystemSave: Copy To Clipboard", n
					Exit do
				End If
			loop
		End If
		functionend "SystemSave"
End Sub

Function ActivateBackupAP()
	functionstart "ActivateBackupAP"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Backup").Click
	functionend "ActivateBackupAP"
End Function

Function BackupAP(byval filename, byval writetodb)
	functionstart "BackupAP"
	ActivateBackupAP: wait_custom 3
	FileUpload "Save Backup file", filename , "Save", true, "Sensys Networks TrafficDOT": wait_custom 7
	if writetodb Then
		db_LogsAdd filename
	end if
	functionend "BackupAP"
End Function

Function ExportImportDotTable (byval filename, byval Import)
	functionstart "ExportImportDotTable" & " " & filename
	APConfigTabSelect "Cmds": wait_custom 3
	If Import Then
	functionstart "ExportImportDotTable" & " import " & filename
		ActivateButton "Import Dot Table": wait_custom 5
		If UIAWindow("Sensys Networks TrafficDOT").UIAObject("Imported dots").Exist then
			ActivateYesButton: wait_custom 5
			FileUpload "Select dot csv to import", filename , "Open", true, "Sensys Networks TrafficDOT": wait_custom 7
		else
			ValidationFailed "ExportImportDotTable", filename 		
		End If
	else
		functionstart "ExportImportDotTable" & " export " & filename
		ActivateButton "Export Dot Table": wait_custom 10
		FileUpload "Save dot table file", filename , "Save", true, "Sensys Networks TrafficDOT": wait_custom 7
		db_LogsAdd filename
	End If
	functionend "ExportImportDotTable"
End Function

Function RestoreAP(byval filename, byval restoreMessage)
	functionstart "RestoreAP"
	ActivateRestoreAP: wait_custom 3
	FileUpload "Select file to use for restore", filename , "Open", true, "Sensys Networks TrafficDOT": wait_custom 7
	restoreon=true
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Uploading")
	Do while restoreon
		If obj.Exist then
				message=obj.GetROProperty("name")
				assertStringPartialStatus message, restoremessage, "RestoreAP", message
		End If
		ActivateOKbutton: wait_custom 3: restoreon=false
	loop: wait_custom 3
	functionend "RestoreAP"
End Function

Function ActivateRestoreAP()
	functionstart "ActivateRestoreAP"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Restore").Click
	functionend "ActivateRestoreAP"
End Function

Function AddSigns(byval fname)
	fnamel=lcase(fname)
	If instr(1, fnamel, "activate")>0 Then
		addsign="###"
	elseif instr(1, fnamel, "dotrafficdot2setup")>0 Then
		addsign="<><><>"
	elseif instr(1, fnamel, "apply")>0 Then
		addsign="###"
	elseif instr(1, fnamel, "test_")>0 Then
		addsign="+++"
	ElseIf instr(1, fnamel, "get")>0 Then
		addsign="^^^"
	ElseIf instr(1, fnamel, "save")>0 Then
		addsign="$$$"
	ElseIf instr(1, fnamel, "delete")>0 Then
		addsign="***"
	ElseIf instr(1, fnamel, "unmap")>0 Then
		addsign="***"
	ElseIf instr(1, fnamel, "drag")>0 Then
		addsign="->"
	ElseIf instr(1, fnamel, "validate")>0 Then
		addsign="==="
	ElseIf instr(1, fnamel, "assert")>0 Then
		addsign="==="
	ElseIf instr(1, fnamel, "verify")>0 Then
		addsign="==="
	ElseIf instr(1, fnamel, "confirm")>0 Then
		addsign="==="
	ElseIf instr(1, fnamel, "setup")>0 Then
		addsign="@@@"
	ElseIf instr(1, fnamel, "mouse")>0 Then
		addsign="~~~"
	ElseIf instr(1, fnamel, "shell")>0 Then
		addsign="%%%"
	ElseIf instr(1, fnamel, "edit")>0 Then
		addsign="%%%"
	ElseIf instr(1, fnamel, "select")>0 Then
		addsign="&&&"
	ElseIf instr(1, fnamel, "choose")>0 Then
		addsign="&&&"
	ElseIf instr(1, fnamel, "close")>0 Then
		addsign="{{{"
	ElseIf instr(1, fnamel, "check")>0 Then
		addsign="???"
	ElseIf instr(1, fnamel, "failed")>0 Then
		addsign="!!!"
	End If
	AddSigns=addsign
End Function

Function WriteToLogFile(byval str)
	print str: objFile.Write str & vbCrLf
End Function

Function WriteToFeatureFile (byval str, byval str1)
	if test_case_name_test Then exit function
	dbstr=replace(replace(replace(replace(replace(str, "&", "*"), "'", "*"), "%", "*"), "@", "*"), "#", "*")
	If instr(1, str, "Test_")>0 Then
		If skip_feature_file Then
			skip_feature_file=false
			Exit function
		End If
		print str: objFileF.Write str & vbCrLf
		db_AddTable dbstr
	else
		print str: objFileF.Write step_counter & ". " & str & " " & str1 & vbTab & vbCrLf
		step_counter=step_counter+1
		If 	not no_db_step_update then
			db_TestCaseStepAdd feature_table_name, dbstr
		End If

	End If	
End Function

function FunctionStart (byval fname)
	tname=fname
	If instr(1, lcase(fname), "click")>0 or _
		instr(1, lcase(fname), "chk")>0 or _
		instr(1, lcase(fname), "db_")>0 or _
		instr(1, lcase(fname), "login")>0 or _
		instr(1, lcase(fname), "newdotid")>0 or _
		instr(1, lcase(fname), "activateobject")>0 or _
		instr(1, lcase(fname), "select")>0 or _
		instr(1, lcase(fname), "uilist")>0 or _
		instr(1, lcase(fname), "force")>0 or _
		instr(1, lcase(fname), "cleartext")>0 or _
		instr(1, lcase(fname), "finished")>0 or _
		instr(1, lcase(fname), "boxclear")>0 or _
		instr(1, lcase(fname), "readXML2")>0 or _
		instr(1, lcase(fname), "confirmation")>0 or _
		instr(1, lcase(fname), "code")>0 or _
		instr(1, lcase(fname), "apswitch")>0 or _
		instr(1, lcase(fname), "button")>0 or _
		instr(1, lcase(fname), "assert")>0 or _
		instr(1, lcase(fname), "s_ucceeded")>0 or _
		instr(1, lcase(fname), "f_ailed")>0 or _
		instr(1, lcase(fname), "item")>0 or _
		instr(1, lcase(fname), "mouse")>0 or _
		instr(1, lcase(fname), "sendkeys")>0 or _
		instr(1, lcase(fname), "hide")>0 or _
		instr(1, lcase(fname), "showlogs")>0 or _
		instr(1, lcase(fname), "enabled")>0 or _
		instr(1, lcase(fname), "adobe")>0 or _
		instr(1, lcase(fname), "installed")>0 or _
		instr(1, lcase(fname), "ipaddress")>0 or _
		instr(1, lcase(fname), "check")>0 or _
		instr(1, lcase(fname), "send")>0 or _
		instr(1, lcase(fname), "adjust")>0 or _
		instr(1, lcase(fname), "listsearch")>0 or _
		instr(1, lcase(fname), "uiobject")>0 or _
		instr(1, lcase(fname), "install")>0 or _
		instr(1, lcase(fname), "message")>0 or _
		instr(1, lcase(fname), "get")>0 or _
		instr(1, lcase(fname), "version")>0 or _
		instr(1, lcase(fname), "cached")>0 or _
		instr(1, lcase(fname), "exist")>0 or _
		instr(1, lcase(fname), "set")>0 or _
		instr(1, lcase(fname), "must")>0 or _
		instr(1, lcase(fname), "deltas")>0 or _
		instr(1, lcase(fname), "unmapbyxy")>0 or _
		instr(1, lcase(fname), "winscp")>0 or _
		instr(1, lcase(fname), "filestoattach")>0 or _
		instr(1, lcase(fname), "readtests")>0 or _
		instr(1, lcase(fname), "setup")>0 or _
		instr(1, lcase(fname), "failedtests")>0 then
		if test_case_name_test Then
			MsgBox "Change Test Case Name!!!!!"
			exit function 
		end if
	elseif	instr(1, lcase(fname), "test_")>0 then
		WriteToFeatureFile tname, ""
	elseif	instr(1, lcase(fname), "validati")>0 then
		fname="Validation Step: " + fname
		WriteToFeatureFile fname, ""
	elseif	instr(1, lcase(fname), "validate")>0 then
		fname="Validation Step: " + fname
		WriteToFeatureFile fname, ""
	elseIf instr(1, lcase(fname), "readxml")>0 Then
		fname=replace(fname, "XML2", "")
		fname=replace(fname, "XML1", "")
		fname=replace(fname, "XML", "")
		fname="XML file validation Step: " & fname		
		WriteToFeatureFile fname, ""
	else
		WriteToFeatureFile fname, ""
	End If
	if test_case_name_test Then 
		FunctionStart=tname
		exit function
	end if

	print fname
	If instr(1, lcase(fname), "trafficdot2\assets")>0 Then
		WriteToFeatureFile fname, ""
	end if
	addsign=AddSigns(fname)
	time_f_start=TimeIt
	str=">start " & addsign & tname & " - " & TimeStamp
	If fname="AllTestsFinished" Then
			str="failed tests: " & vbnewline &_
							printfailedtests (f_Tests) & vbnewline &  "END: " & fname & " - " & TimeStamp
	End If
	WriteToLogFile str
End function

function NameTestCaseTest (byval testcasename)
	test_case_name_test=true
	if test_case_name_test then
		testcase= functionStart( testcasename)
		If testcase= testcasename Then
			msgbox "Passed!"
		End If
		
	end if
	test_case_name_test = false
	ExitRun 
end function

Sub FunctionEND(byval fname)
	addsign=AddSigns(fname)
	timeend=TimeIt
	str=fname & addsign & " <end: " & round((timeend-time_f_start), 1) & "(sec)" & " - " & TimeStamp
	WriteToLogFile str
End Sub

Function LZ(ByVal Number)
  If Number < 10 Then
    LZ = "0" & CStr(Number)
  Else
    LZ = CStr(Number)
  End If
End Function

Function TimeStamp
  Dim CurrTime
  CurrTime = Now()
  TimeStamp = CStr(Year(CurrTime)) & "-" _
    & LZ(Month(CurrTime)) & "-" _
    & LZ(Day(CurrTime)) & " " _
    & LZ(Hour(CurrTime)) & ":" _
    & LZ(Minute(CurrTime)) & ":" _
    & LZ(Second(CurrTime))
End Function

Function CloseConfigAddons
	functionstart "CloseConfigAddons"
	clickfromconfig 115, 80
	functionend "CloseConfigAddons"
End Function

Function CloseCurrentAddonStatus
	functionstart "CloseCurrentAddonStatus"
	clickfromconfig 90, 205
	functionend "CloseCurrentAddonStatus"
End Function

Sub TrafficDot2Version()
	If ver_check Then Exit sub
	If lcase(Environment("OfflineMode"))="on" or offline_mode Then
		Exit sub
	End If
	functionstart "TrafficDot2Version"
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("MenuBar").UIAObject("Help").Click: wait_custom 1
	UIAWindow("Sensys Networks TrafficDOT").UIAMenu("Menu").UIAObject("About").Click: wait_custom 1
	version_trafficdot2 = UIAWindow("Sensys Networks TrafficDOT").UIAObject("VersionID").GetROProperty("name")
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("CloseHELP").Click: wait_custom 1
	x_save=GenericButtonAbsXGet ("Save")
	y_save=GenericButtonAbsYGet ("Save")
	ver_check=true: db_BuildsAdd version_trafficdot2
	GatewayIDGet gwmodel, triggered
	functionend "TrafficDot2Version" & " " & version_trafficdot2
End Sub

Function TrafficDotSave (byval ValidationMessage1, byval ValidationMessage2, byval buttonName, byval skipSaveStart, byval partialvalid, byval clickOK)
		if lcase(Environment("Release_"))="on" Then
			On Error Resume Next
		end if
		functionstart "TrafficDotSave"
		TrafficDotSave=0
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Saving to AP_PopUp")
		If lcase(Environment("OfflineMode"))="on" or offline_mode Then
			If not skip_check_off_line Then
				skip_check_off_line=true
				TrafficDotSave SaveDOTPairMessage3(number_of_dot_pairs),"", "OK", false, true, false: wait_custom 1
			End If		
		End If
		skip_check_off_line=false
		If not skipSaveStart Then
			Click_button "Save", objS, true, true: wait_custom "fixed7"
			WriteToLogfile "Yellow Save triggered..."
			ignore_role_save=false
			If not ignore_role_save Then
				if role_c="EMEA" or env_role="EMEA"  Then
					if mapping_choice="bvd4" or mapping_choice="bvd20" Then
						WriteToLogFile "BVD program is running: " & mapping_choice
						wait_custom "fixed25": functionend "TrafficDotSave"
						exit function
					end if	
				end if
			else
				ignore_role_save=false
			End If
		End If: wait_custom 25
		If offline_mode Then
				ActivateButton "OK"
				WriteToLogfile "Offline mode OK"
				functionend "TrafficDotSave"
				Exit function
		End If
		fbutton=UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).Exist
		Do while not fbutton
			n=n+1: fbutton = UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).Exist: wait_custom 3
			If n>3 Then
				SendKeysShellTimes "{TAB}", 3, 1
				SendKeysShellTimes "{ENTER}", 1, 1: wait_custom 5
				fbutton = UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).Exist: wait_custom 3
				If not fbutton Then
					functionend "TrafficDotSave"
					ExitTestIncomplete "TrafficDotSave"
				End If
				functionend "TrafficDotSave"
				Exit Function			
				If b<2 Then
					b=b+1
					TrafficDotSave ValidationMessage1, ValidationMessage2, buttonName, skipSaveStart, partialvalid, clickOK
					Exit function
				End If
			End If
		loop
		wait_custom 5: ValidationMessages SaveToAPmessageGet(), ValidationMessage1, partialvalid, "TrafficDotSave"
		ActivateButton(buttonName): wait_custom 15
		'UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).Click: wait_custom 15
		If clickOK Then
			dim okb: okb=false
			Do  while not okb
				If ee>5 Then
						ValidationMessages SaveToAPmessageGet(), ValidationMessage2, partialvalid, "TrafficDotSave": wait_custom 1
						ClickFromConfig 334,513
						functionend "TrafficDotSave"
						Exit Function	
				End If
				okb = UIAWindow("Sensys Networks TrafficDOT").UIAButton("OK").Exist: wait_custom "fixed7"
				If okb Then
						ValidationMessages SaveToAPmessageGet(), ValidationMessage2, partialvalid, "TrafficDotSave": wait_custom 1
						'ActivateOKbutton: wait_custom "fixed7"
						ActivateButton "OK": wait_custom "fixed7"
						okb = UIAWindow("Sensys Networks TrafficDOT").UIAButton("OK").Exist: wait_custom 5
						If okb Then
							functionend "TrafficDotSave: " & "error5"
							ExitTestIncomplete "TrafficDotSave: OK button"
						End If
						functionend "TrafficDotSave"
						Exit Function
				End If 
				ee=ee+1
			loop
		End If		
		stillthere=UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).Exist
		If stillthere Then
			ActivateButton (buttonName)
			'UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).Click
			WriteToLogfile "Button triggered: " & buttonName
			Do  while stillthere
				n=n+1
				If n>5 Then
					functionend "TrafficDotSave: " & "error0"
					ExitTestIncomplete "TrafficDotSave: stillhere"
				End If
				stillthere=UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).Exist
			loop
		End If
		If obj.Exist Then
			functionend "TrafficDotSave" & ": error1"
			ExitTestIncomplete "TrafficDotSave"
		End If
		If err.Number>0 Then
			functionend "TrafficDotSave" & "error2"
			ExitTestIncomplete "TrafficDotSave: " & err.Description
		End If
		functionend "TrafficDotSave"
End Function

Sub TrafficDotSave_Absolete (ValidationMessage1, ValidationMessage2, buttonName, skipSaveStart, partialvalid, clickOK)
		functionstart "TrafficDotSave" & " " & buttonName
		
		If lcase(Environment("OfflineMode"))="on"or offline_mode Then
			If not skip_check_off_line   Then
				skip_check_off_line=true
				TrafficDotSave SaveDOTPairMessage3(number_of_dot_pairs), "", "OK", false, true, false: wait_custom 1
				functionend "TrafficDotSave" & " " & buttonName
				Exit sub
			End If
		End If
		
		skip_check_off_line=false
		
		If not skipSaveStart Then	
			ActivateButton "Save": wait_custom 1
		End If
		
		wait_custom 20: set btn = UIButton(buttonName): fbutton=btn.Exist
	
		Do while not fbutton
			
			n=n+1: fbutton = btn.Exist: wait_custom 3
			
			If n>10 Then
				
				SendKeysShellTimes "{TAB}", 3, 1: SendKeysShellTimes "{ENTER}", 1, 1
				
				Exit Sub
				
				If b<2 Then
						b=b+1
						TrafficDotSave ValidationMessage1, ValidationMessage2, buttonName, skipSaveStart, partialvalid, clickOK
						Exit do
				End If
				
			End If
		loop
		wait_custom 5: ValidationMessages SaveToAPmessageGet(), ValidationMessage1, partialvalid, "TrafficDotSave"
		UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).click: wait_custom "fixed7"
		If clickOK Then
			Dim okb: okb=false
			Do  while okb=false
				If ee>5 Then
						ValidationMessages SaveToAPmessageGet(), ValidationMessage2, partialvalid, "TrafficDotSave": wait_custom 1
						ClickFromConfig 360,511: exit sub
				End If
				okb=UIAWindow("Sensys Networks TrafficDOT").UIAButton("OK").Exist:wait_custom 1
				If okb Then
						ValidationMessages SaveToAPmessageGet(), ValidationMessage2, partialvalid, "TrafficDotSave": wait_custom 1
						ActivateOKbutton
						Exit sub
				End If 
				ee=ee+1
			loop
		End If
		stillthere=btn.Exist
		If stillthere Then
			UIAWindow("Sensys Networks TrafficDOT").UIAButton(buttonName).click: wait_custom 5
			Do  while stillthere
				n=n+1
				If n>10 Then
						ReportTimeout "TrafficDotSave", n
						Exit sub
				End If
				stillthere=btn.Exist
			loop
		End If
		functionend "TrafficDotSave"
End Sub

Function SaveToAPmessageGet()
	functionstart "SaveToAPmessageGet"
	If skip_validation_save_to_AP Then
		functionend "SaveToAPmessageGet"
		Exit Function
	End If
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Saving to AP")
	exists= obj.Exist
	Do  while not exists
		wait_custom 1: exists= obj.Exist
		If n>5 Then
			ValidationFailed "SaveToAPmessageGet", "Cannot find Save To AP Dialog"
			Exit function
		End If
		n=n+1
	loop
	SaveToAPmessageGet = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Saving to AP").GetROProperty("name")
	functionend "SaveToAPmessageGet"
End Function

Sub ValidationMessages (byval Message, byval ValidationMessage, byval partialMatch, byval Details)
	functionstart "ValidationMessages" & " " & Message & " " & ValidationMessage
	If 	skip_validation_save_to_AP Then
		functionend "ValidationMessages: skipped"
		Exit Sub	
	End If
	If partialMatch Then
		If instr(1, lcase(Message), "error")>0 Then
			ValidationFailed "ValidationMessages", Details & " error detected"
		else
			assertStringPartialStatus Message, ValidationMessage, Details, ValidationMessage
		End If
	else
			assertStringEquals Message, ValidationMessage, Details, ValidationMessage
	End If
	functionend "ValidationMessages"
End Sub

Sub ActivateMapButton
	click_button "Map Info & Image", objb1, true, false: wait_custom 7
	Exit sub
	functionstart "ActivateMapButton"
	x=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map Layers").GetROProperty("abs_x")
	y=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map Layers").GetROProperty("abs_y")
	w=UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map Layers").GetROProperty("width")
	mouseClick x+w/2, y-45, false: wait_custom 3
	functionend "ActivateMapButton"
End Sub

Sub FileUpload(byval wtitle, byval filepathandname, byval buttonname, byval shell, byval parentwindow)
	filepathandname=replace(filepathandname, "\ ", "\")
	functionstart "FileUpload" & " " & filepathandname
	Repository.Value("fileSelect_title")=wtitle: wait_custom 1
	If shell Then
		SendKeysShell filepathandname, 2 : wait_custom 3
	else
		Set obj = UIAWindow(parentwindow).UIAWindow("File Select Popup").UIAComboBox("File name:").UIAEdit("File name:"): wait_custom 5
		obj.type filepathandname
	end if 
	wait_custom 3
	UIAWindow(parentwindow).UIAWindow("File Select Popup").UIAButton(buttonname).Click
	functionend "FileUpload"
End Sub

Sub MapButtonActivate
	Click_button "Map Info & Image", onjm, true, false: exit sub
	functionstart "MapButtonActivate"
	Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map Info & Image")
	If obj1.Exist Then
		obj1.Click
	else
		oops "", tryid
		MapButtonActivate: exit sub
	End If
	functionend "MapButtonActivate"
End Sub


Sub UploadMapFile (byval FilePath, byval FileName, byval validate)
	functionstart "UploadMapFile" & " " & FilePath & " " & FileName
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Upload Intersection Template")
	Set obj1 = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Map Info & Image")
	uploadbutton=false
	do while not uploadbutton 
		if counter>2 then
			mouseCLickFromConfig xx, yy
		else
			click_button "Map Info & Image", objb1, true, false: wait_custom 7
			'obj1.Click: wait_custom 3
		end if
		if obj.Exist then
			'obj.Click: wait_custom 7
			click_button "Upload Intersection Template or Map Upload", objb1, true, false: wait_custom 7
			uploadbutton=true
		end if
		counter=counter+1
	loop
	wtitle= "Please select a jpg, png or gif file containing a map..."
	FileUpload wtitle, FilePath+FileName, "Open", false, "Sensys Networks TrafficDOT": wait_custom 3
	If validate Then
		Repository.Value("ImageFileName")="Image File: " + FileName
		Set obj = 	UIAWindow("Sensys Networks TrafficDOT").UIAObject("Image File: 3x2-lanes.png")
		If obj.Exist Then
			ValidationSucceeded "UploadMapFile", FileName
		else
			ValidationFailed "UploadMapFile", "file was not uploaded"
		End If
	End If
	functionend "UploadMapFile"
End Sub

Function WriteConfigFiletoAPConfirm
		functionstart "WriteConfigFiletoAPConfirm"
		If UIAWindow("Sensys Networks TrafficDOT").UIAObject("This will write the chosen").Exist then
			ActivateYesbutton: wait_custom 3
		End If
		functionend "WriteConfigFiletoAPConfirm"
End Function

Function GatewayInfo_button
	functionstart "GatewayInfo_button"
	UIButton("Gateway Info").click
	functionend "GatewayInfo_button"
End Function

Function ActivateAPInfo()
	GatewayInfo_button: exit function
	functionstart "ActivateAPInfo"
	UIAWindow("Sensys Networks TrafficDOT").UIAButton("Gateway Info").Click: wait_custom 1
	functionend "ActivateAPInfo"
End Function

Function ReadAPInfoTable (byval skipMenue, byval sensor1, byval sensor2)
		functionstart "ReadAPInfoTable" & " " & sensor1 & " " & sensor2
		if not skipMenue then
			UIAWindow("Sensys Networks TrafficDOT").UIAButton("Gateway Info").Click: wait_custom 1
		else
			UIAWindow("Sensys Networks TrafficDOT").UIAObject("Access Point").Click: wait_custom 1
		end if
		UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_AP").UIAObject("Pairings").Click: wait_custom 3
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAList("List_AP_Info")
		Set itms=obj.GetItems
		ReDim Preserve aTable(itms.Count):ReDim Preserve aSensors(itms.Count)
		' bug should be fixed for Separation (ft) figure and Lenghth Correcttion (ft)
		'Leading Dot 004E Trailing Dot A8FA Sensor Separation (ft) 609 Vehicle Length Correction (ft) 0
		For rowCount = 1 To itms.Count	
			itmname=(itms.item(rowCount))
			s1=instr(1, itmname, sensor1)
			s2=instr(1, itmname, sensor2)
			If s1>0 and s2>0 then 
				ValidationSucceeded "ReadAPInfoTable", itmname
			else
				ValidationFailed "ReadAPInfoTable", sensor1 & ":" & sensor2 & ":" & itmname
			End If
		Next	
		UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_AP").UIAObject("Gateway Config").Click: wait_custom 1
		functionend "ReadAPInfoTable"
End Function

Function APInfoTabsPress(byval tabname)
	functionstart "APInfoTabsPress" & " " & tabname
	Set objt=UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_GW")
	Set objt1 = UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_AP")
	If objt.Exist Then
		objt.UIAObject(tabname).Click: wait_custom 1
	else
		objt1.UIAObject(tabname).Click: wait_custom 1
	End If
	functionend "APInfoTabsPress"
End Function

Function TabItemsPress(byval activatetab, byval tname, byval iname)
	functionstart "TabItemsPress" 
	If activatetab Then 
		UITabGroupItem tname, true, false, 10
	end if
	wait_custom 3: UITabGroupItem iname, true,  false
	functionend "TabItemsPress"
End Function

Function ControllerCardConfigTabs(byval tabname)
		functionstart "ControllerCardConfigTabs"& " " & tabname
		Select Case tabname
			Case "Info"
				clickfromconfig 300, 100: wait_custom 3 
			Case "Channels"
				clickfromconfig 245, 100: wait_custom 3 
			Case "Commands"
				clickfromconfig 170, 100: wait_custom 3
		End Select
		functionend "ControllerCardConfigTabs"
End Function


Function FlexControllerTabItemsPress(byval activatetab, byval tname, byval iname)
	functionstart "FlexControllerTabItemsPress"& " " & tname & " " & iname
	If activatetab Then 
		ControllerCardConfigTabs "Channels"
	end if
	xch=290: ych=130: m=45
	Select Case iname
		Case "Ch 1", "Ch 5", "Ch 9", "Ch 13"
			clickfromconfig xch, ych 
		Case "Ch 2", "Ch 6", "Ch 10", "Ch 14"
			clickfromconfig xch-m, ych 
		Case "Ch 3", "Ch 7", "Ch 11", "Ch 15"
			clickfromconfig xch-m*2, ych 
		Case "Ch 4", "Ch 8", "Ch 12", "Ch 16"
			clickfromconfig xch-m*3, ych 
	End Select
	functionend "FlexControllerTabItemsPress"
End Function

Function SensorTabsPress(byval items, byval tabname)
	functionstart "SensorTabsPress" & " " & tabname & " " & items
	Repository.Value("submenue0")=items
	Repository.Value("tab_name")=tabname
	UIAWindow("Sensys Networks TrafficDOT").UIATab("Tab_Sensor").UIAObject("Tab_Generic").Click: wait_custom 1
	functionend "SensorTabsPress"
End Function

Function ReadMicroRadarTable ()
		functionstart "ReadMicroRadarTable"
		Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAList("List")
		Set itms=obj.GetItems
		ReDim Preserve aTable(itms.Count):ReDim Preserve aSensors(itms.Count)
		For rowCount = 1 To itms.Count	
			itmname=(itms.item(rowCount))
			iii=instr(1, itmname, "ID"):modei=instr(1, itmname, "Mode: µ")
			
			If modei>0 then
				sensorfromtable=mid (itmname,iii+4, 4)
				aSensors(tablecount)=sensorfromtable
				rowinfo="table view: " &  tableNameOrView & " row:" & itmname   
				Reporter.AddRunInformation itmname, rowinfo
				aTable(rowCount-1)=itmname
				sensorfromtable=mid (itmname,iii+4, 4)
				aSensors(rowCount-1)=sensorfromtable
				rowinfo="table view: " &  tableNameOrView & " row:" & itmname   
				Reporter.AddRunInformation itmname, rowinfo
				aTable(tablecount)=itmname
				tablecount=tablecount+1
			End If
		Next
	
		ReDim Preserve aTable(tablecount):ReDim Preserve aSensors(tablecount)
				
		for a = UBound(aSensors) - 1 To 0 Step -1
		    for j= 0 to a
		        if aSensors(j)>aSensors(j+1) then
		            temp=aSensors(j+1)
		            aSensors(j+1)=aSensors(j)
		            aSensors(j)=temp
		        end if
		    next
		next	
		sensor_in_test=aSensors(1)
		functionend "ReadMicroRadarTable"
End Function

function TimeIt
	TimeIt=Timer
end function

function TimeLeft ()
	functionstart "TimeLeft"
	ave_time=time_in_run/testcasesRun
	ave_time= (ubound(enabledTestCases)-testcasesRun)/ave_time
	functionend "TimeLeft"
end function

Function SearchTable (byval sensorName, byval tableNameOrView, byval onlyNdigits)
	functionstart "SearchTable" & " " & tableNameOrView & " " & sensorName
	If onlyNdigits>0 Then
		sensorName1=left(sensorName, 3)
	else
		sensorName1=sensorName
	End If
	x = GenericButtonAbsXGet("Search"): y = GenericButtonAbsYGet("Search")
	UIEdit "Edit_TTable_Search", cStr(sensorName1)
	mousePoint x+30,y+5: mouseClick x+30, y+5, false: wait_custom 3
	ReadTable UIListTable("List"), tableNameOrView, false, false, "", false, "", false
	assertStringEquals sensorName, sensor_in_test, "SearchTable", sensor_in_test	
	functionend "SearchTable"
End Function

Function ReadTable (byval obj, byval tableNameOrView, byval noneMicroOnly, byval sortAlpha, byval expected, byval validate, byval validations, byval partialvalidation)
		functionstart "ReadTable" & " " & tableNameOrView
		Set itms=obj.GetItems
		ReDim Preserve aTable(itms.Count): ReDim Preserve aSensors(itms.Count)
		If expected="" and tableNameOrView="AP Pairings" Then
			If itms.Count=0 Then
				ValidationSucceeded tableNameOrView, "pairings cleared"
				functionend "ReadTable"
				Exit function
			else
				ValidationFailed tableNameOrView, "pairings not cleared"
				functionend "ReadTable"
				Exit function
			End If
		End If		
		For rowCount = 1 To itms.Count
			itmname=(itms.item(rowCount))
			If validate Then
			
				runtimevalue = replace(replace(itmname, vbLf, ""), " ", "")
				expectedvalue = replace(validations(rowCount-1), " ", "")
				
				print runtimevalue: print expectedvalue
				
				If partialvalidation Then
					assertStringPartialStatus runtimevalue, expectedvalue, "ReadTable",""
				else
					If runtimevalue=expectedvalue Then
						ValidationSucceeded "ReadTable", itmname
					else
						ValidationFailed "ReadTable", itmname
					End If
				End If		
			End If
			If tableNameOrView="AP Pairings" Then
				If instr(1, itmname, expected)>0 Then
					ValidationSucceeded tableNameOrView, expected
					functionend "ReadTable"
					Exit function
				End If
			else
				iii=instr(1, itmname, "ID"):modei=instr(1, itmname, "Mode: µ")
				If modei>0  and noneMicroOnly then
				else
					sensorfromtable=mid (itmname,iii+4, 4)
					aSensors(tablecount)=sensorfromtable
					rowinfo="table view: " &  tableNameOrView & " row:" & itmname   
					Reporter.AddRunInformation itmname, rowinfo
					aTable(rowCount-1)=itmname
					sensorfromtable=mid (itmname,iii+4, 4)
					aSensors(rowCount-1)=sensorfromtable
					rowinfo="table view: " &  tableNameOrView & " row:" & itmname   
					Reporter.AddRunInformation itmname, rowinfo
					aTable(tablecount)=itmname
					tablecount=tablecount+1
				End If
			End If
		Next
		If sortAlpha Then
			ReDim Preserve aTable(tablecount):ReDim Preserve aSensors(tablecount)
			for a = UBound(aSensors) - 1 To 0 Step -1
			    for j= 0 to a
			        if aSensors(j)>aSensors(j+1) then
			            temp=aSensors(j+1)
			            aSensors(j+1)=aSensors(j)
			            aSensors(j)=temp
			        end if
			    next
			next
		End If
		If tableNameOrView="AP Pairings" then
			ValidationFailed tableNameOrView, itmname
		else
			sensor_in_test=aSensors(0)
		end if
		functionend "ReadTable"
End Function

Sub SelectItem (byval SelectorID)
	functionstart "SelectItem"
	For i = 0 To SelectorID-1 Step 1
   		SendKeysShell "{DOWN}", 2
    Next
	wait_custom 1: SendKeysShell "{ENTER}", 2
	functionend "SelectItem"
End Sub

Sub SelectItemDir (byval SelectorID, byval Direction)
	functionstart "SelectItemDir" & " " & cstr(SelectorID)
	For i = 0 To SelectorID-1 Step 1
   		SendKeysShell "{" & Direction & "}", 2
    Next
	wait_custom 1: SendKeysShell "{ENTER}", 2
	functionend "SelectItemDir"
End Sub

Sub MoveKeyUp (byval upTimes)
	functionstart "MoveKeyUp"
	For i = 1 To upTimes Step 1
   		SendKeysShell "{UP}", 2
    Next
	functionend "MoveKeyUp"   
End Sub

Sub SelectItemSpecial (byval SelectorID)
	functionstart "SelectItemSpecial"
	Dim mouse : Set mouse = CreateObject("WScript.Shell")

	If SelectorID="" Then
		Exit Sub
	End If
	
	For i = 0 To SelectorID-1 Step 1
   		mouse.Run "nircmd sendkey down press": wait_custom 1
    Next
	wait_custom 1: mouse.Run "nircmd sendkey enter press"
	Set mouse = Nothing
	functionend "SelectItemSpecial"
End Sub

Sub messageBOX(byval posid, byval value)
	'msgbox posid & ": " & value
End Sub

Sub SendKeysShell (byval Keys, byval Delay)
	functionstart "SendKeysShell" & " " & Keys
	On error resume next
	Set WshShell = CreateObject("WScript.Shell")
	WshShell.SendKeys Keys
	if Delay<>0 then wait_custom Delay
	Set WshShell = Nothing
	functionend "SendKeysShell"
End Sub

Sub SendKeysShellTimes (byval Keys, byval times, byval Delay)
	functionstart "SendKeysShellTimes" & " " & Keys
	On error resume next
	Set WshShell = CreateObject("WScript.Shell")
	For Iterator = 1 To times Step 1
		WshShell.SendKeys Keys
		if Delay<>0 then wait_custom Delay
	Next
	Set WshShell = Nothing
	functionend "SendKeysShellTimes"
End Sub

Sub MoveMouseOver(byval x,byval y)
	functionstart "MoveMouseOver"
	Set oAutoIt = CreateObject("AutoItX3.Control")
	oAutoIt.MouseClick  x,y 
	Set oAutoIt = Nothing
	functionend "MoveMouseOver"
End Sub

Sub ClearEditBox (byval NumerOfTabs)
	functionstart "ClearEditBox"
	For y = 0 To NumerOfTabs-1
   		SendKeysShell "{TAB}",1
		Next
	SendKeysShell "{DEL}",1	
	functionend "ClearEditBox"
End Sub

function TestComputerIPAddress
	functionstart "TestComputerIPAddress"
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
	strQuery = "SELECT * FROM Win32_NetworkAdapterConfiguration WHERE MACAddress > ''"

	Set objWMIService = GetObject( "winmgmts://./root/CIMV2" )
	Set colItems      = objWMIService.ExecQuery( strQuery, "WQL", 48 )

	For Each objItem In colItems
   	 	If IsArray( objItem.IPAddress ) Then
        	If UBound( objItem.IPAddress ) = 0 Then
            	strIP = "IP Address: " & objItem.IPAddress(0)
        	Else
        		strIPv4 = "IP Address: " & objItem.IPAddress(0)
            	strIP = "IP Addresses: " & Join( objItem.IPAddress, "," )
        	End If
    	End If
	Next
	TestComputerIPAddress=strIPv4
	computer_ip_address=strIP
	functionend "TestComputerIPAddress" & strIP
end function

function TestComputerName
	functionstart "TestComputerName"
	if lcase(Environment("Release_"))="on" Then
		On Error Resume Next
	end if
	Set wshShell = CreateObject( "WScript.Shell" )
	TestComputerName = wshShell.ExpandEnvironmentStrings( "%COMPUTERNAME%" )
	computer_name=TestComputerName
	functionend  "TestComputerName: " & TestComputerName
end function

Function UtilitiesAutoConfigSettings (byval mappings, byval gsens)
	functionstart "UtilitiesAutoConfigSettings"
	Tools "Utilities...", "Show Auto-Config Settings", "": wait_custom "fixed7"
	Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Util_AutoConfig")
	If obj.Exist Then
		message= obj.GetROProperty("name")
		If instr(1, lcase(message), "controller card")> 0 Then
			if lcase(mappings)="cc" Then
				mappings="Controller Card"
			end if
		end if
		if instr(1, lcase(message), "scoot/mova")> 0 then
			if lcase(gsens)="sm" Then
				gsens="Scoot/Mova"
			end if
		End If
		If instr(1, message, "APGI")>0 Then
			WriteToLogFile message
			mappings="apgi"
			mapping_choice="apgi"
		End If
		If lcase(gsens)="o" Then
			if instr(1, lcase(message), "other")> 0 then
				gsens="Other"
			end if
		ElseIf lcase(gsens)="c"  Then
			if instr(1, lcase(message), "count")> 0 then
				gsens="Count"
			end if
		End If

		assertStringEquals message, AutoConfigSettingsMessage(mappings, gsens), "UtilitiesAutoConfigSettings", "": wait_custom 3
		ActivateOKbutton: wait_custom 3
	else
		If count_pop_up<1 Then
			count_pop_up=count_pop_up+1
			ActivateOKbutton:  wait_custom 3: UtilitiesAutoConfigSettings mappings, gsens: exit function
		End If
		ValidationFailed "UtilitiesAutoCongigSettings", "Pop-up is missing"
	End If
	functionend "UtilitiesAutoConfigSettings"
End Function

Function TestFinished(byval errorcode, byval name)
	
	functionstart "TestFinished: " & name

	computerinfo=vbnewline & TestComputerName & "(" & TestComputerIPAddress & ")" & vbnewline & _
				"OS: " & GetOS & vbnewline
	
	result = TEST_RESULT_PASSED
					
	details="test details:" & vbnewline & vbnewline			
	
	db_FailedStepsSearch name, failedteststeps
	
	If errorcode<>"" Then test_failed=true
	
	If test_failed or failedteststeps <> "" Then
	
		result = TEST_RESULT_FAILED
		
		complete_status="Complete: " & result & "(" & cStr(fails_counter) & ") " & vbnewline & _
						testinfo
		failedTests (name)
		
		details=details + "failed steps: " + vbnewline +failedteststeps +vbnewline+vbnewline
	End If

	testinfo = details & vbnewline & "test computer: " & computerinfo & vbnewline & _
					"results details: " & vbnewline & Reporter.ReportPath
					
	complete_status="Complete: " & result & vbnewline & _
					testinfo
	
	If sensors_list<>"" Then sensors_list= Left (sensors_list, len(sensors_list)-1)

	failed_tests = join (f_Tests,  ";;")
	
	tarray=EnabledTests()
	
	If ubound(tarray_global)<0 Then
		For iii = 0 To ubound(tarray) Step 1
			ReDim Preserve tarray_global(UBound(tarray_global)+1)
			tarray_global(UBound(tarray_global))=tarray(iii)
		Next
	End If

	for iii = 0 to UBound(tarray_global)
		If tarray_global(iii)=name or tarray_global(iii)=name + " (Failed)" or tarray_global(iii)=name + " (" + TEST_RESULT_PASSED + ")" Then
			if (instr(1, failed_tests, name)>0) then
				tarray_global(iii)=tarray_global(iii) + " (" + TEST_RESULT_FAILED + ")"
			else
				tarray_global(iii)=tarray_global(iii) + " (" + TEST_RESULT_PASSED + ")"
			end if
		end if
	next
	
	For iii = 0 To ubound(tarray_global)
		print tarray_global(iii)
	Next

	subject = setup_info & vbnewline & gw_model & vbnewline & vbnewline &_
							version_trafficdot2 & vbnewline &_
							printsubject (tarray_global, name)
	
	tests_run=tests_run+1: time_finish=TimeIt
	
	time_test_case = Round ((time_finish-time_start)/60, 2)
	
	average_test_case_run_time= Round(((time_finish-time_zero)/tests_run)/60, 2)
	
	if (instr(1, name, "EMEA")>0) then
		mch =mapping_choice
		gls=global_sensitivity
	else
		mch="n/a": gls="n/a"
	end if
			
	if lcase(Environment("Release_"))="on" Then
		sendTo=Environment("SendTo_Results_Release")
	else
		sendTo=Environment("SendTo_Results")
	end if
	
	test_status_d=result
	
	db_TestRunsAddUpdate name, test_run_db_id, true: db_TestCaseUpdate name
	
	SendGmail sendTo, name, GroupOfTestsSet + name & ": " &  complete_status & ": " & errorcode  &_
							vbnewline & vbnewline & _
							"test run time: " & cStr(time_test_case) & " min" & vbnewline & vbnewline &_
							"test devices: " & sensors_list &_
							vbnewline & "mapping setting: " & mch & " " & "global sensitivity: " & gls &_
							vbnewline & vbnewline & subject						
	
	resetTDConnect: test_failed=false: 	fails_counter=0	: number_of_tries=0: mpc_settup=true
	step_counter=1: prtscreen_file_name="": prtscreen_file_name1="": system_slow=1: no_config_button=false
	sensor_on_zone=false: changeRF_messages=false: gui_validate=false: overwrite_skip_test=false: sensors_list=""
	new_mapping_choice="": finally_done=false: any_file = "c:\nosuchfile.txt": wait_custom "fixed10"
	offline_mode=false: login_try=1: dont_check_duplicate_step=false: dont_drop_table=false: connect_error=false
	skiped_db_buid=false: got_new_build=false: build_new_folder="": Repository.Value("sensorZoneName")=""
	skip_start_email=false: skip_confirm_popup=false: time_test_case=1.00: app_role_set="Standard":	ui_sensor_test=false
	mapping_choice="": bvd_address_set=false: skip_up_units=false

	If not check_active_gw Then
		check_active_gw=true: ver_check=false
		DoTrafficDot2Setup name, false
	End If

	ReDim test_case_errors(-1)
	
	db_NodeUpdate computer_name, NODE_STATUS_SHORT_BREAK

	functionend "TestFinished"
	functionend name & "+++"
	
End Function


Function ASSERT(ByVal intTriggerCode)
	Exit Function
	environment.LoadFromFile env_path_changed
	if lcase(Environment("Release_"))="on" Then
	On Error Resume Next
				end if
	ASSERT = Environment("TRIGGER_"&intTriggerCode)
	If(Err.Number<>0)Then
		details=Err.Source & ",  " & Err.Description
		WriteToLogFile "ASSERT: " & details
		SendGmail "", test_case_name, errorcode
		Err.Clear
		ASSERT = ""		
		KillTrafficDOT2
	End If
	Execute(ASSERT)
End Function

Function ForceCloseTD2
	functionstart "ForceCloseTD2"
	Dim oShell : Set oShell = CreateObject("WScript.Shell")
	Set obj0 = UIAWindow("TrafficDOT 2")
	If obj0.Exist Then
		oShell.Run "taskkill /im TrafficDOT2.exe", , True:wait_custom "15fixed"
		functionend "ForceCloseTD2"
		Exit function
	End If	
	functionend "ForceCloseTD2"
End Function

Function ForceCloseActiveTD2
	functionstart "ForceCloseActiveTD2"
	Dim oShell : Set oShell = CreateObject("WScript.Shell")
	If UIAWindow("STD2").Exist then
		STD2Close(): wait_custom "fixed7"
		Set obj1 = UIAWindow("STD2").UIAButton("Don't Save")
		Set obj2 = UIAWindow("STD2").UIAButton("Exit")
		if obj1.Exist then
			obj1.Click(): wait_custom 10
			functionend "ForceCloseActiveTD2"
			Exit function
		ElseIf obj2.Exist Then
			obj2.Click(): wait_custom 10
			functionend "ForceCloseActiveTD2"
			Exit function
		end if	
		oShell.Run "taskkill /im TrafficDOT2.exe", , True:wait_custom "5fixed"
	End If
	functionend "ForceCloseActiveTD2"
End Function

Function KillTrafficDOT2()
	TrafficDotClose false, false: exit function
	functionstart "KillTrafficDOT2"
	
	Dim oShell : Set oShell = CreateObject("WScript.Shell")
	
	If UIAWindow("Sensys Networks TrafficDOT").Exist(5) then
		
		oShell.Run "taskkill /im TrafficDOT2.exe", , True: wait_custom "15fixed"
		
		Set obj = UIButton("Exit")
		Set obj1 = UIButton("Don't Save")
		Set obj2 = UIButton("OK")
		
		wait_custom "fixed10"
		
		If obj.Exist Then
			obj.Click(): wait_custom 10
			functionend "KillTrafficDOT2"
			Exit function
		elseif obj1.Exist then
			obj1.Click(): wait_custom 10
			functionend "KillTrafficDOT2"
			Exit function
		elseif obj2.Exist then
			obj2.Click(): wait_custom 10
			functionend "KillTrafficDOT2"
			Exit function
		End If
		dontsave = UIAWindow("Sensys Networks TrafficDOT").UIAButton("Don't Save").Exist
		If dontsave then
			UIAWindow("Sensys Networks TrafficDOT").UIAButton("Don't Save").Click
		End If
	End If
	functionend "KillTrafficDOT2"
End Function

Function ExitTestEx() 
	functionstart "ExitTestEx"
	Print "Exiting test " & Environment("TestName")
	Set Shell = CreateObject("Wscript.Shell")
	ExitTestEx = Shell.Run("CMD /C "&Environment("UFT_STOP_SCRIPT"), 1, false)
	Set Shell = Nothing
	functionend "ExitTestEx"
End Function

Sub mouseClick (byval xx ,byval yy, shiftDown)
	functionstart "mouseClick" & " " & xx & "," & yy
 	Dim mouse : Set mouse = CreateObject("WScript.Shell")
	With mouse
	 	If shiftDown Then
			.Run "nircmd sendkey shift down"
	 	End If
    	.Run "nircmd setcursor " & xx & " " & yy, 0, True
    	.Run "nircmd sendmouse left click", 0, True
	End With
	Set mouse = Nothing
	functionend "mouseClick"
End  Sub

Sub mousePoint(xx, yy)
	functionstart "mousePoint" & " " & xx & "," & yy
	Dim mouse: Set mouse = CreateObject("WScript.Shell")
	With mouse
	 		.Run "nircmd setcursor " & xx & " " & yy, 0, True
	End With
	Set mouse = Nothing
	functionend "mousePoint"
end sub

Function SensorChangeRFchannelMessage(byval sensorName, byval channel)
	functionstart "SensorChangeRFchannelMessage"
	Dim params(1)
	params(0)=channel
	params(1)=sensorName
	SensorChangeRFchannelMessage=MessagesParamsSet ("Messages_0032", params)							
	functionend "SensorChangeRFchannelMessage"
End Function

Function ConfigureRepeaterMessage (byval sRepeater1, byval sRepeater2)
	functionstart "ConfigureRepeaterMessage"
	apname = Environment("APname")
	ConfigureRepeaterMessage= "Choosing Yes will configure Repeater " &_
							sRepeater2 & " to talk to Repeater " & sRepeater1 & "." & _
							"*" & _
							"Do you wish to continue?" & "*" &_
							"TDConfig_" & apname & ".csv written " &_
							"to your Documents directory at save time"
	functionend "ConfigureRepeaterMessage"
End Function

Function ConfigureSensorMessage (byval sSensor, byval sRepeater)
	functionstart "ConfigureSensorMessage" & " " & sSensor
	apname = Environment("APname")
	ConfigureSensorMessage= "Choosing Yes will configure Sensor " &_
							sSensor & " to talk to Repeater " & sRepeater & "." & _
							"*" & _
							"Do you wish to continue?" & "*" &_
							"TDConfig_" & apname & ".csv written " &_
							"to your Documents directory at save time"
	functionend "ConfigureSensorMessage"
End Function

Function ConfigureSensorControllerMessage (byval sSensor, byval sController, byval channel)
	functionstart "ConfigureSensorControllerMessage"
	Dim params(2)
	params(0)=sSensor
	params(1)=sController
	params(2)=channel
	ConfigureSensorControllerMessage=MessagesParamsSet ("Messages_0028", params)							
	functionend "ConfigureSensorControllerMessage"
End Function

Sub GripAndDragObjects (byval xx, byval yy, byval xx1, byval yy1, byval confirmessage, byval childname, byval parentname)
	cooordsprint = xx & "," & yy & " " & xx1 & "," & yy1
	If childname=parentname Then
		functionstart "GripAndDragObjects" & " " & "move" & " " & parentname & " " & cooordsprint
	else
		functionstart "GripAndDragObjects" & " " & childname & "->" & parentname & " " & cooordsprint
	End If
	With CreateObject("WScript.Shell")
   			.Run "nircmd setcursor " & xx & " " & yy, 0, True
    		.Run "nircmd sendmouse left click", 0, True: wait_custom 1
	 		.Run "nircmd sendmouse left down", 0, True
	 		.Run "nircmd setcursor " & xx1 & " " & yy1, 0, True: wait_custom 1
	 		.Run "nircmd sendmouse left click", 0, True: wait_custom 1
	 		.Run "nircmd sendmouse left up", 0, true: wait_custom 3
	End With
	WriteToLogFile cooordsprint
	If emea_messages Then
		If confirmessage<>"" Then
			wait_custom "fixed7"
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing Yes will configure")
			If obj.Exist Then
				Confirmation obj, "Yes", confirmessage, details, true, false
			End If
		End If	
	elseIf changeRF_messages Then
		If confirmessage<>"" Then
			wait_custom "fixed7"
			Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing Yes will change")
			If obj.Exist Then
				WriteToLogfile "Proceed with confirmation..."
				Confirmation obj, "Yes", confirmessage, details, true, false
			else
				oops "", tid
				Set obj = UIAWindow("Sensys Networks TrafficDOT").UIAObject("Choosing Yes will change")
				If obj.Exist Then
					WriteToLogfile "Proceed with confirmation..."
					Confirmation obj, "Yes", confirmessage, details, true, false
				else
					Validationfailed "ChangeRFChannel", "0111"
				end if
			End If
		End If
	elseIf map_sensor Then
		wait_custom "fixed5"
		message="Choosing Yes will map"
		UIAObjectFind message, obj,  false, false, false, tryid
		if message<>"" then 
			assertStringEquals message, confirmMessage, "", confirmMessage
		end if
		click_button "Yes", objb, true, true: wait_custom 5
	End If
	functionend "GripAndDragObjects" & " " & xx & "," & yy & " " & xx1 & "," & yy1
end sub

Sub mouseGrabAndDrop(byval xx, byval yy, byval pixnumx, byval pixnumy)
	functionstart "mouseGrabAndDrop" & " " & xx & "," & yy
	With CreateObject("WScript.Shell")
   			.Run "nircmd setcursor " & xx & " " & yy, 0, True: wait_custom 1
    		.Run "nircmd sendmouse left click", 0, True: wait_custom 1
	 		.Run "nircmd sendmouse left down", 0, True: wait_custom 1
	 		.Run "nircmd sendmouse move " & pixnumx & " " & pixnumy, 0, true: wait_custom 1
	 		.Run "nircmd sendmouse left up", 0, True
	End With
	functionend "mouseGrabAndDrop" & " " & pixnumx & "," & pixnumy
end sub

Sub UseSameSizeForAll(byval name, byval xx, byval yy, byval pixnumx, byval pixnumy)
	functionstart "UseSameSizeForAll" & " " & name & " " & xx & "," & yy
	With CreateObject("WScript.Shell")
   			.Run "nircmd setcursor " & xx & " " & yy, 0, True: wait_custom 1
    		.Run "nircmd sendmouse right click", 0, True: wait_custom 1
	 		.Run "nircmd sendmouse move " & pixnumx & " " & pixnumy, 0, true: wait_custom 1
	 		.Run "nircmd sendmouse left click", 0, True
	End With
	functionend "UseSameSizeForAll" & " " & pixnumx & "," & pixnumy
end sub

Function SPPValidation
	functionstart "SPPValidation"
	Set obj = UIAWindow("TrafficDOT 2").UIAObject("Cannot continue in EMEA")
	If obj.Exist  Then
		UIAWindow("TrafficDOT 2").UIAButton("Load new config").Click: wait_custom 5
	End If
	functionend "SPPValidation"
End Function
	
Sub textBoxClear (byval rightorleft)
	functionstart "textBoxClear"
	With CreateObject("WScript.Shell")	
		.Run "nircmd sendkey shift down"
		.Run "nircmd sendkey "& rightorleft &" down"
		.Run "nircmd sendkey delete down"
		.Run "nircmd sendkey shift up"
		.Run "nircmd sendkey "& rightorleft &" up"
		.Run "nircmd sendkey delete up"
	End With
	functionend "textBoxClear"
End Sub

Function CompareArrays(byval array1, byval array2)
	functionstart "CompareArrays"
	CompareArrays = 0		
    If Ubound(array1) <> Ubound(array2) Then
        CompareArrays = 1
        functionstart "CompareArrays"
        Exit Function
    End If
	Set objLookup = CreateObject("Scripting.Dictionary")
	For Each strFirst In array1
	  Call objLookup.Add(strFirst, 0) ' 0 = some useless value
	Next
	For Each strSecond In array2
	  If objLookup.Exists(strSecond) Then intSame = intSame + 1
	Next
	If Ubound(array1)+1<>intSame Then
			CompareArrays = 1
	End If
	functionend "CompareArrays"
End Function
  
Function assertStringEquals( byval sString1, byval sString2, byval sEvent, byval sDetails)
	functionstart "assertStringEquals" & " " & sString1 & " vs " & sString2
	sString1=replace (sString1, " ", "")
	sString2=replace (sString2, " ", "")
	If instr(1, sString2, "*")>0 Then
		ss1 = Split(sString2,"*"): n=0
		for each ss0 in ss1
			n=n+1
			If instr(1,lcase(sString1), lcase(ss0))>0 Then
				ValidationSucceeded "assertStringEquals", sDetails
				functionend "assertStringEquals:" & " " & sString1 & "=" & sString2
			else
			    ValidationFailed "assertStringEquals", n & "> " & sDetails & "> /////" & ss0 & "\\\\\ !!!!NOT FOUND!!!! in " & sString1			
				functionend "assertStringEquals:" & " " & sString1 & "<>" & sString2
			End If
		next
		Exit function
	End If
	If lcase(sString1)=lcase(sString2) Then
		ValidationSucceeded "assertStringEquals", sDetails
		functionend "assertStringEquals"
		Exit function
	End If
	ValidationFailed "assertStringEquals", sDetails & ":" & sString1 & "<>" & sString2
	functionend "assertStringEquals"
End function

Sub assertStringPartialStatus( byval sStringRuntime, byval sStringExpected, byval sEvent, byval sDetails)
	functionstart "assertStringPartialStatus"
	sStringRuntime=replace (sStringRuntime, " ", "")
	sStringExpected=replace (sStringExpected, " ", "")
	If sStringExpected="" Then
	' do nothing'
	elseIf sStringRuntime="" Then
	' do nothing'
	else
		If InStr(1, sStringRuntime,sStringExpected)>0 Then
			ValidationSucceeded "assertStringPartialStatus", sDetails
		else
			ValidationFailed "assertStringPartialStatus", sDetails & ":" & sStringRuntime & "<>" & sStringExpected
		End If
	End If
	functionend "assertStringPartialStatus"
End su
